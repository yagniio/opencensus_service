%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(metrics_service_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_library_info.Language'/1, 'enum_value_by_symbol_library_info.Language'/1]).
-export(['enum_symbol_by_value_metric_descriptor.Type'/1, 'enum_value_by_symbol_metric_descriptor.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



-spec encode_msg(map(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(map(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      export_metrics_service_request ->
	  encode_msg_export_metrics_service_request(id(Msg,
						       TrUserData),
						    TrUserData);
      export_metrics_service_response ->
	  encode_msg_export_metrics_service_response(id(Msg,
							TrUserData),
						     TrUserData);
      node ->
	  encode_msg_node(id(Msg, TrUserData), TrUserData);
      process_identifier ->
	  encode_msg_process_identifier(id(Msg, TrUserData),
					TrUserData);
      library_info ->
	  encode_msg_library_info(id(Msg, TrUserData),
				  TrUserData);
      service_info ->
	  encode_msg_service_info(id(Msg, TrUserData),
				  TrUserData);
      timestamp ->
	  encode_msg_timestamp(id(Msg, TrUserData), TrUserData);
      metric ->
	  encode_msg_metric(id(Msg, TrUserData), TrUserData);
      metric_descriptor ->
	  encode_msg_metric_descriptor(id(Msg, TrUserData),
				       TrUserData);
      label_key ->
	  encode_msg_label_key(id(Msg, TrUserData), TrUserData);
      time_series ->
	  encode_msg_time_series(id(Msg, TrUserData), TrUserData);
      label_value ->
	  encode_msg_label_value(id(Msg, TrUserData), TrUserData);
      point ->
	  encode_msg_point(id(Msg, TrUserData), TrUserData);
      bucket_options ->
	  encode_msg_bucket_options(id(Msg, TrUserData),
				    TrUserData);
      explicit ->
	  encode_msg_explicit(id(Msg, TrUserData), TrUserData);
      bucket ->
	  encode_msg_bucket(id(Msg, TrUserData), TrUserData);
      exemplar ->
	  encode_msg_exemplar(id(Msg, TrUserData), TrUserData);
      distribution_value ->
	  encode_msg_distribution_value(id(Msg, TrUserData),
					TrUserData);
      snapshot ->
	  encode_msg_snapshot(id(Msg, TrUserData), TrUserData);
      value_at_percentile ->
	  encode_msg_value_at_percentile(id(Msg, TrUserData),
					 TrUserData);
      summary_value ->
	  encode_msg_summary_value(id(Msg, TrUserData),
				   TrUserData);
      double_value ->
	  encode_msg_double_value(id(Msg, TrUserData),
				  TrUserData);
      float_value ->
	  encode_msg_float_value(id(Msg, TrUserData), TrUserData);
      int_64_value ->
	  encode_msg_int_64_value(id(Msg, TrUserData),
				  TrUserData);
      u_int_64_value ->
	  encode_msg_u_int_64_value(id(Msg, TrUserData),
				    TrUserData);
      int_32_value ->
	  encode_msg_int_32_value(id(Msg, TrUserData),
				  TrUserData);
      u_int_32_value ->
	  encode_msg_u_int_32_value(id(Msg, TrUserData),
				    TrUserData);
      bool_value ->
	  encode_msg_bool_value(id(Msg, TrUserData), TrUserData);
      string_value ->
	  encode_msg_string_value(id(Msg, TrUserData),
				  TrUserData);
      bytes_value ->
	  encode_msg_bytes_value(id(Msg, TrUserData), TrUserData);
      resource ->
	  encode_msg_resource(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_export_metrics_service_request(Msg,
					  TrUserData) ->
    encode_msg_export_metrics_service_request(Msg, <<>>,
					      TrUserData).


encode_msg_export_metrics_service_request(#{} = M, Bin,
					  TrUserData) ->
    B1 = case M of
	   #{node := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_export_metrics_service_request_node(TrF1,
								     <<Bin/binary,
								       10>>,
								     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{metrics := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true ->
		      e_field_export_metrics_service_request_metrics(TrF2, B1,
								     TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{resource := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_export_metrics_service_request_resource(TrF3,
								    <<B2/binary,
								      26>>,
								    TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_export_metrics_service_response(_Msg,
					   _TrUserData) ->
    <<>>.

encode_msg_node(Msg, TrUserData) ->
    encode_msg_node(Msg, <<>>, TrUserData).


encode_msg_node(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{identifier := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_node_identifier(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{library_info := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_node_library_info(TrF2, <<B1/binary, 18>>,
						   TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{service_info := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			e_mfield_node_service_info(TrF3, <<B2/binary, 26>>,
						   TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{attributes := F4} ->
	  TrF4 = 'tr_encode_node.attributes'(F4, TrUserData),
	  if TrF4 == [] -> B3;
	     true -> e_field_node_attributes(TrF4, B3, TrUserData)
	  end;
      _ -> B3
    end.

encode_msg_process_identifier(Msg, TrUserData) ->
    encode_msg_process_identifier(Msg, <<>>, TrUserData).


encode_msg_process_identifier(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{host_name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{pid := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{start_timestamp := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_process_identifier_start_timestamp(TrF3,
							       <<B2/binary,
								 26>>,
							       TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_library_info(Msg, TrUserData) ->
    encode_msg_library_info(Msg, <<>>, TrUserData).


encode_msg_library_info(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{language := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'LANGUAGE_UNSPECIFIED'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_library_info.Language'(TrF1, <<Bin/binary, 8>>,
						       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{exporter_version := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{core_library_version := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    case is_empty_string(TrF3) of
	      true -> B2;
	      false ->
		  e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_service_info(Msg, TrUserData) ->
    encode_msg_service_info(Msg, <<>>, TrUserData).


encode_msg_service_info(#{} = M, Bin, TrUserData) ->
    case M of
      #{name := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_timestamp(Msg, TrUserData) ->
    encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_metric(Msg, TrUserData) ->
    encode_msg_metric(Msg, <<>>, TrUserData).


encode_msg_metric(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{descriptor := F1} ->
	       case id(F1, TrUserData) of
		 {metric_descriptor, TF1} ->
		     begin
		       TrTF1 = id(TF1, TrUserData),
		       e_mfield_metric_metric_descriptor(TrTF1,
							 <<Bin/binary, 10>>,
							 TrUserData)
		     end;
		 {name, TF1} ->
		     begin
		       TrTF1 = id(TF1, TrUserData),
		       e_type_string(TrTF1, <<Bin/binary, 18>>, TrUserData)
		     end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{timeseries := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true -> e_field_metric_timeseries(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{resource := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_metric_resource(TrF3, <<B2/binary, 34>>,
					    TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_metric_descriptor(Msg, TrUserData) ->
    encode_msg_metric_descriptor(Msg, <<>>, TrUserData).


encode_msg_metric_descriptor(#{} = M, Bin,
			     TrUserData) ->
    B1 = case M of
	   #{name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{description := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case is_empty_string(TrF2) of
		   true -> B1;
		   false ->
		       e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{unit := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 case is_empty_string(TrF3) of
		   true -> B2;
		   false ->
		       e_type_string(TrF3, <<B2/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{type := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 'UNSPECIFIED'; TrF4 =:= 0 -> B3;
		    true ->
			'e_enum_metric_descriptor.Type'(TrF4, <<B3/binary, 32>>,
							TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{label_keys := F5} ->
	  TrF5 = id(F5, TrUserData),
	  if TrF5 == [] -> B4;
	     true ->
		 e_field_metric_descriptor_label_keys(TrF5, B4,
						      TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_label_key(Msg, TrUserData) ->
    encode_msg_label_key(Msg, <<>>, TrUserData).


encode_msg_label_key(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{description := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_time_series(Msg, TrUserData) ->
    encode_msg_time_series(Msg, <<>>, TrUserData).


encode_msg_time_series(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{start_timestamp := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_time_series_start_timestamp(TrF1,
							     <<Bin/binary, 10>>,
							     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{label_values := F2} ->
	       TrF2 = id(F2, TrUserData),
	       if TrF2 == [] -> B1;
		  true ->
		      e_field_time_series_label_values(TrF2, B1, TrUserData)
	       end;
	   _ -> B1
	 end,
    case M of
      #{points := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true -> e_field_time_series_points(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_label_value(Msg, TrUserData) ->
    encode_msg_label_value(Msg, <<>>, TrUserData).


encode_msg_label_value(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{value := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{has_value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= false -> B1;
	       true -> e_type_bool(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_point(Msg, TrUserData) ->
    encode_msg_point(Msg, <<>>, TrUserData).


encode_msg_point(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{timestamp := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_point_timestamp(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  case id(F2, TrUserData) of
	    {int64_value, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_type_int64(TrTF2, <<B1/binary, 16>>, TrUserData)
		end;
	    {double_value, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_type_double(TrTF2, <<B1/binary, 25>>, TrUserData)
		end;
	    {distribution_value, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_mfield_point_distribution_value(TrTF2,
						    <<B1/binary, 34>>,
						    TrUserData)
		end;
	    {summary_value, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_mfield_point_summary_value(TrTF2, <<B1/binary, 42>>,
					       TrUserData)
		end
	  end;
      _ -> B1
    end.

encode_msg_bucket_options(Msg, TrUserData) ->
    encode_msg_bucket_options(Msg, <<>>, TrUserData).


encode_msg_bucket_options(#{} = M, Bin, TrUserData) ->
    case M of
      #{type := F1} ->
	  case id(F1, TrUserData) of
	    {explicit, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_bucket_options_explicit(TrTF1,
						   <<Bin/binary, 10>>,
						   TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_explicit(Msg, TrUserData) ->
    encode_msg_explicit(Msg, <<>>, TrUserData).


encode_msg_explicit(#{} = M, Bin, TrUserData) ->
    case M of
      #{bounds := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_explicit_bounds(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_bucket(Msg, TrUserData) ->
    encode_msg_bucket(Msg, <<>>, TrUserData).


encode_msg_bucket(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{count := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{exemplar := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_bucket_exemplar(TrF2, <<B1/binary, 18>>,
					    TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_exemplar(Msg, TrUserData) ->
    encode_msg_exemplar(Msg, <<>>, TrUserData).


encode_msg_exemplar(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{value := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true ->
			e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{timestamp := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_exemplar_timestamp(TrF2, <<B1/binary, 18>>,
						    TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{attachments := F3} ->
	  TrF3 = 'tr_encode_exemplar.attachments'(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_exemplar_attachments(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_distribution_value(Msg, TrUserData) ->
    encode_msg_distribution_value(Msg, <<>>, TrUserData).


encode_msg_distribution_value(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{count := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{sum := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0.0 -> B1;
		    true ->
			e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{sum_of_squared_deviation := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0.0 -> B2;
		    true ->
			e_type_double(TrF3, <<B2/binary, 25>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{bucket_options := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= undefined -> B3;
		    true ->
			e_mfield_distribution_value_bucket_options(TrF4,
								   <<B3/binary,
								     34>>,
								   TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    case M of
      #{buckets := F5} ->
	  TrF5 = id(F5, TrUserData),
	  if TrF5 == [] -> B4;
	     true ->
		 e_field_distribution_value_buckets(TrF5, B4, TrUserData)
	  end;
      _ -> B4
    end.

encode_msg_snapshot(Msg, TrUserData) ->
    encode_msg_snapshot(Msg, <<>>, TrUserData).


encode_msg_snapshot(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{count := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_snapshot_count(TrF1, <<Bin/binary, 10>>,
						TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{sum := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_snapshot_sum(TrF2, <<B1/binary, 18>>,
					      TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{percentile_values := F3} ->
	  TrF3 = id(F3, TrUserData),
	  if TrF3 == [] -> B2;
	     true ->
		 e_field_snapshot_percentile_values(TrF3, B2, TrUserData)
	  end;
      _ -> B2
    end.

encode_msg_value_at_percentile(Msg, TrUserData) ->
    encode_msg_value_at_percentile(Msg, <<>>, TrUserData).


encode_msg_value_at_percentile(#{} = M, Bin,
			       TrUserData) ->
    B1 = case M of
	   #{percentile := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0.0 -> Bin;
		    true ->
			e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0.0 -> B1;
	       true ->
		   e_type_double(TrF2, <<B1/binary, 17>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_summary_value(Msg, TrUserData) ->
    encode_msg_summary_value(Msg, <<>>, TrUserData).


encode_msg_summary_value(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{count := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_summary_value_count(TrF1, <<Bin/binary, 10>>,
						     TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{sum := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_summary_value_sum(TrF2, <<B1/binary, 18>>,
						   TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{snapshot := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= undefined -> B2;
	       true ->
		   e_mfield_summary_value_snapshot(TrF3, <<B2/binary, 26>>,
						   TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_double_value(Msg, TrUserData) ->
    encode_msg_double_value(Msg, <<>>, TrUserData).


encode_msg_double_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_float_value(Msg, TrUserData) ->
    encode_msg_float_value(Msg, <<>>, TrUserData).


encode_msg_float_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_int_64_value(Msg, TrUserData) ->
    encode_msg_int_64_value(Msg, <<>>, TrUserData).


encode_msg_int_64_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_u_int_64_value(Msg, TrUserData) ->
    encode_msg_u_int_64_value(Msg, <<>>, TrUserData).


encode_msg_u_int_64_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_int_32_value(Msg, TrUserData) ->
    encode_msg_int_32_value(Msg, <<>>, TrUserData).


encode_msg_int_32_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_u_int_32_value(Msg, TrUserData) ->
    encode_msg_u_int_32_value(Msg, <<>>, TrUserData).


encode_msg_u_int_32_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_bool_value(Msg, TrUserData) ->
    encode_msg_bool_value(Msg, <<>>, TrUserData).


encode_msg_bool_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= false -> Bin;
	       true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_string_value(Msg, TrUserData) ->
    encode_msg_string_value(Msg, <<>>, TrUserData).


encode_msg_string_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_bytes_value(Msg, TrUserData) ->
    encode_msg_bytes_value(Msg, <<>>, TrUserData).


encode_msg_bytes_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case iolist_size(TrF1) of
	      0 -> Bin;
	      _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_resource(Msg, TrUserData) ->
    encode_msg_resource(Msg, <<>>, TrUserData).


encode_msg_resource(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{labels := F2} ->
	  TrF2 = 'tr_encode_resource.labels'(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true -> e_field_resource_labels(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

e_mfield_export_metrics_service_request_node(Msg, Bin,
					     TrUserData) ->
    SubBin = encode_msg_node(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_export_metrics_service_request_metrics(Msg,
						Bin, TrUserData) ->
    SubBin = encode_msg_metric(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_export_metrics_service_request_metrics([Elem
						| Rest],
					       Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_export_metrics_service_request_metrics(id(Elem,
							   TrUserData),
							Bin2, TrUserData),
    e_field_export_metrics_service_request_metrics(Rest,
						   Bin3, TrUserData);
e_field_export_metrics_service_request_metrics([], Bin,
					       _TrUserData) ->
    Bin.

e_mfield_export_metrics_service_request_resource(Msg,
						 Bin, TrUserData) ->
    SubBin = encode_msg_resource(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_node_identifier(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_process_identifier(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_node_library_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_library_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_node_service_info(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_service_info(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_node_attributes(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_node_attributes([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 34>>,
    Bin3 =
	e_mfield_node_attributes('tr_encode_node.attributes[x]'(Elem,
								TrUserData),
				 Bin2, TrUserData),
    e_field_node_attributes(Rest, Bin3, TrUserData);
e_field_node_attributes([], Bin, _TrUserData) -> Bin.

e_mfield_process_identifier_start_timestamp(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_metric_metric_descriptor(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_metric_descriptor(Msg, <<>>,
					  TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_metric_timeseries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_time_series(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_metric_timeseries([Elem | Rest], Bin,
			  TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_metric_timeseries(id(Elem, TrUserData),
				      Bin2, TrUserData),
    e_field_metric_timeseries(Rest, Bin3, TrUserData);
e_field_metric_timeseries([], Bin, _TrUserData) -> Bin.

e_mfield_metric_resource(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_resource(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_metric_descriptor_label_keys(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_label_key(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_metric_descriptor_label_keys([Elem | Rest], Bin,
				     TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_metric_descriptor_label_keys(id(Elem,
						    TrUserData),
						 Bin2, TrUserData),
    e_field_metric_descriptor_label_keys(Rest, Bin3,
					 TrUserData);
e_field_metric_descriptor_label_keys([], Bin,
				     _TrUserData) ->
    Bin.

e_mfield_time_series_start_timestamp(Msg, Bin,
				     TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_series_label_values(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_label_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_time_series_label_values([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 = e_mfield_time_series_label_values(id(Elem,
						TrUserData),
					     Bin2, TrUserData),
    e_field_time_series_label_values(Rest, Bin3,
				     TrUserData);
e_field_time_series_label_values([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_time_series_points(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_point(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_time_series_points([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_time_series_points(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_time_series_points(Rest, Bin3, TrUserData);
e_field_time_series_points([], Bin, _TrUserData) -> Bin.

e_mfield_point_timestamp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_point_distribution_value(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_distribution_value(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_point_summary_value(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_summary_value(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_bucket_options_explicit(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_explicit(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_explicit_bounds(Elems, Bin, TrUserData)
    when Elems =/= [] ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_varint(length(Elems) * 8, Bin2),
    e_pfield_explicit_bounds(Elems, Bin3, TrUserData);
e_field_explicit_bounds([], Bin, _TrUserData) -> Bin.

e_pfield_explicit_bounds([V | Rest], Bin, TrUserData) ->
    TrV = id(V, TrUserData),
    Bin2 = if is_number(TrV) ->
		  <<Bin/binary, TrV:64/float-little>>;
	      TrV =:= infinity -> <<Bin/binary, 0:48, 240, 127>>;
	      TrV =:= '-infinity' -> <<Bin/binary, 0:48, 240, 255>>;
	      TrV =:= nan -> <<Bin/binary, 0:48, 248, 127>>
	   end,
    e_pfield_explicit_bounds(Rest, Bin2, TrUserData);
e_pfield_explicit_bounds([], Bin, _TrUserData) -> Bin.

e_mfield_bucket_exemplar(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_exemplar(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_exemplar_timestamp(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_exemplar_attachments(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_exemplar_attachments([Elem | Rest], Bin,
			     TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 =
	e_mfield_exemplar_attachments('tr_encode_exemplar.attachments[x]'(Elem,
									  TrUserData),
				      Bin2, TrUserData),
    e_field_exemplar_attachments(Rest, Bin3, TrUserData);
e_field_exemplar_attachments([], Bin, _TrUserData) ->
    Bin.

e_mfield_distribution_value_bucket_options(Msg, Bin,
					   TrUserData) ->
    SubBin = encode_msg_bucket_options(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_distribution_value_buckets(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_bucket(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_distribution_value_buckets([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 42>>,
    Bin3 = e_mfield_distribution_value_buckets(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_distribution_value_buckets(Rest, Bin3,
				       TrUserData);
e_field_distribution_value_buckets([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_snapshot_count(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_int_64_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_snapshot_sum(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_double_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_snapshot_percentile_values(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_value_at_percentile(Msg, <<>>,
					    TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_snapshot_percentile_values([Elem | Rest], Bin,
				   TrUserData) ->
    Bin2 = <<Bin/binary, 26>>,
    Bin3 = e_mfield_snapshot_percentile_values(id(Elem,
						  TrUserData),
					       Bin2, TrUserData),
    e_field_snapshot_percentile_values(Rest, Bin3,
				       TrUserData);
e_field_snapshot_percentile_values([], Bin,
				   _TrUserData) ->
    Bin.

e_mfield_summary_value_count(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_int_64_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_summary_value_sum(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_double_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_summary_value_snapshot(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_snapshot(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_resource_labels(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_resource_labels([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_resource_labels('tr_encode_resource.labels[x]'(Elem,
								TrUserData),
				 Bin2, TrUserData),
    e_field_resource_labels(Rest, Bin3, TrUserData);
e_field_resource_labels([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,string>'(#{key := F1,
				  value := F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'e_enum_library_info.Language'('LANGUAGE_UNSPECIFIED',
			       Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_library_info.Language'('CPP', Bin,
			       _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_library_info.Language'('C_SHARP', Bin,
			       _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_library_info.Language'('ERLANG', Bin,
			       _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_library_info.Language'('GO_LANG', Bin,
			       _TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_library_info.Language'('JAVA', Bin,
			       _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_library_info.Language'('NODE_JS', Bin,
			       _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_library_info.Language'('PHP', Bin,
			       _TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_library_info.Language'('PYTHON', Bin,
			       _TrUserData) ->
    <<Bin/binary, 8>>;
'e_enum_library_info.Language'('RUBY', Bin,
			       _TrUserData) ->
    <<Bin/binary, 9>>;
'e_enum_library_info.Language'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_metric_descriptor.Type'('UNSPECIFIED', Bin,
				_TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_metric_descriptor.Type'('GAUGE_INT64', Bin,
				_TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_metric_descriptor.Type'('GAUGE_DOUBLE', Bin,
				_TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_metric_descriptor.Type'('GAUGE_DISTRIBUTION',
				Bin, _TrUserData) ->
    <<Bin/binary, 3>>;
'e_enum_metric_descriptor.Type'('CUMULATIVE_INT64', Bin,
				_TrUserData) ->
    <<Bin/binary, 4>>;
'e_enum_metric_descriptor.Type'('CUMULATIVE_DOUBLE',
				Bin, _TrUserData) ->
    <<Bin/binary, 5>>;
'e_enum_metric_descriptor.Type'('CUMULATIVE_DISTRIBUTION',
				Bin, _TrUserData) ->
    <<Bin/binary, 6>>;
'e_enum_metric_descriptor.Type'('SUMMARY', Bin,
				_TrUserData) ->
    <<Bin/binary, 7>>;
'e_enum_metric_descriptor.Type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(export_metrics_service_request, Bin,
		  TrUserData) ->
    id(decode_msg_export_metrics_service_request(Bin,
						 TrUserData),
       TrUserData);
decode_msg_2_doit(export_metrics_service_response, Bin,
		  TrUserData) ->
    id(decode_msg_export_metrics_service_response(Bin,
						  TrUserData),
       TrUserData);
decode_msg_2_doit(node, Bin, TrUserData) ->
    id(decode_msg_node(Bin, TrUserData), TrUserData);
decode_msg_2_doit(process_identifier, Bin,
		  TrUserData) ->
    id(decode_msg_process_identifier(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(library_info, Bin, TrUserData) ->
    id(decode_msg_library_info(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(service_info, Bin, TrUserData) ->
    id(decode_msg_service_info(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) ->
    id(decode_msg_timestamp(Bin, TrUserData), TrUserData);
decode_msg_2_doit(metric, Bin, TrUserData) ->
    id(decode_msg_metric(Bin, TrUserData), TrUserData);
decode_msg_2_doit(metric_descriptor, Bin, TrUserData) ->
    id(decode_msg_metric_descriptor(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(label_key, Bin, TrUserData) ->
    id(decode_msg_label_key(Bin, TrUserData), TrUserData);
decode_msg_2_doit(time_series, Bin, TrUserData) ->
    id(decode_msg_time_series(Bin, TrUserData), TrUserData);
decode_msg_2_doit(label_value, Bin, TrUserData) ->
    id(decode_msg_label_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(point, Bin, TrUserData) ->
    id(decode_msg_point(Bin, TrUserData), TrUserData);
decode_msg_2_doit(bucket_options, Bin, TrUserData) ->
    id(decode_msg_bucket_options(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(explicit, Bin, TrUserData) ->
    id(decode_msg_explicit(Bin, TrUserData), TrUserData);
decode_msg_2_doit(bucket, Bin, TrUserData) ->
    id(decode_msg_bucket(Bin, TrUserData), TrUserData);
decode_msg_2_doit(exemplar, Bin, TrUserData) ->
    id(decode_msg_exemplar(Bin, TrUserData), TrUserData);
decode_msg_2_doit(distribution_value, Bin,
		  TrUserData) ->
    id(decode_msg_distribution_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(snapshot, Bin, TrUserData) ->
    id(decode_msg_snapshot(Bin, TrUserData), TrUserData);
decode_msg_2_doit(value_at_percentile, Bin,
		  TrUserData) ->
    id(decode_msg_value_at_percentile(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(summary_value, Bin, TrUserData) ->
    id(decode_msg_summary_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(double_value, Bin, TrUserData) ->
    id(decode_msg_double_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(float_value, Bin, TrUserData) ->
    id(decode_msg_float_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(int_64_value, Bin, TrUserData) ->
    id(decode_msg_int_64_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_64_value, Bin, TrUserData) ->
    id(decode_msg_u_int_64_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(int_32_value, Bin, TrUserData) ->
    id(decode_msg_int_32_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_32_value, Bin, TrUserData) ->
    id(decode_msg_u_int_32_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bool_value, Bin, TrUserData) ->
    id(decode_msg_bool_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(string_value, Bin, TrUserData) ->
    id(decode_msg_string_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bytes_value, Bin, TrUserData) ->
    id(decode_msg_bytes_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(resource, Bin, TrUserData) ->
    id(decode_msg_resource(Bin, TrUserData), TrUserData).



decode_msg_export_metrics_service_request(Bin,
					  TrUserData) ->
    dfp_read_field_def_export_metrics_service_request(Bin,
						      0, 0,
						      id('$undef', TrUserData),
						      id([], TrUserData),
						      id('$undef', TrUserData),
						      TrUserData).

dfp_read_field_def_export_metrics_service_request(<<10,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    d_field_export_metrics_service_request_node(Rest, Z1,
						Z2, F@_1, F@_2, F@_3,
						TrUserData);
dfp_read_field_def_export_metrics_service_request(<<18,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    d_field_export_metrics_service_request_metrics(Rest, Z1,
						   Z2, F@_1, F@_2, F@_3,
						   TrUserData);
dfp_read_field_def_export_metrics_service_request(<<26,
						    Rest/binary>>,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    d_field_export_metrics_service_request_resource(Rest,
						    Z1, Z2, F@_1, F@_2, F@_3,
						    TrUserData);
dfp_read_field_def_export_metrics_service_request(<<>>,
						  0, 0, F@_1, R1, F@_3,
						  TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{node => F@_1}
	 end,
    S3 = if R1 == '$undef' -> S2;
	    true -> S2#{metrics => lists_reverse(R1, TrUserData)}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{resource => F@_3}
    end;
dfp_read_field_def_export_metrics_service_request(Other,
						  Z1, Z2, F@_1, F@_2, F@_3,
						  TrUserData) ->
    dg_read_field_def_export_metrics_service_request(Other,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData).

dg_read_field_def_export_metrics_service_request(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_export_metrics_service_request(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
dg_read_field_def_export_metrics_service_request(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_export_metrics_service_request_node(Rest, 0, 0,
						      F@_1, F@_2, F@_3,
						      TrUserData);
      18 ->
	  d_field_export_metrics_service_request_metrics(Rest, 0,
							 0, F@_1, F@_2, F@_3,
							 TrUserData);
      26 ->
	  d_field_export_metrics_service_request_resource(Rest, 0,
							  0, F@_1, F@_2, F@_3,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_export_metrics_service_request(Rest, 0, 0,
							   F@_1, F@_2, F@_3,
							   TrUserData);
	    1 ->
		skip_64_export_metrics_service_request(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData);
	    2 ->
		skip_length_delimited_export_metrics_service_request(Rest,
								     0, 0, F@_1,
								     F@_2, F@_3,
								     TrUserData);
	    3 ->
		skip_group_export_metrics_service_request(Rest,
							  Key bsr 3, 0, F@_1,
							  F@_2, F@_3,
							  TrUserData);
	    5 ->
		skip_32_export_metrics_service_request(Rest, 0, 0, F@_1,
						       F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_export_metrics_service_request(<<>>,
						 0, 0, F@_1, R1, F@_3,
						 TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{node => F@_1}
	 end,
    S3 = if R1 == '$undef' -> S2;
	    true -> S2#{metrics => lists_reverse(R1, TrUserData)}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{resource => F@_3}
    end.

d_field_export_metrics_service_request_node(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, F@_3,
					    TrUserData)
    when N < 57 ->
    d_field_export_metrics_service_request_node(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2, F@_3,
						TrUserData);
d_field_export_metrics_service_request_node(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, Prev, F@_2, F@_3,
					    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_node(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_export_metrics_service_request(RestF,
						      0, 0,
						      if Prev == '$undef' ->
							     NewFValue;
							 true ->
							     merge_msg_node(Prev,
									    NewFValue,
									    TrUserData)
						      end,
						      F@_2, F@_3, TrUserData).

d_field_export_metrics_service_request_metrics(<<1:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, F@_2, F@_3,
					       TrUserData)
    when N < 57 ->
    d_field_export_metrics_service_request_metrics(Rest,
						   N + 7, X bsl N + Acc, F@_1,
						   F@_2, F@_3, TrUserData);
d_field_export_metrics_service_request_metrics(<<0:1,
						 X:7, Rest/binary>>,
					       N, Acc, F@_1, Prev, F@_3,
					       TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_metric(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_export_metrics_service_request(RestF,
						      0, 0, F@_1,
						      cons(NewFValue, Prev,
							   TrUserData),
						      F@_3, TrUserData).

d_field_export_metrics_service_request_resource(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, F@_3,
						TrUserData)
    when N < 57 ->
    d_field_export_metrics_service_request_resource(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, F@_3, TrUserData);
d_field_export_metrics_service_request_resource(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, Prev,
						TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_resource(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_export_metrics_service_request(RestF,
						      0, 0, F@_1, F@_2,
						      if Prev == '$undef' ->
							     NewFValue;
							 true ->
							     merge_msg_resource(Prev,
										NewFValue,
										TrUserData)
						      end,
						      TrUserData).

skip_varint_export_metrics_service_request(<<1:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    skip_varint_export_metrics_service_request(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
skip_varint_export_metrics_service_request(<<0:1, _:7,
					     Rest/binary>>,
					   Z1, Z2, F@_1, F@_2, F@_3,
					   TrUserData) ->
    dfp_read_field_def_export_metrics_service_request(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

skip_length_delimited_export_metrics_service_request(<<1:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData)
    when N < 57 ->
    skip_length_delimited_export_metrics_service_request(Rest,
							 N + 7, X bsl N + Acc,
							 F@_1, F@_2, F@_3,
							 TrUserData);
skip_length_delimited_export_metrics_service_request(<<0:1,
						       X:7, Rest/binary>>,
						     N, Acc, F@_1, F@_2, F@_3,
						     TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_export_metrics_service_request(Rest2,
						      0, 0, F@_1, F@_2, F@_3,
						      TrUserData).

skip_group_export_metrics_service_request(Bin, FNum, Z2,
					  F@_1, F@_2, F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_export_metrics_service_request(Rest,
						      0, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

skip_32_export_metrics_service_request(<<_:32,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_export_metrics_service_request(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

skip_64_export_metrics_service_request(<<_:64,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_export_metrics_service_request(Rest,
						      Z1, Z2, F@_1, F@_2, F@_3,
						      TrUserData).

decode_msg_export_metrics_service_response(Bin,
					   TrUserData) ->
    dfp_read_field_def_export_metrics_service_response(Bin,
						       0, 0, TrUserData).

dfp_read_field_def_export_metrics_service_response(<<>>,
						   0, 0, _) ->
    #{};
dfp_read_field_def_export_metrics_service_response(Other,
						   Z1, Z2, TrUserData) ->
    dg_read_field_def_export_metrics_service_response(Other,
						      Z1, Z2, TrUserData).

dg_read_field_def_export_metrics_service_response(<<1:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_export_metrics_service_response(Rest,
						      N + 7, X bsl N + Acc,
						      TrUserData);
dg_read_field_def_export_metrics_service_response(<<0:1,
						    X:7, Rest/binary>>,
						  N, Acc, TrUserData) ->
    Key = X bsl N + Acc,
    case Key band 7 of
      0 ->
	  skip_varint_export_metrics_service_response(Rest, 0, 0,
						      TrUserData);
      1 ->
	  skip_64_export_metrics_service_response(Rest, 0, 0,
						  TrUserData);
      2 ->
	  skip_length_delimited_export_metrics_service_response(Rest,
								0, 0,
								TrUserData);
      3 ->
	  skip_group_export_metrics_service_response(Rest,
						     Key bsr 3, 0, TrUserData);
      5 ->
	  skip_32_export_metrics_service_response(Rest, 0, 0,
						  TrUserData)
    end;
dg_read_field_def_export_metrics_service_response(<<>>,
						  0, 0, _) ->
    #{}.

skip_varint_export_metrics_service_response(<<1:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, TrUserData) ->
    skip_varint_export_metrics_service_response(Rest, Z1,
						Z2, TrUserData);
skip_varint_export_metrics_service_response(<<0:1, _:7,
					      Rest/binary>>,
					    Z1, Z2, TrUserData) ->
    dfp_read_field_def_export_metrics_service_response(Rest,
						       Z1, Z2, TrUserData).

skip_length_delimited_export_metrics_service_response(<<1:1,
							X:7, Rest/binary>>,
						      N, Acc, TrUserData)
    when N < 57 ->
    skip_length_delimited_export_metrics_service_response(Rest,
							  N + 7, X bsl N + Acc,
							  TrUserData);
skip_length_delimited_export_metrics_service_response(<<0:1,
							X:7, Rest/binary>>,
						      N, Acc, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_export_metrics_service_response(Rest2,
						       0, 0, TrUserData).

skip_group_export_metrics_service_response(Bin, FNum,
					   Z2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_export_metrics_service_response(Rest,
						       0, Z2, TrUserData).

skip_32_export_metrics_service_response(<<_:32,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_export_metrics_service_response(Rest,
						       Z1, Z2, TrUserData).

skip_64_export_metrics_service_response(<<_:64,
					  Rest/binary>>,
					Z1, Z2, TrUserData) ->
    dfp_read_field_def_export_metrics_service_response(Rest,
						       Z1, Z2, TrUserData).

decode_msg_node(Bin, TrUserData) ->
    dfp_read_field_def_node(Bin, 0, 0,
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    id('$undef', TrUserData),
			    'tr_decode_init_default_node.attributes'([],
								     TrUserData),
			    TrUserData).

dfp_read_field_def_node(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_identifier(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_node(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_library_info(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_node(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_service_info(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
dfp_read_field_def_node(<<34, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_node_attributes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_node(<<>>, 0, 0, F@_1, F@_2, F@_3,
			R1, TrUserData) ->
    S1 = #{attributes =>
	       'tr_decode_repeated_finalize_node.attributes'(R1,
							     TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{identifier => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{library_info => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{service_info => F@_3}
    end;
dfp_read_field_def_node(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData) ->
    dg_read_field_def_node(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData).

dg_read_field_def_node(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_node(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_node(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_node_identifier(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      18 ->
	  d_field_node_library_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      26 ->
	  d_field_node_service_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				    F@_4, TrUserData);
      34 ->
	  d_field_node_attributes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_node(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    1 ->
		skip_64_node(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData);
	    2 ->
		skip_length_delimited_node(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    3 ->
		skip_group_node(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
	    5 ->
		skip_32_node(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData)
	  end
    end;
dg_read_field_def_node(<<>>, 0, 0, F@_1, F@_2, F@_3, R1,
		       TrUserData) ->
    S1 = #{attributes =>
	       'tr_decode_repeated_finalize_node.attributes'(R1,
							     TrUserData)},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{identifier => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{library_info => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{service_info => F@_3}
    end.

d_field_node_identifier(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_identifier(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_node_identifier(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_process_identifier(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_node(RestF, 0, 0,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_process_identifier(Prev, NewFValue,
								TrUserData)
			    end,
			    F@_2, F@_3, F@_4, TrUserData).

d_field_node_library_info(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_library_info(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_node_library_info(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_library_info(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_node(RestF, 0, 0, F@_1,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_library_info(Prev, NewFValue,
							  TrUserData)
			    end,
			    F@_3, F@_4, TrUserData).

d_field_node_service_info(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_service_info(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_node_service_info(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, Prev, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_service_info(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_node(RestF, 0, 0, F@_1, F@_2,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_service_info(Prev, NewFValue,
							  TrUserData)
			    end,
			    F@_4, TrUserData).

d_field_node_attributes(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_node_attributes(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_node_attributes(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_node(RestF, 0, 0, F@_1, F@_2, F@_3,
			    'tr_decode_repeated_add_elem_node.attributes'(NewFValue,
									  Prev,
									  TrUserData),
			    TrUserData).

skip_varint_node(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_node(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     TrUserData);
skip_varint_node(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_node(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_length_delimited_node(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_node(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_node(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_node(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_group_node(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_node(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_32_node(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_node(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_64_node(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_node(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

decode_msg_process_identifier(Bin, TrUserData) ->
    dfp_read_field_def_process_identifier(Bin, 0, 0,
					  id(<<>>, TrUserData),
					  id(0, TrUserData),
					  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_process_identifier(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_process_identifier_host_name(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, TrUserData);
dfp_read_field_def_process_identifier(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_process_identifier_pid(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_process_identifier(<<26,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_process_identifier_start_timestamp(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_process_identifier(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, _) ->
    S1 = #{host_name => F@_1, pid => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{start_timestamp => F@_3}
    end;
dfp_read_field_def_process_identifier(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, TrUserData) ->
    dg_read_field_def_process_identifier(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, TrUserData).

dg_read_field_def_process_identifier(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_process_identifier(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
dg_read_field_def_process_identifier(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_process_identifier_host_name(Rest, 0, 0, F@_1,
					       F@_2, F@_3, TrUserData);
      16 ->
	  d_field_process_identifier_pid(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      26 ->
	  d_field_process_identifier_start_timestamp(Rest, 0, 0,
						     F@_1, F@_2, F@_3,
						     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_process_identifier(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    1 ->
		skip_64_process_identifier(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData);
	    2 ->
		skip_length_delimited_process_identifier(Rest, 0, 0,
							 F@_1, F@_2, F@_3,
							 TrUserData);
	    3 ->
		skip_group_process_identifier(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, TrUserData);
	    5 ->
		skip_32_process_identifier(Rest, 0, 0, F@_1, F@_2, F@_3,
					   TrUserData)
	  end
    end;
dg_read_field_def_process_identifier(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, _) ->
    S1 = #{host_name => F@_1, pid => F@_2},
    if F@_3 == '$undef' -> S1;
       true -> S1#{start_timestamp => F@_3}
    end.

d_field_process_identifier_host_name(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_process_identifier_host_name(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3,
					 TrUserData);
d_field_process_identifier_host_name(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_process_identifier(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, TrUserData).

d_field_process_identifier_pid(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_process_identifier_pid(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_process_identifier_pid(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_process_identifier(RestF, 0, 0, F@_1,
					  NewFValue, F@_3, TrUserData).

d_field_process_identifier_start_timestamp(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_process_identifier_start_timestamp(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       TrUserData);
d_field_process_identifier_start_timestamp(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, Prev,
					   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_process_identifier(RestF, 0, 0, F@_1,
					  F@_2,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_timestamp(Prev,
								     NewFValue,
								     TrUserData)
					  end,
					  TrUserData).

skip_varint_process_identifier(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_process_identifier(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
skip_varint_process_identifier(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_process_identifier(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_length_delimited_process_identifier(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_process_identifier(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     TrUserData);
skip_length_delimited_process_identifier(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_process_identifier(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, TrUserData).

skip_group_process_identifier(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_process_identifier(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, TrUserData).

skip_32_process_identifier(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_process_identifier(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

skip_64_process_identifier(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_process_identifier(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData).

decode_msg_library_info(Bin, TrUserData) ->
    dfp_read_field_def_library_info(Bin, 0, 0,
				    id('LANGUAGE_UNSPECIFIED', TrUserData),
				    id(<<>>, TrUserData), id(<<>>, TrUserData),
				    TrUserData).

dfp_read_field_def_library_info(<<8, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_library_info_language(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData);
dfp_read_field_def_library_info(<<18, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_library_info_exporter_version(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_library_info(<<26, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_library_info_core_library_version(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, TrUserData);
dfp_read_field_def_library_info(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    #{language => F@_1, exporter_version => F@_2,
      core_library_version => F@_3};
dfp_read_field_def_library_info(Other, Z1, Z2, F@_1,
				F@_2, F@_3, TrUserData) ->
    dg_read_field_def_library_info(Other, Z1, Z2, F@_1,
				   F@_2, F@_3, TrUserData).

dg_read_field_def_library_info(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_library_info(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_library_info(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_library_info_language(Rest, 0, 0, F@_1, F@_2,
					F@_3, TrUserData);
      18 ->
	  d_field_library_info_exporter_version(Rest, 0, 0, F@_1,
						F@_2, F@_3, TrUserData);
      26 ->
	  d_field_library_info_core_library_version(Rest, 0, 0,
						    F@_1, F@_2, F@_3,
						    TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_library_info(Rest, 0, 0, F@_1, F@_2, F@_3,
					 TrUserData);
	    1 ->
		skip_64_library_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    2 ->
		skip_length_delimited_library_info(Rest, 0, 0, F@_1,
						   F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_library_info(Rest, Key bsr 3, 0, F@_1, F@_2,
					F@_3, TrUserData);
	    5 ->
		skip_32_library_info(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData)
	  end
    end;
dg_read_field_def_library_info(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, _) ->
    #{language => F@_1, exporter_version => F@_2,
      core_library_version => F@_3}.

d_field_library_info_language(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_library_info_language(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_library_info_language(<<0:1, X:7, Rest/binary>>,
			      N, Acc, _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_library_info.Language'(begin
					     <<Res:32/signed-native>> = <<(X bsl
									     N
									     +
									     Acc):32/unsigned-native>>,
					     id(Res, TrUserData)
					   end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_library_info(RestF, 0, 0, NewFValue,
				    F@_2, F@_3, TrUserData).

d_field_library_info_exporter_version(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_library_info_exporter_version(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3,
					  TrUserData);
d_field_library_info_exporter_version(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_library_info(RestF, 0, 0, F@_1,
				    NewFValue, F@_3, TrUserData).

d_field_library_info_core_library_version(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_library_info_core_library_version(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      TrUserData);
d_field_library_info_core_library_version(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_library_info(RestF, 0, 0, F@_1, F@_2,
				    NewFValue, TrUserData).

skip_varint_library_info(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_library_info(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     TrUserData);
skip_varint_library_info(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_library_info(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_length_delimited_library_info(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_library_info(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
skip_length_delimited_library_info(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_library_info(Rest2, 0, 0, F@_1, F@_2,
				    F@_3, TrUserData).

skip_group_library_info(Bin, FNum, Z2, F@_1, F@_2, F@_3,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_library_info(Rest, 0, Z2, F@_1, F@_2,
				    F@_3, TrUserData).

skip_32_library_info(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_library_info(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

skip_64_library_info(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_library_info(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

decode_msg_service_info(Bin, TrUserData) ->
    dfp_read_field_def_service_info(Bin, 0, 0,
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_service_info(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_service_info_name(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_service_info(<<>>, 0, 0, F@_1, _) ->
    #{name => F@_1};
dfp_read_field_def_service_info(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_service_info(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_service_info(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_service_info(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_service_info(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_service_info_name(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_service_info(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_service_info(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_service_info(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_service_info(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_service_info(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_service_info(<<>>, 0, 0, F@_1, _) ->
    #{name => F@_1}.

d_field_service_info_name(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_service_info_name(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_service_info_name(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_service_info(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_service_info(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_service_info(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_service_info(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_service_info(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_service_info(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_service_info(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_service_info(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_service_info(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_service_info(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_service_info(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_service_info(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_service_info(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_service_info(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_service_info(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_timestamp(Bin, TrUserData) ->
    dfp_read_field_def_timestamp(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_timestamp_seconds(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_nanos(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_timestamp_seconds(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_timestamp_nanos(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_timestamp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_timestamp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_timestamp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_seconds(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_nanos(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_timestamp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_metric(Bin, TrUserData) ->
    dfp_read_field_def_metric(Bin, 0, 0,
			      id('$undef', TrUserData), id([], TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_metric(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_metric_metric_descriptor(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_metric(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_metric_name(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			TrUserData);
dfp_read_field_def_metric(<<26, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_metric_timeseries(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_metric(<<34, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, TrUserData) ->
    d_field_metric_resource(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
dfp_read_field_def_metric(<<>>, 0, 0, F@_1, R1, F@_3,
			  TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{descriptor => F@_1}
	 end,
    S3 = if R1 == '$undef' -> S2;
	    true -> S2#{timeseries => lists_reverse(R1, TrUserData)}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{resource => F@_3}
    end;
dfp_read_field_def_metric(Other, Z1, Z2, F@_1, F@_2,
			  F@_3, TrUserData) ->
    dg_read_field_def_metric(Other, Z1, Z2, F@_1, F@_2,
			     F@_3, TrUserData).

dg_read_field_def_metric(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_metric(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_metric(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_metric_metric_descriptor(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      18 ->
	  d_field_metric_name(Rest, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData);
      26 ->
	  d_field_metric_timeseries(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      34 ->
	  d_field_metric_resource(Rest, 0, 0, F@_1, F@_2, F@_3,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_metric(Rest, 0, 0, F@_1, F@_2, F@_3,
				   TrUserData);
	    1 ->
		skip_64_metric(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
	    2 ->
		skip_length_delimited_metric(Rest, 0, 0, F@_1, F@_2,
					     F@_3, TrUserData);
	    3 ->
		skip_group_metric(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				  TrUserData);
	    5 ->
		skip_32_metric(Rest, 0, 0, F@_1, F@_2, F@_3, TrUserData)
	  end
    end;
dg_read_field_def_metric(<<>>, 0, 0, F@_1, R1, F@_3,
			 TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{descriptor => F@_1}
	 end,
    S3 = if R1 == '$undef' -> S2;
	    true -> S2#{timeseries => lists_reverse(R1, TrUserData)}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{resource => F@_3}
    end.

d_field_metric_metric_descriptor(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_metric_metric_descriptor(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_metric_metric_descriptor(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_metric_descriptor(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_metric(RestF, 0, 0,
			      case Prev of
				'$undef' ->
				    id({metric_descriptor, NewFValue},
				       TrUserData);
				{metric_descriptor, MVPrev} ->
				    id({metric_descriptor,
					merge_msg_metric_descriptor(MVPrev,
								    NewFValue,
								    TrUserData)},
				       TrUserData);
				_ ->
				    id({metric_descriptor, NewFValue},
				       TrUserData)
			      end,
			      F@_2, F@_3, TrUserData).

d_field_metric_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_metric_name(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, TrUserData);
d_field_metric_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_metric(RestF, 0, 0,
			      id({name, NewFValue}, TrUserData), F@_2, F@_3,
			      TrUserData).

d_field_metric_timeseries(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_metric_timeseries(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_metric_timeseries(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_time_series(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_metric(RestF, 0, 0, F@_1,
			      cons(NewFValue, Prev, TrUserData), F@_3,
			      TrUserData).

d_field_metric_resource(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_metric_resource(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, TrUserData);
d_field_metric_resource(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_resource(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_metric(RestF, 0, 0, F@_1, F@_2,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_resource(Prev, NewFValue,
							TrUserData)
			      end,
			      TrUserData).

skip_varint_metric(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_metric(Rest, Z1, Z2, F@_1, F@_2, F@_3,
		       TrUserData);
skip_varint_metric(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_metric(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_length_delimited_metric(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_metric(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_metric(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_metric(Rest2, 0, 0, F@_1, F@_2, F@_3,
			      TrUserData).

skip_group_metric(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_metric(Rest, 0, Z2, F@_1, F@_2, F@_3,
			      TrUserData).

skip_32_metric(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_metric(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

skip_64_metric(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_metric(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData).

decode_msg_metric_descriptor(Bin, TrUserData) ->
    dfp_read_field_def_metric_descriptor(Bin, 0, 0,
					 id(<<>>, TrUserData),
					 id(<<>>, TrUserData),
					 id(<<>>, TrUserData),
					 id('UNSPECIFIED', TrUserData),
					 id([], TrUserData), TrUserData).

dfp_read_field_def_metric_descriptor(<<10,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    d_field_metric_descriptor_name(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_metric_descriptor(<<18,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    d_field_metric_descriptor_description(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData);
dfp_read_field_def_metric_descriptor(<<26,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    d_field_metric_descriptor_unit(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_metric_descriptor(<<32,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    d_field_metric_descriptor_type(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_metric_descriptor(<<42,
				       Rest/binary>>,
				     Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    d_field_metric_descriptor_label_keys(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_metric_descriptor(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, R1, TrUserData) ->
    S1 = #{name => F@_1, description => F@_2, unit => F@_3,
	   type => F@_4},
    if R1 == '$undef' -> S1;
       true -> S1#{label_keys => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_metric_descriptor(Other, Z1, Z2,
				     F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    dg_read_field_def_metric_descriptor(Other, Z1, Z2, F@_1,
					F@_2, F@_3, F@_4, F@_5, TrUserData).

dg_read_field_def_metric_descriptor(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_metric_descriptor(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					F@_5, TrUserData);
dg_read_field_def_metric_descriptor(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_metric_descriptor_name(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      18 ->
	  d_field_metric_descriptor_description(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, F@_5,
						TrUserData);
      26 ->
	  d_field_metric_descriptor_unit(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      32 ->
	  d_field_metric_descriptor_type(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      42 ->
	  d_field_metric_descriptor_label_keys(Rest, 0, 0, F@_1,
					       F@_2, F@_3, F@_4, F@_5,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_metric_descriptor(Rest, 0, 0, F@_1, F@_2,
					      F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_metric_descriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_metric_descriptor(Rest, 0, 0,
							F@_1, F@_2, F@_3, F@_4,
							F@_5, TrUserData);
	    3 ->
		skip_group_metric_descriptor(Rest, Key bsr 3, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
	    5 ->
		skip_32_metric_descriptor(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_metric_descriptor(<<>>, 0, 0, F@_1,
				    F@_2, F@_3, F@_4, R1, TrUserData) ->
    S1 = #{name => F@_1, description => F@_2, unit => F@_3,
	   type => F@_4},
    if R1 == '$undef' -> S1;
       true -> S1#{label_keys => lists_reverse(R1, TrUserData)}
    end.

d_field_metric_descriptor_name(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_metric_descriptor_name(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_metric_descriptor_name(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, _, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_metric_descriptor(RestF, 0, 0,
					 NewFValue, F@_2, F@_3, F@_4, F@_5,
					 TrUserData).

d_field_metric_descriptor_description(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData)
    when N < 57 ->
    d_field_metric_descriptor_description(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  F@_5, TrUserData);
d_field_metric_descriptor_description(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, _, F@_3, F@_4, F@_5,
				      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_metric_descriptor(RestF, 0, 0, F@_1,
					 NewFValue, F@_3, F@_4, F@_5,
					 TrUserData).

d_field_metric_descriptor_unit(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_metric_descriptor_unit(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_metric_descriptor_unit(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, _, F@_4, F@_5, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_metric_descriptor(RestF, 0, 0, F@_1,
					 F@_2, NewFValue, F@_4, F@_5,
					 TrUserData).

d_field_metric_descriptor_type(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData)
    when N < 57 ->
    d_field_metric_descriptor_type(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData);
d_field_metric_descriptor_type(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, _, F@_5, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_metric_descriptor.Type'(begin
					      <<Res:32/signed-native>> = <<(X
									      bsl
									      N
									      +
									      Acc):32/unsigned-native>>,
					      id(Res, TrUserData)
					    end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_metric_descriptor(RestF, 0, 0, F@_1,
					 F@_2, F@_3, NewFValue, F@_5,
					 TrUserData).

d_field_metric_descriptor_label_keys(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 57 ->
    d_field_metric_descriptor_label_keys(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
d_field_metric_descriptor_label_keys(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
				     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_label_key(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_metric_descriptor(RestF, 0, 0, F@_1,
					 F@_2, F@_3, F@_4,
					 cons(NewFValue, Prev, TrUserData),
					 TrUserData).

skip_varint_metric_descriptor(<<1:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    skip_varint_metric_descriptor(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, TrUserData);
skip_varint_metric_descriptor(<<0:1, _:7, Rest/binary>>,
			      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			      TrUserData) ->
    dfp_read_field_def_metric_descriptor(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_length_delimited_metric_descriptor(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData)
    when N < 57 ->
    skip_length_delimited_metric_descriptor(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, F@_5, TrUserData);
skip_length_delimited_metric_descriptor(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_metric_descriptor(Rest2, 0, 0, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_metric_descriptor(Bin, FNum, Z2, F@_1, F@_2,
			     F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_metric_descriptor(Rest, 0, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_metric_descriptor(<<_:32, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_metric_descriptor(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_64_metric_descriptor(<<_:64, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_metric_descriptor(Rest, Z1, Z2, F@_1,
					 F@_2, F@_3, F@_4, F@_5, TrUserData).

decode_msg_label_key(Bin, TrUserData) ->
    dfp_read_field_def_label_key(Bin, 0, 0,
				 id(<<>>, TrUserData), id(<<>>, TrUserData),
				 TrUserData).

dfp_read_field_def_label_key(<<10, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_label_key_key(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_label_key(<<18, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_label_key_description(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_label_key(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{key => F@_1, description => F@_2};
dfp_read_field_def_label_key(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_label_key(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_label_key(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_label_key(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_label_key(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_label_key_key(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_label_key_description(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_label_key(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_label_key(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_label_key(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_label_key(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_label_key(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_label_key(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{key => F@_1, description => F@_2}.

d_field_label_key_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_label_key_key(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_label_key_key(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_label_key(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_label_key_description(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_label_key_description(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_label_key_description(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_label_key(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_label_key(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_label_key(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_label_key(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_label_key(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_label_key(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_label_key(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_label_key(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_label_key(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_label_key(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_label_key(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_label_key(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_label_key(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_label_key(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_label_key(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_time_series(Bin, TrUserData) ->
    dfp_read_field_def_time_series(Bin, 0, 0,
				   id('$undef', TrUserData), id([], TrUserData),
				   id([], TrUserData), TrUserData).

dfp_read_field_def_time_series(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_series_start_timestamp(Rest, Z1, Z2, F@_1,
					F@_2, F@_3, TrUserData);
dfp_read_field_def_time_series(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_series_label_values(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData);
dfp_read_field_def_time_series(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_series_points(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_time_series(<<>>, 0, 0, F@_1, R1, R2,
			       TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{start_timestamp => F@_1}
	 end,
    S3 = if R1 == '$undef' -> S2;
	    true ->
		S2#{label_values => lists_reverse(R1, TrUserData)}
	 end,
    if R2 == '$undef' -> S3;
       true -> S3#{points => lists_reverse(R2, TrUserData)}
    end;
dfp_read_field_def_time_series(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_time_series(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_time_series(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_time_series(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_time_series(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_time_series_start_timestamp(Rest, 0, 0, F@_1,
					      F@_2, F@_3, TrUserData);
      18 ->
	  d_field_time_series_label_values(Rest, 0, 0, F@_1, F@_2,
					   F@_3, TrUserData);
      26 ->
	  d_field_time_series_points(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_time_series(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_time_series(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_time_series(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_time_series(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_time_series(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_time_series(<<>>, 0, 0, F@_1, R1, R2,
			      TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{start_timestamp => F@_1}
	 end,
    S3 = if R1 == '$undef' -> S2;
	    true ->
		S2#{label_values => lists_reverse(R1, TrUserData)}
	 end,
    if R2 == '$undef' -> S3;
       true -> S3#{points => lists_reverse(R2, TrUserData)}
    end.

d_field_time_series_start_timestamp(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_time_series_start_timestamp(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
d_field_time_series_start_timestamp(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_series(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_timestamp(Prev, NewFValue,
							      TrUserData)
				   end,
				   F@_2, F@_3, TrUserData).

d_field_time_series_label_values(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_time_series_label_values(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3,
				     TrUserData);
d_field_time_series_label_values(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_label_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_series(RestF, 0, 0, F@_1,
				   cons(NewFValue, Prev, TrUserData), F@_3,
				   TrUserData).

d_field_time_series_points(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_time_series_points(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_time_series_points(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_point(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_series(RestF, 0, 0, F@_1, F@_2,
				   cons(NewFValue, Prev, TrUserData),
				   TrUserData).

skip_varint_time_series(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_time_series(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_time_series(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_series(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_time_series(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_time_series(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_time_series(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_time_series(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_time_series(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_time_series(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_time_series(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_series(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_time_series(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_series(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

decode_msg_label_value(Bin, TrUserData) ->
    dfp_read_field_def_label_value(Bin, 0, 0,
				   id(<<>>, TrUserData), id(false, TrUserData),
				   TrUserData).

dfp_read_field_def_label_value(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_label_value_value(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_label_value(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_label_value_has_value(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_label_value(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    #{value => F@_1, has_value => F@_2};
dfp_read_field_def_label_value(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_label_value(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_label_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_label_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_label_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_label_value_value(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_label_value_has_value(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_label_value(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_label_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_label_value(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_label_value(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_label_value(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_label_value(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    #{value => F@_1, has_value => F@_2}.

d_field_label_value_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_label_value_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_label_value_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_label_value(RestF, 0, 0, NewFValue,
				   F@_2, TrUserData).

d_field_label_value_has_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_label_value_has_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_label_value_has_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_label_value(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_label_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_label_value(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_label_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_label_value(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_label_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_label_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_label_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_label_value(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_label_value(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_label_value(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_label_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_label_value(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_label_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_label_value(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_point(Bin, TrUserData) ->
    dfp_read_field_def_point(Bin, 0, 0,
			     id('$undef', TrUserData), id('$undef', TrUserData),
			     TrUserData).

dfp_read_field_def_point(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_point_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_point(<<16, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_point_int64_value(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_point(<<25, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_point_double_value(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_point(<<34, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_point_distribution_value(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_point(<<42, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_point_summary_value(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData);
dfp_read_field_def_point(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{timestamp => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end;
dfp_read_field_def_point(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_point(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_point(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_point(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_point(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_point_timestamp(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      16 ->
	  d_field_point_int64_value(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      25 ->
	  d_field_point_double_value(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      34 ->
	  d_field_point_distribution_value(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      42 ->
	  d_field_point_summary_value(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_point(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_point(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_point(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_point(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_point(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_point(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{timestamp => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end.

d_field_point_timestamp(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_point_timestamp(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_point_timestamp(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_point(RestF, 0, 0,
			     if Prev == '$undef' -> NewFValue;
				true ->
				    merge_msg_timestamp(Prev, NewFValue,
							TrUserData)
			     end,
			     F@_2, TrUserData).

d_field_point_int64_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_point_int64_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_point_int64_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_point(RestF, 0, 0, F@_1,
			     id({int64_value, NewFValue}, TrUserData),
			     TrUserData).

d_field_point_double_value(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1,
			     id({double_value, id(infinity, TrUserData)},
				TrUserData),
			     TrUserData);
d_field_point_double_value(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1,
			     id({double_value, id('-infinity', TrUserData)},
				TrUserData),
			     TrUserData);
d_field_point_double_value(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1,
			     id({double_value, id(nan, TrUserData)},
				TrUserData),
			     TrUserData);
d_field_point_double_value(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1,
			     id({double_value, id(Value, TrUserData)},
				TrUserData),
			     TrUserData).

d_field_point_distribution_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_point_distribution_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_point_distribution_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_distribution_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_point(RestF, 0, 0, F@_1,
			     case Prev of
			       '$undef' ->
				   id({distribution_value, NewFValue},
				      TrUserData);
			       {distribution_value, MVPrev} ->
				   id({distribution_value,
				       merge_msg_distribution_value(MVPrev,
								    NewFValue,
								    TrUserData)},
				      TrUserData);
			       _ ->
				   id({distribution_value, NewFValue},
				      TrUserData)
			     end,
			     TrUserData).

d_field_point_summary_value(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_point_summary_value(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
d_field_point_summary_value(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_summary_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_point(RestF, 0, 0, F@_1,
			     case Prev of
			       '$undef' ->
				   id({summary_value, NewFValue}, TrUserData);
			       {summary_value, MVPrev} ->
				   id({summary_value,
				       merge_msg_summary_value(MVPrev,
							       NewFValue,
							       TrUserData)},
				      TrUserData);
			       _ -> id({summary_value, NewFValue}, TrUserData)
			     end,
			     TrUserData).

skip_varint_point(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_point(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_point(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_point(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_point(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_point(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_point(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_point(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_point(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_point(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_point(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_point(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

decode_msg_bucket_options(Bin, TrUserData) ->
    dfp_read_field_def_bucket_options(Bin, 0, 0,
				      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_bucket_options(<<10, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_bucket_options_explicit(Rest, Z1, Z2, F@_1,
				    TrUserData);
dfp_read_field_def_bucket_options(<<>>, 0, 0, F@_1,
				  _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{type => F@_1}
    end;
dfp_read_field_def_bucket_options(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_bucket_options(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_bucket_options(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bucket_options(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_bucket_options(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_bucket_options_explicit(Rest, 0, 0, F@_1,
					  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bucket_options(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_bucket_options(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bucket_options(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_bucket_options(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_bucket_options(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bucket_options(<<>>, 0, 0, F@_1, _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{type => F@_1}
    end.

d_field_bucket_options_explicit(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bucket_options_explicit(Rest, N + 7,
				    X bsl N + Acc, F@_1, TrUserData);
d_field_bucket_options_explicit(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_explicit(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_bucket_options(RestF, 0, 0,
				      case Prev of
					'$undef' ->
					    id({explicit, NewFValue},
					       TrUserData);
					{explicit, MVPrev} ->
					    id({explicit,
						merge_msg_explicit(MVPrev,
								   NewFValue,
								   TrUserData)},
					       TrUserData);
					_ ->
					    id({explicit, NewFValue},
					       TrUserData)
				      end,
				      TrUserData).

skip_varint_bucket_options(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_bucket_options(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_bucket_options(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bucket_options(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_bucket_options(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bucket_options(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bucket_options(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bucket_options(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_bucket_options(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bucket_options(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_bucket_options(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_bucket_options(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_bucket_options(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_bucket_options(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_explicit(Bin, TrUserData) ->
    dfp_read_field_def_explicit(Bin, 0, 0,
				id([], TrUserData), TrUserData).

dfp_read_field_def_explicit(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_pfield_explicit_bounds(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_explicit(<<9, Rest/binary>>, Z1, Z2,
			    F@_1, TrUserData) ->
    d_field_explicit_bounds(Rest, Z1, Z2, F@_1, TrUserData);
dfp_read_field_def_explicit(<<>>, 0, 0, R1,
			    TrUserData) ->
    #{bounds => lists_reverse(R1, TrUserData)};
dfp_read_field_def_explicit(Other, Z1, Z2, F@_1,
			    TrUserData) ->
    dg_read_field_def_explicit(Other, Z1, Z2, F@_1,
			       TrUserData).

dg_read_field_def_explicit(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_explicit(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
dg_read_field_def_explicit(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_pfield_explicit_bounds(Rest, 0, 0, F@_1, TrUserData);
      9 ->
	  d_field_explicit_bounds(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 -> skip_varint_explicit(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_explicit(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_explicit(Rest, 0, 0, F@_1,
					       TrUserData);
	    3 ->
		skip_group_explicit(Rest, Key bsr 3, 0, F@_1,
				    TrUserData);
	    5 -> skip_32_explicit(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_explicit(<<>>, 0, 0, R1,
			   TrUserData) ->
    #{bounds => lists_reverse(R1, TrUserData)}.

d_field_explicit_bounds(<<0:48, 240, 127, Rest/binary>>,
			Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2,
				cons(id(infinity, TrUserData), Prev,
				     TrUserData),
				TrUserData);
d_field_explicit_bounds(<<0:48, 240, 255, Rest/binary>>,
			Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2,
				cons(id('-infinity', TrUserData), Prev,
				     TrUserData),
				TrUserData);
d_field_explicit_bounds(<<_:48, 15:4, _:4, _:1, 127:7,
			  Rest/binary>>,
			Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2,
				cons(id(nan, TrUserData), Prev, TrUserData),
				TrUserData);
d_field_explicit_bounds(<<Value:64/little-float,
			  Rest/binary>>,
			Z1, Z2, Prev, TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2,
				cons(id(Value, TrUserData), Prev, TrUserData),
				TrUserData).

d_pfield_explicit_bounds(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_pfield_explicit_bounds(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_pfield_explicit_bounds(<<0:1, X:7, Rest/binary>>, N,
			 Acc, E, TrUserData) ->
    Len = X bsl N + Acc,
    <<PackedBytes:Len/binary, Rest2/binary>> = Rest,
    NewSeq = d_packed_field_explicit_bounds(PackedBytes, 0,
					    0, E, TrUserData),
    dfp_read_field_def_explicit(Rest2, 0, 0, NewSeq,
				TrUserData).

d_packed_field_explicit_bounds(<<0:48, 240, 127,
				 Rest/binary>>,
			       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_explicit_bounds(Rest, Z1, Z2,
				   cons(id(infinity, TrUserData), AccSeq,
					TrUserData),
				   TrUserData);
d_packed_field_explicit_bounds(<<0:48, 240, 255,
				 Rest/binary>>,
			       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_explicit_bounds(Rest, Z1, Z2,
				   cons(id('-infinity', TrUserData), AccSeq,
					TrUserData),
				   TrUserData);
d_packed_field_explicit_bounds(<<_:48, 15:4, _:4, _:1,
				 127:7, Rest/binary>>,
			       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_explicit_bounds(Rest, Z1, Z2,
				   cons(id(nan, TrUserData), AccSeq,
					TrUserData),
				   TrUserData);
d_packed_field_explicit_bounds(<<Value:64/little-float,
				 Rest/binary>>,
			       Z1, Z2, AccSeq, TrUserData) ->
    d_packed_field_explicit_bounds(Rest, Z1, Z2,
				   cons(id(Value, TrUserData), AccSeq,
					TrUserData),
				   TrUserData);
d_packed_field_explicit_bounds(<<>>, _, _, AccSeq, _) ->
    AccSeq.

skip_varint_explicit(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    skip_varint_explicit(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_explicit(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_length_delimited_explicit(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_explicit(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_explicit(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_explicit(Rest2, 0, 0, F@_1,
				TrUserData).

skip_group_explicit(Bin, FNum, Z2, F@_1, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_explicit(Rest, 0, Z2, F@_1,
				TrUserData).

skip_32_explicit(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2, F@_1,
				TrUserData).

skip_64_explicit(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 TrUserData) ->
    dfp_read_field_def_explicit(Rest, Z1, Z2, F@_1,
				TrUserData).

decode_msg_bucket(Bin, TrUserData) ->
    dfp_read_field_def_bucket(Bin, 0, 0, id(0, TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_bucket(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_bucket_count(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
dfp_read_field_def_bucket(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_bucket_exemplar(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_bucket(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{count => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{exemplar => F@_2}
    end;
dfp_read_field_def_bucket(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_bucket(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_bucket(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bucket(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_bucket(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_bucket_count(Rest, 0, 0, F@_1, F@_2,
			       TrUserData);
      18 ->
	  d_field_bucket_exemplar(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bucket(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_bucket(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_bucket(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_bucket(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_bucket(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_bucket(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{count => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{exemplar => F@_2}
    end.

d_field_bucket_count(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_bucket_count(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, TrUserData);
d_field_bucket_count(<<0:1, X:7, Rest/binary>>, N, Acc,
		     _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_bucket(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_bucket_exemplar(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_bucket_exemplar(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_bucket_exemplar(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_exemplar(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_bucket(RestF, 0, 0, F@_1,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_exemplar(Prev, NewFValue,
							TrUserData)
			      end,
			      TrUserData).

skip_varint_bucket(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_bucket(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_bucket(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_bucket(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_bucket(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_bucket(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_bucket(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bucket(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_bucket(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bucket(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_bucket(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_bucket(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_bucket(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_bucket(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_exemplar(Bin, TrUserData) ->
    dfp_read_field_def_exemplar(Bin, 0, 0,
				id(0.0, TrUserData), id('$undef', TrUserData),
				'tr_decode_init_default_exemplar.attachments'([],
									      TrUserData),
				TrUserData).

dfp_read_field_def_exemplar(<<9, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_exemplar_value(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_exemplar(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_exemplar_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData);
dfp_read_field_def_exemplar(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_exemplar_attachments(Rest, Z1, Z2, F@_1, F@_2,
				 F@_3, TrUserData);
dfp_read_field_def_exemplar(<<>>, 0, 0, F@_1, F@_2, R1,
			    TrUserData) ->
    S1 = #{value => F@_1,
	   attachments =>
	       'tr_decode_repeated_finalize_exemplar.attachments'(R1,
								  TrUserData)},
    if F@_2 == '$undef' -> S1;
       true -> S1#{timestamp => F@_2}
    end;
dfp_read_field_def_exemplar(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_exemplar(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_exemplar(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_exemplar(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_exemplar(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_exemplar_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      18 ->
	  d_field_exemplar_timestamp(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
      26 ->
	  d_field_exemplar_attachments(Rest, 0, 0, F@_1, F@_2,
				       F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_exemplar(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_exemplar(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_exemplar(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_exemplar(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_exemplar(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_exemplar(<<>>, 0, 0, F@_1, F@_2, R1,
			   TrUserData) ->
    S1 = #{value => F@_1,
	   attachments =>
	       'tr_decode_repeated_finalize_exemplar.attachments'(R1,
								  TrUserData)},
    if F@_2 == '$undef' -> S1;
       true -> S1#{timestamp => F@_2}
    end.

d_field_exemplar_value(<<0:48, 240, 127, Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2,
				id(infinity, TrUserData), F@_2, F@_3,
				TrUserData);
d_field_exemplar_value(<<0:48, 240, 255, Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2,
				id('-infinity', TrUserData), F@_2, F@_3,
				TrUserData);
d_field_exemplar_value(<<_:48, 15:4, _:4, _:1, 127:7,
			 Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2,
				id(nan, TrUserData), F@_2, F@_3, TrUserData);
d_field_exemplar_value(<<Value:64/little-float,
			 Rest/binary>>,
		       Z1, Z2, _, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2,
				id(Value, TrUserData), F@_2, F@_3, TrUserData).

d_field_exemplar_timestamp(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_exemplar_timestamp(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
d_field_exemplar_timestamp(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_exemplar(RestF, 0, 0, F@_1,
				if Prev == '$undef' -> NewFValue;
				   true ->
				       merge_msg_timestamp(Prev, NewFValue,
							   TrUserData)
				end,
				F@_3, TrUserData).

d_field_exemplar_attachments(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_exemplar_attachments(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, F@_3, TrUserData);
d_field_exemplar_attachments(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_exemplar(RestF, 0, 0, F@_1, F@_2,
				'tr_decode_repeated_add_elem_exemplar.attachments'(NewFValue,
										   Prev,
										   TrUserData),
				TrUserData).

skip_varint_exemplar(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_exemplar(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_exemplar(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_exemplar(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_exemplar(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_exemplar(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_exemplar(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_exemplar(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_exemplar(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_exemplar(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_exemplar(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_exemplar(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_distribution_value(Bin, TrUserData) ->
    dfp_read_field_def_distribution_value(Bin, 0, 0,
					  id(0, TrUserData),
					  id(0.0, TrUserData),
					  id(0.0, TrUserData),
					  id('$undef', TrUserData),
					  id([], TrUserData), TrUserData).

dfp_read_field_def_distribution_value(<<8,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_distribution_value_count(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_distribution_value(<<17,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_distribution_value_sum(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_distribution_value(<<25,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_distribution_value_sum_of_squared_deviation(Rest,
							Z1, Z2, F@_1, F@_2,
							F@_3, F@_4, F@_5,
							TrUserData);
dfp_read_field_def_distribution_value(<<34,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_distribution_value_bucket_options(Rest, Z1, Z2,
					      F@_1, F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
dfp_read_field_def_distribution_value(<<42,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    d_field_distribution_value_buckets(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, TrUserData);
dfp_read_field_def_distribution_value(<<>>, 0, 0, F@_1,
				      F@_2, F@_3, F@_4, R1, TrUserData) ->
    S1 = #{count => F@_1, sum => F@_2,
	   sum_of_squared_deviation => F@_3},
    S2 = if F@_4 == '$undef' -> S1;
	    true -> S1#{bucket_options => F@_4}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{buckets => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_distribution_value(Other, Z1, Z2,
				      F@_1, F@_2, F@_3, F@_4, F@_5,
				      TrUserData) ->
    dg_read_field_def_distribution_value(Other, Z1, Z2,
					 F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData).

dg_read_field_def_distribution_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_distribution_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					 F@_5, TrUserData);
dg_read_field_def_distribution_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				     TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_distribution_value_count(Rest, 0, 0, F@_1, F@_2,
					   F@_3, F@_4, F@_5, TrUserData);
      17 ->
	  d_field_distribution_value_sum(Rest, 0, 0, F@_1, F@_2,
					 F@_3, F@_4, F@_5, TrUserData);
      25 ->
	  d_field_distribution_value_sum_of_squared_deviation(Rest,
							      0, 0, F@_1, F@_2,
							      F@_3, F@_4, F@_5,
							      TrUserData);
      34 ->
	  d_field_distribution_value_bucket_options(Rest, 0, 0,
						    F@_1, F@_2, F@_3, F@_4,
						    F@_5, TrUserData);
      42 ->
	  d_field_distribution_value_buckets(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_distribution_value(Rest, 0, 0, F@_1, F@_2,
					       F@_3, F@_4, F@_5, TrUserData);
	    1 ->
		skip_64_distribution_value(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData);
	    2 ->
		skip_length_delimited_distribution_value(Rest, 0, 0,
							 F@_1, F@_2, F@_3, F@_4,
							 F@_5, TrUserData);
	    3 ->
		skip_group_distribution_value(Rest, Key bsr 3, 0, F@_1,
					      F@_2, F@_3, F@_4, F@_5,
					      TrUserData);
	    5 ->
		skip_32_distribution_value(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, TrUserData)
	  end
    end;
dg_read_field_def_distribution_value(<<>>, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, R1, TrUserData) ->
    S1 = #{count => F@_1, sum => F@_2,
	   sum_of_squared_deviation => F@_3},
    S2 = if F@_4 == '$undef' -> S1;
	    true -> S1#{bucket_options => F@_4}
	 end,
    if R1 == '$undef' -> S2;
       true -> S2#{buckets => lists_reverse(R1, TrUserData)}
    end.

d_field_distribution_value_count(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				 TrUserData)
    when N < 57 ->
    d_field_distribution_value_count(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				     F@_5, TrUserData);
d_field_distribution_value_count(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, F@_3, F@_4, F@_5,
				 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_distribution_value(RestF, 0, 0,
					  NewFValue, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

d_field_distribution_value_sum(<<0:48, 240, 127,
				 Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, id(infinity, TrUserData), F@_3,
					  F@_4, F@_5, TrUserData);
d_field_distribution_value_sum(<<0:48, 240, 255,
				 Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, id('-infinity', TrUserData),
					  F@_3, F@_4, F@_5, TrUserData);
d_field_distribution_value_sum(<<_:48, 15:4, _:4, _:1,
				 127:7, Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, id(nan, TrUserData), F@_3, F@_4,
					  F@_5, TrUserData);
d_field_distribution_value_sum(<<Value:64/little-float,
				 Rest/binary>>,
			       Z1, Z2, F@_1, _, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, id(Value, TrUserData), F@_3,
					  F@_4, F@_5, TrUserData).

d_field_distribution_value_sum_of_squared_deviation(<<0:48,
						      240, 127, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, _, F@_4,
						    F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2, id(infinity, TrUserData),
					  F@_4, F@_5, TrUserData);
d_field_distribution_value_sum_of_squared_deviation(<<0:48,
						      240, 255, Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, _, F@_4,
						    F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2,
					  id('-infinity', TrUserData), F@_4,
					  F@_5, TrUserData);
d_field_distribution_value_sum_of_squared_deviation(<<_:48,
						      15:4, _:4, _:1, 127:7,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, _, F@_4,
						    F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2, id(nan, TrUserData), F@_4,
					  F@_5, TrUserData);
d_field_distribution_value_sum_of_squared_deviation(<<Value:64/little-float,
						      Rest/binary>>,
						    Z1, Z2, F@_1, F@_2, _, F@_4,
						    F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2, id(Value, TrUserData),
					  F@_4, F@_5, TrUserData).

d_field_distribution_value_bucket_options(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData)
    when N < 57 ->
    d_field_distribution_value_bucket_options(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2, F@_3,
					      F@_4, F@_5, TrUserData);
d_field_distribution_value_bucket_options(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, F@_3, Prev, F@_5,
					  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_bucket_options(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_distribution_value(RestF, 0, 0, F@_1,
					  F@_2, F@_3,
					  if Prev == '$undef' -> NewFValue;
					     true ->
						 merge_msg_bucket_options(Prev,
									  NewFValue,
									  TrUserData)
					  end,
					  F@_5, TrUserData).

d_field_distribution_value_buckets(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				   TrUserData)
    when N < 57 ->
    d_field_distribution_value_buckets(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, TrUserData);
d_field_distribution_value_buckets(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, Prev,
				   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_bucket(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_distribution_value(RestF, 0, 0, F@_1,
					  F@_2, F@_3, F@_4,
					  cons(NewFValue, Prev, TrUserData),
					  TrUserData).

skip_varint_distribution_value(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    skip_varint_distribution_value(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, TrUserData);
skip_varint_distribution_value(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, F@_3, F@_4, F@_5,
			       TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_length_delimited_distribution_value(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData)
    when N < 57 ->
    skip_length_delimited_distribution_value(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, TrUserData);
skip_length_delimited_distribution_value(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_distribution_value(Rest2, 0, 0, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_group_distribution_value(Bin, FNum, Z2, F@_1, F@_2,
			      F@_3, F@_4, F@_5, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_distribution_value(Rest, 0, Z2, F@_1,
					  F@_2, F@_3, F@_4, F@_5, TrUserData).

skip_32_distribution_value(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

skip_64_distribution_value(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, F@_3, F@_4, F@_5, TrUserData) ->
    dfp_read_field_def_distribution_value(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, F@_5,
					  TrUserData).

decode_msg_snapshot(Bin, TrUserData) ->
    dfp_read_field_def_snapshot(Bin, 0, 0,
				id('$undef', TrUserData),
				id('$undef', TrUserData), id([], TrUserData),
				TrUserData).

dfp_read_field_def_snapshot(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_snapshot_count(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			   TrUserData);
dfp_read_field_def_snapshot(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_snapshot_sum(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
dfp_read_field_def_snapshot(<<26, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, F@_3, TrUserData) ->
    d_field_snapshot_percentile_values(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, TrUserData);
dfp_read_field_def_snapshot(<<>>, 0, 0, F@_1, F@_2, R1,
			    TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{count => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{sum => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true ->
	   S3#{percentile_values => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_snapshot(Other, Z1, Z2, F@_1, F@_2,
			    F@_3, TrUserData) ->
    dg_read_field_def_snapshot(Other, Z1, Z2, F@_1, F@_2,
			       F@_3, TrUserData).

dg_read_field_def_snapshot(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_snapshot(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_snapshot(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_snapshot_count(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
      18 ->
	  d_field_snapshot_sum(Rest, 0, 0, F@_1, F@_2, F@_3,
			       TrUserData);
      26 ->
	  d_field_snapshot_percentile_values(Rest, 0, 0, F@_1,
					     F@_2, F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_snapshot(Rest, 0, 0, F@_1, F@_2, F@_3,
				     TrUserData);
	    1 ->
		skip_64_snapshot(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData);
	    2 ->
		skip_length_delimited_snapshot(Rest, 0, 0, F@_1, F@_2,
					       F@_3, TrUserData);
	    3 ->
		skip_group_snapshot(Rest, Key bsr 3, 0, F@_1, F@_2,
				    F@_3, TrUserData);
	    5 ->
		skip_32_snapshot(Rest, 0, 0, F@_1, F@_2, F@_3,
				 TrUserData)
	  end
    end;
dg_read_field_def_snapshot(<<>>, 0, 0, F@_1, F@_2, R1,
			   TrUserData) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{count => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{sum => F@_2}
	 end,
    if R1 == '$undef' -> S3;
       true ->
	   S3#{percentile_values => lists_reverse(R1, TrUserData)}
    end.

d_field_snapshot_count(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_snapshot_count(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, TrUserData);
d_field_snapshot_count(<<0:1, X:7, Rest/binary>>, N,
		       Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_int_64_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_snapshot(RestF, 0, 0,
				if Prev == '$undef' -> NewFValue;
				   true ->
				       merge_msg_int_64_value(Prev, NewFValue,
							      TrUserData)
				end,
				F@_2, F@_3, TrUserData).

d_field_snapshot_sum(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_snapshot_sum(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, TrUserData);
d_field_snapshot_sum(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_double_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_snapshot(RestF, 0, 0, F@_1,
				if Prev == '$undef' -> NewFValue;
				   true ->
				       merge_msg_double_value(Prev, NewFValue,
							      TrUserData)
				end,
				F@_3, TrUserData).

d_field_snapshot_percentile_values(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_snapshot_percentile_values(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3,
				       TrUserData);
d_field_snapshot_percentile_values(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_value_at_percentile(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_snapshot(RestF, 0, 0, F@_1, F@_2,
				cons(NewFValue, Prev, TrUserData), TrUserData).

skip_varint_snapshot(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_snapshot(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 TrUserData);
skip_varint_snapshot(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_snapshot(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_length_delimited_snapshot(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_snapshot(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
skip_length_delimited_snapshot(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_snapshot(Rest2, 0, 0, F@_1, F@_2,
				F@_3, TrUserData).

skip_group_snapshot(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_snapshot(Rest, 0, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_32_snapshot(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_snapshot(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

skip_64_snapshot(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_snapshot(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData).

decode_msg_value_at_percentile(Bin, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Bin, 0, 0,
					   id(0.0, TrUserData),
					   id(0.0, TrUserData), TrUserData).

dfp_read_field_def_value_at_percentile(<<9,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_value_at_percentile_percentile(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData);
dfp_read_field_def_value_at_percentile(<<17,
					 Rest/binary>>,
				       Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_value_at_percentile_value(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_value_at_percentile(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{percentile => F@_1, value => F@_2};
dfp_read_field_def_value_at_percentile(Other, Z1, Z2,
				       F@_1, F@_2, TrUserData) ->
    dg_read_field_def_value_at_percentile(Other, Z1, Z2,
					  F@_1, F@_2, TrUserData).

dg_read_field_def_value_at_percentile(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_value_at_percentile(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2,
					  TrUserData);
dg_read_field_def_value_at_percentile(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_value_at_percentile_percentile(Rest, 0, 0, F@_1,
						 F@_2, TrUserData);
      17 ->
	  d_field_value_at_percentile_value(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_value_at_percentile(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    1 ->
		skip_64_value_at_percentile(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    2 ->
		skip_length_delimited_value_at_percentile(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    3 ->
		skip_group_value_at_percentile(Rest, Key bsr 3, 0, F@_1,
					       F@_2, TrUserData);
	    5 ->
		skip_32_value_at_percentile(Rest, 0, 0, F@_1, F@_2,
					    TrUserData)
	  end
    end;
dg_read_field_def_value_at_percentile(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{percentile => F@_1, value => F@_2}.

d_field_value_at_percentile_percentile(<<0:48, 240, 127,
					 Rest/binary>>,
				       Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   id(infinity, TrUserData), F@_2,
					   TrUserData);
d_field_value_at_percentile_percentile(<<0:48, 240, 255,
					 Rest/binary>>,
				       Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   id('-infinity', TrUserData), F@_2,
					   TrUserData);
d_field_value_at_percentile_percentile(<<_:48, 15:4,
					 _:4, _:1, 127:7, Rest/binary>>,
				       Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   id(nan, TrUserData), F@_2,
					   TrUserData);
d_field_value_at_percentile_percentile(<<Value:64/little-float,
					 Rest/binary>>,
				       Z1, Z2, _, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   id(Value, TrUserData), F@_2,
					   TrUserData).

d_field_value_at_percentile_value(<<0:48, 240, 127,
				    Rest/binary>>,
				  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, id(infinity, TrUserData),
					   TrUserData);
d_field_value_at_percentile_value(<<0:48, 240, 255,
				    Rest/binary>>,
				  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, id('-infinity', TrUserData),
					   TrUserData);
d_field_value_at_percentile_value(<<_:48, 15:4, _:4,
				    _:1, 127:7, Rest/binary>>,
				  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, id(nan, TrUserData),
					   TrUserData);
d_field_value_at_percentile_value(<<Value:64/little-float,
				    Rest/binary>>,
				  Z1, Z2, F@_1, _, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, id(Value, TrUserData),
					   TrUserData).

skip_varint_value_at_percentile(<<1:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_value_at_percentile(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData);
skip_varint_value_at_percentile(<<0:1, _:7,
				  Rest/binary>>,
				Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_length_delimited_value_at_percentile(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_value_at_percentile(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
skip_length_delimited_value_at_percentile(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_value_at_percentile(Rest2, 0, 0,
					   F@_1, F@_2, TrUserData).

skip_group_value_at_percentile(Bin, FNum, Z2, F@_1,
			       F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_value_at_percentile(Rest, 0, Z2,
					   F@_1, F@_2, TrUserData).

skip_32_value_at_percentile(<<_:32, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

skip_64_value_at_percentile(<<_:64, Rest/binary>>, Z1,
			    Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_value_at_percentile(Rest, Z1, Z2,
					   F@_1, F@_2, TrUserData).

decode_msg_summary_value(Bin, TrUserData) ->
    dfp_read_field_def_summary_value(Bin, 0, 0,
				     id('$undef', TrUserData),
				     id('$undef', TrUserData),
				     id('$undef', TrUserData), TrUserData).

dfp_read_field_def_summary_value(<<10, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_summary_value_count(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, TrUserData);
dfp_read_field_def_summary_value(<<18, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_summary_value_sum(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
dfp_read_field_def_summary_value(<<26, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_summary_value_snapshot(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_summary_value(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{count => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{sum => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{snapshot => F@_3}
    end;
dfp_read_field_def_summary_value(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, TrUserData) ->
    dg_read_field_def_summary_value(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, TrUserData).

dg_read_field_def_summary_value(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_summary_value(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3,
				    TrUserData);
dg_read_field_def_summary_value(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_summary_value_count(Rest, 0, 0, F@_1, F@_2,
				      F@_3, TrUserData);
      18 ->
	  d_field_summary_value_sum(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
      26 ->
	  d_field_summary_value_snapshot(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_summary_value(Rest, 0, 0, F@_1, F@_2, F@_3,
					  TrUserData);
	    1 ->
		skip_64_summary_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData);
	    2 ->
		skip_length_delimited_summary_value(Rest, 0, 0, F@_1,
						    F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_summary_value(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, TrUserData);
	    5 ->
		skip_32_summary_value(Rest, 0, 0, F@_1, F@_2, F@_3,
				      TrUserData)
	  end
    end;
dg_read_field_def_summary_value(<<>>, 0, 0, F@_1, F@_2,
				F@_3, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{count => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{sum => F@_2}
	 end,
    if F@_3 == '$undef' -> S3;
       true -> S3#{snapshot => F@_3}
    end.

d_field_summary_value_count(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_summary_value_count(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, TrUserData);
d_field_summary_value_count(<<0:1, X:7, Rest/binary>>,
			    N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_int_64_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_summary_value(RestF, 0, 0,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_int_64_value(Prev,
								   NewFValue,
								   TrUserData)
				     end,
				     F@_2, F@_3, TrUserData).

d_field_summary_value_sum(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_summary_value_sum(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, F@_3, TrUserData);
d_field_summary_value_sum(<<0:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, Prev, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_double_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_summary_value(RestF, 0, 0, F@_1,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_double_value(Prev,
								   NewFValue,
								   TrUserData)
				     end,
				     F@_3, TrUserData).

d_field_summary_value_snapshot(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_summary_value_snapshot(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_summary_value_snapshot(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_snapshot(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_summary_value(RestF, 0, 0, F@_1,
				     F@_2,
				     if Prev == '$undef' -> NewFValue;
					true ->
					    merge_msg_snapshot(Prev, NewFValue,
							       TrUserData)
				     end,
				     TrUserData).

skip_varint_summary_value(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_summary_value(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, TrUserData);
skip_varint_summary_value(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_summary_value(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_length_delimited_summary_value(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_summary_value(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3,
					TrUserData);
skip_length_delimited_summary_value(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_summary_value(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, TrUserData).

skip_group_summary_value(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_summary_value(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_32_summary_value(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_summary_value(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

skip_64_summary_value(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_summary_value(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, TrUserData).

decode_msg_double_value(Bin, TrUserData) ->
    dfp_read_field_def_double_value(Bin, 0, 0,
				    id(0.0, TrUserData), TrUserData).

dfp_read_field_def_double_value(<<9, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_double_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_double_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_double_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_double_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_double_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_double_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_double_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_double_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_double_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_double_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_double_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_double_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_double_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_double_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_double_value_value(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(infinity, TrUserData), TrUserData);
d_field_double_value_value(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id('-infinity', TrUserData), TrUserData);
d_field_double_value_value(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(nan, TrUserData), TrUserData);
d_field_double_value_value(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(Value, TrUserData), TrUserData).

skip_varint_double_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_double_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_double_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_double_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_double_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_double_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_double_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_double_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_double_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_double_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_double_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_float_value(Bin, TrUserData) ->
    dfp_read_field_def_float_value(Bin, 0, 0,
				   id(0.0, TrUserData), TrUserData).

dfp_read_field_def_float_value(<<13, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_float_value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_float_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_float_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_float_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_float_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_float_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_float_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_float_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_float_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_float_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_float_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_float_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_float_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_float_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_float_value_value(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(infinity, TrUserData), TrUserData);
d_field_float_value_value(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id('-infinity', TrUserData), TrUserData);
d_field_float_value_value(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(nan, TrUserData), TrUserData);
d_field_float_value_value(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(Value, TrUserData), TrUserData).

skip_varint_float_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_float_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_float_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_float_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_float_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_float_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_float_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_float_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_float_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_float_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_float_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_int_64_value(Bin, TrUserData) ->
    dfp_read_field_def_int_64_value(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_int_64_value(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_int_64_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_int_64_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_int_64_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_int_64_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_64_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_64_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_64_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_64_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_int_64_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_int_64_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_int_64_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_64_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_int_64_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_64_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_int_64_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_int_64_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_int_64_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_int_64_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_64_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_64_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_64_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_int_64_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_64_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_int_64_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_int_64_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_u_int_64_value(Bin, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_64_value(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_64_value_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_u_int_64_value(<<>>, 0, 0, F@_1,
				  _) ->
    #{value => F@_1};
dfp_read_field_def_u_int_64_value(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_u_int_64_value(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_u_int_64_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_64_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_64_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_64_value_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_64_value(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_u_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_64_value(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_u_int_64_value(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_u_int_64_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_u_int_64_value_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_64_value_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_u_int_64_value_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_64_value(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_u_int_64_value(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_64_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_u_int_64_value(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_u_int_64_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_64_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_64_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_64_value(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_u_int_64_value(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_64_value(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_u_int_64_value(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_u_int_64_value(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_int_32_value(Bin, TrUserData) ->
    dfp_read_field_def_int_32_value(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_int_32_value(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_int_32_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_int_32_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_int_32_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_int_32_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_32_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_32_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_32_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_32_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_int_32_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_int_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_int_32_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_32_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_int_32_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_32_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_int_32_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_int_32_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_int_32_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_int_32_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_32_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_32_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_32_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_int_32_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_32_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_int_32_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_int_32_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_u_int_32_value(Bin, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_32_value(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_32_value_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_u_int_32_value(<<>>, 0, 0, F@_1,
				  _) ->
    #{value => F@_1};
dfp_read_field_def_u_int_32_value(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_u_int_32_value(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_u_int_32_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_32_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_32_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_32_value_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_32_value(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_u_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_32_value(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_u_int_32_value(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_u_int_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_u_int_32_value_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_32_value_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_u_int_32_value_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_32_value(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_u_int_32_value(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_32_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_u_int_32_value(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_u_int_32_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_32_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_32_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_32_value(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_u_int_32_value(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_32_value(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_u_int_32_value(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_u_int_32_value(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_bool_value(Bin, TrUserData) ->
    dfp_read_field_def_bool_value(Bin, 0, 0,
				  id(false, TrUserData), TrUserData).

dfp_read_field_def_bool_value(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_bool_value_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_bool_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_bool_value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_bool_value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_bool_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bool_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_bool_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_bool_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bool_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_bool_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bool_value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_bool_value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_bool_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bool_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_bool_value_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bool_value_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_bool_value_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_bool_value(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_bool_value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_bool_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_bool_value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_bool_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bool_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bool_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bool_value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_bool_value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bool_value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_bool_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_bool_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_string_value(Bin, TrUserData) ->
    dfp_read_field_def_string_value(Bin, 0, 0,
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_string_value(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_string_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_string_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_string_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_string_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_string_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_string_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_string_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_string_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_string_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_string_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_string_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_string_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_string_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_string_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_string_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_string_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_string_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_string_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_string_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_string_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_string_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_string_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_string_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_string_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_string_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_string_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_string_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_bytes_value(Bin, TrUserData) ->
    dfp_read_field_def_bytes_value(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_bytes_value(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_bytes_value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_bytes_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_bytes_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_bytes_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_bytes_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bytes_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_bytes_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_bytes_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bytes_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_bytes_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bytes_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_bytes_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_bytes_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bytes_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_bytes_value_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bytes_value_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_bytes_value_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_bytes_value(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_bytes_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_bytes_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_bytes_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_bytes_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bytes_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bytes_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bytes_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_bytes_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bytes_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_bytes_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_bytes_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_resource(Bin, TrUserData) ->
    dfp_read_field_def_resource(Bin, 0, 0,
				id(<<>>, TrUserData),
				'tr_decode_init_default_resource.labels'([],
									 TrUserData),
				TrUserData).

dfp_read_field_def_resource(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_resource_type(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_resource(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_resource_labels(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_resource(<<>>, 0, 0, F@_1, R1,
			    TrUserData) ->
    #{type => F@_1,
      labels =>
	  'tr_decode_repeated_finalize_resource.labels'(R1,
							TrUserData)};
dfp_read_field_def_resource(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_resource(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_resource(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_resource(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_resource(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_resource_type(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_resource_labels(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_resource(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_resource(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_resource(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_resource(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_resource(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_resource(<<>>, 0, 0, F@_1, R1,
			   TrUserData) ->
    #{type => F@_1,
      labels =>
	  'tr_decode_repeated_finalize_resource.labels'(R1,
							TrUserData)}.

d_field_resource_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_resource_type(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_resource_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_resource(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_resource_labels(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_resource_labels(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_resource_labels(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_resource(RestF, 0, 0, F@_1,
				'tr_decode_repeated_add_elem_resource.labels'(NewFValue,
									      Prev,
									      TrUserData),
				TrUserData).

skip_varint_resource(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_resource(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_resource(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_resource(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_resource(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_resource(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_resource(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resource(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_resource(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resource(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_resource(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_resource(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_resource(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_resource(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id(<<>>, TrUserData),
					    id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,string>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'd_enum_library_info.Language'(0) ->
    'LANGUAGE_UNSPECIFIED';
'd_enum_library_info.Language'(1) -> 'CPP';
'd_enum_library_info.Language'(2) -> 'C_SHARP';
'd_enum_library_info.Language'(3) -> 'ERLANG';
'd_enum_library_info.Language'(4) -> 'GO_LANG';
'd_enum_library_info.Language'(5) -> 'JAVA';
'd_enum_library_info.Language'(6) -> 'NODE_JS';
'd_enum_library_info.Language'(7) -> 'PHP';
'd_enum_library_info.Language'(8) -> 'PYTHON';
'd_enum_library_info.Language'(9) -> 'RUBY';
'd_enum_library_info.Language'(V) -> V.

'd_enum_metric_descriptor.Type'(0) -> 'UNSPECIFIED';
'd_enum_metric_descriptor.Type'(1) -> 'GAUGE_INT64';
'd_enum_metric_descriptor.Type'(2) -> 'GAUGE_DOUBLE';
'd_enum_metric_descriptor.Type'(3) ->
    'GAUGE_DISTRIBUTION';
'd_enum_metric_descriptor.Type'(4) ->
    'CUMULATIVE_INT64';
'd_enum_metric_descriptor.Type'(5) ->
    'CUMULATIVE_DOUBLE';
'd_enum_metric_descriptor.Type'(6) ->
    'CUMULATIVE_DISTRIBUTION';
'd_enum_metric_descriptor.Type'(7) -> 'SUMMARY';
'd_enum_metric_descriptor.Type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      export_metrics_service_request ->
	  merge_msg_export_metrics_service_request(Prev, New,
						   TrUserData);
      export_metrics_service_response ->
	  merge_msg_export_metrics_service_response(Prev, New,
						    TrUserData);
      node -> merge_msg_node(Prev, New, TrUserData);
      process_identifier ->
	  merge_msg_process_identifier(Prev, New, TrUserData);
      library_info ->
	  merge_msg_library_info(Prev, New, TrUserData);
      service_info ->
	  merge_msg_service_info(Prev, New, TrUserData);
      timestamp -> merge_msg_timestamp(Prev, New, TrUserData);
      metric -> merge_msg_metric(Prev, New, TrUserData);
      metric_descriptor ->
	  merge_msg_metric_descriptor(Prev, New, TrUserData);
      label_key -> merge_msg_label_key(Prev, New, TrUserData);
      time_series ->
	  merge_msg_time_series(Prev, New, TrUserData);
      label_value ->
	  merge_msg_label_value(Prev, New, TrUserData);
      point -> merge_msg_point(Prev, New, TrUserData);
      bucket_options ->
	  merge_msg_bucket_options(Prev, New, TrUserData);
      explicit -> merge_msg_explicit(Prev, New, TrUserData);
      bucket -> merge_msg_bucket(Prev, New, TrUserData);
      exemplar -> merge_msg_exemplar(Prev, New, TrUserData);
      distribution_value ->
	  merge_msg_distribution_value(Prev, New, TrUserData);
      snapshot -> merge_msg_snapshot(Prev, New, TrUserData);
      value_at_percentile ->
	  merge_msg_value_at_percentile(Prev, New, TrUserData);
      summary_value ->
	  merge_msg_summary_value(Prev, New, TrUserData);
      double_value ->
	  merge_msg_double_value(Prev, New, TrUserData);
      float_value ->
	  merge_msg_float_value(Prev, New, TrUserData);
      int_64_value ->
	  merge_msg_int_64_value(Prev, New, TrUserData);
      u_int_64_value ->
	  merge_msg_u_int_64_value(Prev, New, TrUserData);
      int_32_value ->
	  merge_msg_int_32_value(Prev, New, TrUserData);
      u_int_32_value ->
	  merge_msg_u_int_32_value(Prev, New, TrUserData);
      bool_value ->
	  merge_msg_bool_value(Prev, New, TrUserData);
      string_value ->
	  merge_msg_string_value(Prev, New, TrUserData);
      bytes_value ->
	  merge_msg_bytes_value(Prev, New, TrUserData);
      resource -> merge_msg_resource(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_export_metrics_service_request/3}).
merge_msg_export_metrics_service_request(PMsg, NMsg,
					 TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{node := PFnode}, #{node := NFnode}} ->
	       S1#{node => merge_msg_node(PFnode, NFnode, TrUserData)};
	   {_, #{node := NFnode}} -> S1#{node => NFnode};
	   {#{node := PFnode}, _} -> S1#{node => PFnode};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{metrics := PFmetrics}, #{metrics := NFmetrics}} ->
	       S2#{metrics =>
		       'erlang_++'(PFmetrics, NFmetrics, TrUserData)};
	   {_, #{metrics := NFmetrics}} ->
	       S2#{metrics => NFmetrics};
	   {#{metrics := PFmetrics}, _} ->
	       S2#{metrics => PFmetrics};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{resource := PFresource},
       #{resource := NFresource}} ->
	  S3#{resource =>
		  merge_msg_resource(PFresource, NFresource, TrUserData)};
      {_, #{resource := NFresource}} ->
	  S3#{resource => NFresource};
      {#{resource := PFresource}, _} ->
	  S3#{resource => PFresource};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_export_metrics_service_response/3}).
merge_msg_export_metrics_service_response(_Prev, New,
					  _TrUserData) ->
    New.

-compile({nowarn_unused_function,merge_msg_node/3}).
merge_msg_node(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{identifier := PFidentifier},
	    #{identifier := NFidentifier}} ->
	       S1#{identifier =>
		       merge_msg_process_identifier(PFidentifier, NFidentifier,
						    TrUserData)};
	   {_, #{identifier := NFidentifier}} ->
	       S1#{identifier => NFidentifier};
	   {#{identifier := PFidentifier}, _} ->
	       S1#{identifier => PFidentifier};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{library_info := PFlibrary_info},
	    #{library_info := NFlibrary_info}} ->
	       S2#{library_info =>
		       merge_msg_library_info(PFlibrary_info, NFlibrary_info,
					      TrUserData)};
	   {_, #{library_info := NFlibrary_info}} ->
	       S2#{library_info => NFlibrary_info};
	   {#{library_info := PFlibrary_info}, _} ->
	       S2#{library_info => PFlibrary_info};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{service_info := PFservice_info},
	    #{service_info := NFservice_info}} ->
	       S3#{service_info =>
		       merge_msg_service_info(PFservice_info, NFservice_info,
					      TrUserData)};
	   {_, #{service_info := NFservice_info}} ->
	       S3#{service_info => NFservice_info};
	   {#{service_info := PFservice_info}, _} ->
	       S3#{service_info => PFservice_info};
	   {_, _} -> S3
	 end,
    case {PMsg, NMsg} of
      {#{attributes := PFattributes},
       #{attributes := NFattributes}} ->
	  S4#{attributes =>
		  'tr_merge_node.attributes'(PFattributes, NFattributes,
					     TrUserData)};
      {_, #{attributes := NFattributes}} ->
	  S4#{attributes => NFattributes};
      {#{attributes := PFattributes}, _} ->
	  S4#{attributes => PFattributes};
      {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_process_identifier/3}).
merge_msg_process_identifier(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{host_name := NFhost_name}} ->
	       S1#{host_name => NFhost_name};
	   {#{host_name := PFhost_name}, _} ->
	       S1#{host_name => PFhost_name};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{pid := NFpid}} -> S2#{pid => NFpid};
	   {#{pid := PFpid}, _} -> S2#{pid => PFpid};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {#{start_timestamp := PFstart_timestamp},
       #{start_timestamp := NFstart_timestamp}} ->
	  S3#{start_timestamp =>
		  merge_msg_timestamp(PFstart_timestamp,
				      NFstart_timestamp, TrUserData)};
      {_, #{start_timestamp := NFstart_timestamp}} ->
	  S3#{start_timestamp => NFstart_timestamp};
      {#{start_timestamp := PFstart_timestamp}, _} ->
	  S3#{start_timestamp => PFstart_timestamp};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_library_info/3}).
merge_msg_library_info(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{language := NFlanguage}} ->
	       S1#{language => NFlanguage};
	   {#{language := PFlanguage}, _} ->
	       S1#{language => PFlanguage};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{exporter_version := NFexporter_version}} ->
	       S2#{exporter_version => NFexporter_version};
	   {#{exporter_version := PFexporter_version}, _} ->
	       S2#{exporter_version => PFexporter_version};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_,
       #{core_library_version := NFcore_library_version}} ->
	  S3#{core_library_version => NFcore_library_version};
      {#{core_library_version := PFcore_library_version},
       _} ->
	  S3#{core_library_version => PFcore_library_version};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_service_info/3}).
merge_msg_service_info(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{name := NFname}} -> S1#{name => NFname};
      {#{name := PFname}, _} -> S1#{name => PFname};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_metric/3}).
merge_msg_metric(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{descriptor := {metric_descriptor, OPFdescriptor}},
	    #{descriptor := {metric_descriptor, ONFdescriptor}}} ->
	       S1#{descriptor =>
		       {metric_descriptor,
			merge_msg_metric_descriptor(OPFdescriptor,
						    ONFdescriptor,
						    TrUserData)}};
	   {_, #{descriptor := NFdescriptor}} ->
	       S1#{descriptor => NFdescriptor};
	   {#{descriptor := PFdescriptor}, _} ->
	       S1#{descriptor => PFdescriptor};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{timeseries := PFtimeseries},
	    #{timeseries := NFtimeseries}} ->
	       S2#{timeseries =>
		       'erlang_++'(PFtimeseries, NFtimeseries, TrUserData)};
	   {_, #{timeseries := NFtimeseries}} ->
	       S2#{timeseries => NFtimeseries};
	   {#{timeseries := PFtimeseries}, _} ->
	       S2#{timeseries => PFtimeseries};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{resource := PFresource},
       #{resource := NFresource}} ->
	  S3#{resource =>
		  merge_msg_resource(PFresource, NFresource, TrUserData)};
      {_, #{resource := NFresource}} ->
	  S3#{resource => NFresource};
      {#{resource := PFresource}, _} ->
	  S3#{resource => PFresource};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_metric_descriptor/3}).
merge_msg_metric_descriptor(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{name := NFname}} -> S1#{name => NFname};
	   {#{name := PFname}, _} -> S1#{name => PFname};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{description := NFdescription}} ->
	       S2#{description => NFdescription};
	   {#{description := PFdescription}, _} ->
	       S2#{description => PFdescription};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{unit := NFunit}} -> S3#{unit => NFunit};
	   {#{unit := PFunit}, _} -> S3#{unit => PFunit};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S4#{type => NFtype};
	   {#{type := PFtype}, _} -> S4#{type => PFtype};
	   _ -> S4
	 end,
    case {PMsg, NMsg} of
      {#{label_keys := PFlabel_keys},
       #{label_keys := NFlabel_keys}} ->
	  S5#{label_keys =>
		  'erlang_++'(PFlabel_keys, NFlabel_keys, TrUserData)};
      {_, #{label_keys := NFlabel_keys}} ->
	  S5#{label_keys => NFlabel_keys};
      {#{label_keys := PFlabel_keys}, _} ->
	  S5#{label_keys => PFlabel_keys};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_label_key/3}).
merge_msg_label_key(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{description := NFdescription}} ->
	  S2#{description => NFdescription};
      {#{description := PFdescription}, _} ->
	  S2#{description => PFdescription};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_time_series/3}).
merge_msg_time_series(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{start_timestamp := PFstart_timestamp},
	    #{start_timestamp := NFstart_timestamp}} ->
	       S1#{start_timestamp =>
		       merge_msg_timestamp(PFstart_timestamp,
					   NFstart_timestamp, TrUserData)};
	   {_, #{start_timestamp := NFstart_timestamp}} ->
	       S1#{start_timestamp => NFstart_timestamp};
	   {#{start_timestamp := PFstart_timestamp}, _} ->
	       S1#{start_timestamp => PFstart_timestamp};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{label_values := PFlabel_values},
	    #{label_values := NFlabel_values}} ->
	       S2#{label_values =>
		       'erlang_++'(PFlabel_values, NFlabel_values,
				   TrUserData)};
	   {_, #{label_values := NFlabel_values}} ->
	       S2#{label_values => NFlabel_values};
	   {#{label_values := PFlabel_values}, _} ->
	       S2#{label_values => PFlabel_values};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{points := PFpoints}, #{points := NFpoints}} ->
	  S3#{points =>
		  'erlang_++'(PFpoints, NFpoints, TrUserData)};
      {_, #{points := NFpoints}} -> S3#{points => NFpoints};
      {#{points := PFpoints}, _} -> S3#{points => PFpoints};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_label_value/3}).
merge_msg_label_value(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S1#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S1#{value => PFvalue};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{has_value := NFhas_value}} ->
	  S2#{has_value => NFhas_value};
      {#{has_value := PFhas_value}, _} ->
	  S2#{has_value => PFhas_value};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_point/3}).
merge_msg_point(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{timestamp := PFtimestamp},
	    #{timestamp := NFtimestamp}} ->
	       S1#{timestamp =>
		       merge_msg_timestamp(PFtimestamp, NFtimestamp,
					   TrUserData)};
	   {_, #{timestamp := NFtimestamp}} ->
	       S1#{timestamp => NFtimestamp};
	   {#{timestamp := PFtimestamp}, _} ->
	       S1#{timestamp => PFtimestamp};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := {distribution_value, OPFvalue}},
       #{value := {distribution_value, ONFvalue}}} ->
	  S2#{value =>
		  {distribution_value,
		   merge_msg_distribution_value(OPFvalue, ONFvalue,
						TrUserData)}};
      {#{value := {summary_value, OPFvalue}},
       #{value := {summary_value, ONFvalue}}} ->
	  S2#{value =>
		  {summary_value,
		   merge_msg_summary_value(OPFvalue, ONFvalue,
					   TrUserData)}};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_bucket_options/3}).
merge_msg_bucket_options(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{type := {explicit, OPFtype}},
       #{type := {explicit, ONFtype}}} ->
	  S1#{type =>
		  {explicit,
		   merge_msg_explicit(OPFtype, ONFtype, TrUserData)}};
      {_, #{type := NFtype}} -> S1#{type => NFtype};
      {#{type := PFtype}, _} -> S1#{type => PFtype};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_explicit/3}).
merge_msg_explicit(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{bounds := PFbounds}, #{bounds := NFbounds}} ->
	  S1#{bounds =>
		  'erlang_++'(PFbounds, NFbounds, TrUserData)};
      {_, #{bounds := NFbounds}} -> S1#{bounds => NFbounds};
      {#{bounds := PFbounds}, _} -> S1#{bounds => PFbounds};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bucket/3}).
merge_msg_bucket(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{count := NFcount}} -> S1#{count => NFcount};
	   {#{count := PFcount}, _} -> S1#{count => PFcount};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{exemplar := PFexemplar},
       #{exemplar := NFexemplar}} ->
	  S2#{exemplar =>
		  merge_msg_exemplar(PFexemplar, NFexemplar, TrUserData)};
      {_, #{exemplar := NFexemplar}} ->
	  S2#{exemplar => NFexemplar};
      {#{exemplar := PFexemplar}, _} ->
	  S2#{exemplar => PFexemplar};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_exemplar/3}).
merge_msg_exemplar(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S1#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S1#{value => PFvalue};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{timestamp := PFtimestamp},
	    #{timestamp := NFtimestamp}} ->
	       S2#{timestamp =>
		       merge_msg_timestamp(PFtimestamp, NFtimestamp,
					   TrUserData)};
	   {_, #{timestamp := NFtimestamp}} ->
	       S2#{timestamp => NFtimestamp};
	   {#{timestamp := PFtimestamp}, _} ->
	       S2#{timestamp => PFtimestamp};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{attachments := PFattachments},
       #{attachments := NFattachments}} ->
	  S3#{attachments =>
		  'tr_merge_exemplar.attachments'(PFattachments,
						  NFattachments, TrUserData)};
      {_, #{attachments := NFattachments}} ->
	  S3#{attachments => NFattachments};
      {#{attachments := PFattachments}, _} ->
	  S3#{attachments => PFattachments};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_distribution_value/3}).
merge_msg_distribution_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{count := NFcount}} -> S1#{count => NFcount};
	   {#{count := PFcount}, _} -> S1#{count => PFcount};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{sum := NFsum}} -> S2#{sum => NFsum};
	   {#{sum := PFsum}, _} -> S2#{sum => PFsum};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_,
	    #{sum_of_squared_deviation :=
		  NFsum_of_squared_deviation}} ->
	       S3#{sum_of_squared_deviation =>
		       NFsum_of_squared_deviation};
	   {#{sum_of_squared_deviation :=
		  PFsum_of_squared_deviation},
	    _} ->
	       S3#{sum_of_squared_deviation =>
		       PFsum_of_squared_deviation};
	   _ -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {#{bucket_options := PFbucket_options},
	    #{bucket_options := NFbucket_options}} ->
	       S4#{bucket_options =>
		       merge_msg_bucket_options(PFbucket_options,
						NFbucket_options, TrUserData)};
	   {_, #{bucket_options := NFbucket_options}} ->
	       S4#{bucket_options => NFbucket_options};
	   {#{bucket_options := PFbucket_options}, _} ->
	       S4#{bucket_options => PFbucket_options};
	   {_, _} -> S4
	 end,
    case {PMsg, NMsg} of
      {#{buckets := PFbuckets}, #{buckets := NFbuckets}} ->
	  S5#{buckets =>
		  'erlang_++'(PFbuckets, NFbuckets, TrUserData)};
      {_, #{buckets := NFbuckets}} ->
	  S5#{buckets => NFbuckets};
      {#{buckets := PFbuckets}, _} ->
	  S5#{buckets => PFbuckets};
      {_, _} -> S5
    end.

-compile({nowarn_unused_function,merge_msg_snapshot/3}).
merge_msg_snapshot(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{count := PFcount}, #{count := NFcount}} ->
	       S1#{count =>
		       merge_msg_int_64_value(PFcount, NFcount, TrUserData)};
	   {_, #{count := NFcount}} -> S1#{count => NFcount};
	   {#{count := PFcount}, _} -> S1#{count => PFcount};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{sum := PFsum}, #{sum := NFsum}} ->
	       S2#{sum =>
		       merge_msg_double_value(PFsum, NFsum, TrUserData)};
	   {_, #{sum := NFsum}} -> S2#{sum => NFsum};
	   {#{sum := PFsum}, _} -> S2#{sum => PFsum};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{percentile_values := PFpercentile_values},
       #{percentile_values := NFpercentile_values}} ->
	  S3#{percentile_values =>
		  'erlang_++'(PFpercentile_values, NFpercentile_values,
			      TrUserData)};
      {_, #{percentile_values := NFpercentile_values}} ->
	  S3#{percentile_values => NFpercentile_values};
      {#{percentile_values := PFpercentile_values}, _} ->
	  S3#{percentile_values => PFpercentile_values};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_value_at_percentile/3}).
merge_msg_value_at_percentile(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{percentile := NFpercentile}} ->
	       S1#{percentile => NFpercentile};
	   {#{percentile := PFpercentile}, _} ->
	       S1#{percentile => PFpercentile};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_summary_value/3}).
merge_msg_summary_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{count := PFcount}, #{count := NFcount}} ->
	       S1#{count =>
		       merge_msg_int_64_value(PFcount, NFcount, TrUserData)};
	   {_, #{count := NFcount}} -> S1#{count => NFcount};
	   {#{count := PFcount}, _} -> S1#{count => PFcount};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{sum := PFsum}, #{sum := NFsum}} ->
	       S2#{sum =>
		       merge_msg_double_value(PFsum, NFsum, TrUserData)};
	   {_, #{sum := NFsum}} -> S2#{sum => NFsum};
	   {#{sum := PFsum}, _} -> S2#{sum => PFsum};
	   {_, _} -> S2
	 end,
    case {PMsg, NMsg} of
      {#{snapshot := PFsnapshot},
       #{snapshot := NFsnapshot}} ->
	  S3#{snapshot =>
		  merge_msg_snapshot(PFsnapshot, NFsnapshot, TrUserData)};
      {_, #{snapshot := NFsnapshot}} ->
	  S3#{snapshot => NFsnapshot};
      {#{snapshot := PFsnapshot}, _} ->
	  S3#{snapshot => PFsnapshot};
      {_, _} -> S3
    end.

-compile({nowarn_unused_function,merge_msg_double_value/3}).
merge_msg_double_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_float_value/3}).
merge_msg_float_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_int_64_value/3}).
merge_msg_int_64_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_u_int_64_value/3}).
merge_msg_u_int_64_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_int_32_value/3}).
merge_msg_int_32_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_u_int_32_value/3}).
merge_msg_u_int_32_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bool_value/3}).
merge_msg_bool_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_string_value/3}).
merge_msg_string_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bytes_value/3}).
merge_msg_bytes_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_resource/3}).
merge_msg_resource(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S2#{labels =>
		  'tr_merge_resource.labels'(PFlabels, NFlabels,
					     TrUserData)};
      {_, #{labels := NFlabels}} -> S2#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S2#{labels => PFlabels};
      {_, _} -> S2
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      export_metrics_service_request ->
	  v_msg_export_metrics_service_request(Msg, [MsgName],
					       TrUserData);
      export_metrics_service_response ->
	  v_msg_export_metrics_service_response(Msg, [MsgName],
						TrUserData);
      node -> v_msg_node(Msg, [MsgName], TrUserData);
      process_identifier ->
	  v_msg_process_identifier(Msg, [MsgName], TrUserData);
      library_info ->
	  v_msg_library_info(Msg, [MsgName], TrUserData);
      service_info ->
	  v_msg_service_info(Msg, [MsgName], TrUserData);
      timestamp ->
	  v_msg_timestamp(Msg, [MsgName], TrUserData);
      metric -> v_msg_metric(Msg, [MsgName], TrUserData);
      metric_descriptor ->
	  v_msg_metric_descriptor(Msg, [MsgName], TrUserData);
      label_key ->
	  v_msg_label_key(Msg, [MsgName], TrUserData);
      time_series ->
	  v_msg_time_series(Msg, [MsgName], TrUserData);
      label_value ->
	  v_msg_label_value(Msg, [MsgName], TrUserData);
      point -> v_msg_point(Msg, [MsgName], TrUserData);
      bucket_options ->
	  v_msg_bucket_options(Msg, [MsgName], TrUserData);
      explicit -> v_msg_explicit(Msg, [MsgName], TrUserData);
      bucket -> v_msg_bucket(Msg, [MsgName], TrUserData);
      exemplar -> v_msg_exemplar(Msg, [MsgName], TrUserData);
      distribution_value ->
	  v_msg_distribution_value(Msg, [MsgName], TrUserData);
      snapshot -> v_msg_snapshot(Msg, [MsgName], TrUserData);
      value_at_percentile ->
	  v_msg_value_at_percentile(Msg, [MsgName], TrUserData);
      summary_value ->
	  v_msg_summary_value(Msg, [MsgName], TrUserData);
      double_value ->
	  v_msg_double_value(Msg, [MsgName], TrUserData);
      float_value ->
	  v_msg_float_value(Msg, [MsgName], TrUserData);
      int_64_value ->
	  v_msg_int_64_value(Msg, [MsgName], TrUserData);
      u_int_64_value ->
	  v_msg_u_int_64_value(Msg, [MsgName], TrUserData);
      int_32_value ->
	  v_msg_int_32_value(Msg, [MsgName], TrUserData);
      u_int_32_value ->
	  v_msg_u_int_32_value(Msg, [MsgName], TrUserData);
      bool_value ->
	  v_msg_bool_value(Msg, [MsgName], TrUserData);
      string_value ->
	  v_msg_string_value(Msg, [MsgName], TrUserData);
      bytes_value ->
	  v_msg_bytes_value(Msg, [MsgName], TrUserData);
      resource -> v_msg_resource(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_export_metrics_service_request/3}).
-dialyzer({nowarn_function,v_msg_export_metrics_service_request/3}).
v_msg_export_metrics_service_request(#{} = M, Path,
				     TrUserData) ->
    case M of
      #{node := F1} ->
	  v_msg_node(F1, [node | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{metrics := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_metric(Elem, [metrics | Path], TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, metric}}, F2,
			       [metrics | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{resource := F3} ->
	  v_msg_resource(F3, [resource | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (node) -> ok;
		      (metrics) -> ok;
		      (resource) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_export_metrics_service_request(M, Path,
				     _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   export_metrics_service_request},
		  M, Path);
v_msg_export_metrics_service_request(X, Path,
				     _TrUserData) ->
    mk_type_error({expected_msg,
		   export_metrics_service_request},
		  X, Path).

-compile({nowarn_unused_function,v_msg_export_metrics_service_response/3}).
-dialyzer({nowarn_function,v_msg_export_metrics_service_response/3}).
v_msg_export_metrics_service_response(#{} = M, Path,
				      _) ->
    lists:foreach(fun (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_export_metrics_service_response(M, Path,
				      _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   export_metrics_service_response},
		  M, Path);
v_msg_export_metrics_service_response(X, Path,
				      _TrUserData) ->
    mk_type_error({expected_msg,
		   export_metrics_service_response},
		  X, Path).

-compile({nowarn_unused_function,v_msg_node/3}).
-dialyzer({nowarn_function,v_msg_node/3}).
v_msg_node(#{} = M, Path, TrUserData) ->
    case M of
      #{identifier := F1} ->
	  v_msg_process_identifier(F1, [identifier | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{library_info := F2} ->
	  v_msg_library_info(F2, [library_info | Path],
			     TrUserData);
      _ -> ok
    end,
    case M of
      #{service_info := F3} ->
	  v_msg_service_info(F3, [service_info | Path],
			     TrUserData);
      _ -> ok
    end,
    case M of
      #{attributes := F4} ->
	  'v_map<string,string>'(F4, [attributes | Path],
				 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (identifier) -> ok;
		      (library_info) -> ok;
		      (service_info) -> ok;
		      (attributes) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_node(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   node},
		  M, Path);
v_msg_node(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, node}, X, Path).

-compile({nowarn_unused_function,v_msg_process_identifier/3}).
-dialyzer({nowarn_function,v_msg_process_identifier/3}).
v_msg_process_identifier(#{} = M, Path, TrUserData) ->
    case M of
      #{host_name := F1} ->
	  v_type_string(F1, [host_name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{pid := F2} ->
	  v_type_uint32(F2, [pid | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{start_timestamp := F3} ->
	  v_msg_timestamp(F3, [start_timestamp | Path],
			  TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (host_name) -> ok;
		      (pid) -> ok;
		      (start_timestamp) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_process_identifier(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   process_identifier},
		  M, Path);
v_msg_process_identifier(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, process_identifier}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_library_info/3}).
-dialyzer({nowarn_function,v_msg_library_info/3}).
v_msg_library_info(#{} = M, Path, TrUserData) ->
    case M of
      #{language := F1} ->
	  'v_enum_library_info.Language'(F1, [language | Path],
					 TrUserData);
      _ -> ok
    end,
    case M of
      #{exporter_version := F2} ->
	  v_type_string(F2, [exporter_version | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{core_library_version := F3} ->
	  v_type_string(F3, [core_library_version | Path],
			TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (language) -> ok;
		      (exporter_version) -> ok;
		      (core_library_version) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_library_info(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   library_info},
		  M, Path);
v_msg_library_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, library_info}, X, Path).

-compile({nowarn_unused_function,v_msg_service_info/3}).
-dialyzer({nowarn_function,v_msg_service_info/3}).
v_msg_service_info(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_service_info(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   service_info},
		  M, Path);
v_msg_service_info(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, service_info}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   timestamp},
		  M, Path);
v_msg_timestamp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,v_msg_metric/3}).
-dialyzer({nowarn_function,v_msg_metric/3}).
v_msg_metric(#{} = M, Path, TrUserData) ->
    case M of
      #{descriptor := {metric_descriptor, OF1}} ->
	  v_msg_metric_descriptor(OF1,
				  [metric_descriptor, descriptor | Path],
				  TrUserData);
      #{descriptor := {name, OF1}} ->
	  v_type_string(OF1, [name, descriptor | Path],
			TrUserData);
      #{descriptor := F1} ->
	  mk_type_error(invalid_oneof, F1, [descriptor | Path]);
      _ -> ok
    end,
    case M of
      #{timeseries := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_time_series(Elem, [timeseries | Path],
					TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, time_series}}, F2,
			       [timeseries | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{resource := F3} ->
	  v_msg_resource(F3, [resource | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (descriptor) -> ok;
		      (timeseries) -> ok;
		      (resource) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_metric(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   metric},
		  M, Path);
v_msg_metric(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, metric}, X, Path).

-compile({nowarn_unused_function,v_msg_metric_descriptor/3}).
-dialyzer({nowarn_function,v_msg_metric_descriptor/3}).
v_msg_metric_descriptor(#{} = M, Path, TrUserData) ->
    case M of
      #{name := F1} ->
	  v_type_string(F1, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{description := F2} ->
	  v_type_string(F2, [description | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{unit := F3} ->
	  v_type_string(F3, [unit | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{type := F4} ->
	  'v_enum_metric_descriptor.Type'(F4, [type | Path],
					  TrUserData);
      _ -> ok
    end,
    case M of
      #{label_keys := F5} ->
	  if is_list(F5) ->
		 _ = [v_msg_label_key(Elem, [label_keys | Path],
				      TrUserData)
		      || Elem <- F5],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, label_key}}, F5,
			       [label_keys | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (name) -> ok;
		      (description) -> ok;
		      (unit) -> ok;
		      (type) -> ok;
		      (label_keys) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_metric_descriptor(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   metric_descriptor},
		  M, Path);
v_msg_metric_descriptor(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, metric_descriptor}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_label_key/3}).
-dialyzer({nowarn_function,v_msg_label_key/3}).
v_msg_label_key(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{description := F2} ->
	  v_type_string(F2, [description | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (description) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_label_key(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   label_key},
		  M, Path);
v_msg_label_key(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, label_key}, X, Path).

-compile({nowarn_unused_function,v_msg_time_series/3}).
-dialyzer({nowarn_function,v_msg_time_series/3}).
v_msg_time_series(#{} = M, Path, TrUserData) ->
    case M of
      #{start_timestamp := F1} ->
	  v_msg_timestamp(F1, [start_timestamp | Path],
			  TrUserData);
      _ -> ok
    end,
    case M of
      #{label_values := F2} ->
	  if is_list(F2) ->
		 _ = [v_msg_label_value(Elem, [label_values | Path],
					TrUserData)
		      || Elem <- F2],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, label_value}}, F2,
			       [label_values | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{points := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_point(Elem, [points | Path], TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, point}}, F3,
			       [points | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (start_timestamp) -> ok;
		      (label_values) -> ok;
		      (points) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_time_series(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   time_series},
		  M, Path);
v_msg_time_series(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, time_series}, X, Path).

-compile({nowarn_unused_function,v_msg_label_value/3}).
-dialyzer({nowarn_function,v_msg_label_value/3}).
v_msg_label_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_string(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{has_value := F2} ->
	  v_type_bool(F2, [has_value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (has_value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_label_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   label_value},
		  M, Path);
v_msg_label_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, label_value}, X, Path).

-compile({nowarn_unused_function,v_msg_point/3}).
-dialyzer({nowarn_function,v_msg_point/3}).
v_msg_point(#{} = M, Path, TrUserData) ->
    case M of
      #{timestamp := F1} ->
	  v_msg_timestamp(F1, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := {int64_value, OF2}} ->
	  v_type_int64(OF2, [int64_value, value | Path],
		       TrUserData);
      #{value := {double_value, OF2}} ->
	  v_type_double(OF2, [double_value, value | Path],
			TrUserData);
      #{value := {distribution_value, OF2}} ->
	  v_msg_distribution_value(OF2,
				   [distribution_value, value | Path],
				   TrUserData);
      #{value := {summary_value, OF2}} ->
	  v_msg_summary_value(OF2, [summary_value, value | Path],
			      TrUserData);
      #{value := F2} ->
	  mk_type_error(invalid_oneof, F2, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (timestamp) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_point(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   point},
		  M, Path);
v_msg_point(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, point}, X, Path).

-compile({nowarn_unused_function,v_msg_bucket_options/3}).
-dialyzer({nowarn_function,v_msg_bucket_options/3}).
v_msg_bucket_options(#{} = M, Path, TrUserData) ->
    case M of
      #{type := {explicit, OF1}} ->
	  v_msg_explicit(OF1, [explicit, type | Path],
			 TrUserData);
      #{type := F1} ->
	  mk_type_error(invalid_oneof, F1, [type | Path]);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bucket_options(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bucket_options},
		  M, Path);
v_msg_bucket_options(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bucket_options}, X, Path).

-compile({nowarn_unused_function,v_msg_explicit/3}).
-dialyzer({nowarn_function,v_msg_explicit/3}).
v_msg_explicit(#{} = M, Path, TrUserData) ->
    case M of
      #{bounds := F1} ->
	  if is_list(F1) ->
		 _ = [v_type_double(Elem, [bounds | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, double}, F1,
			       [bounds | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (bounds) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_explicit(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   explicit},
		  M, Path);
v_msg_explicit(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, explicit}, X, Path).

-compile({nowarn_unused_function,v_msg_bucket/3}).
-dialyzer({nowarn_function,v_msg_bucket/3}).
v_msg_bucket(#{} = M, Path, TrUserData) ->
    case M of
      #{count := F1} ->
	  v_type_int64(F1, [count | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{exemplar := F2} ->
	  v_msg_exemplar(F2, [exemplar | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (count) -> ok;
		      (exemplar) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bucket(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bucket},
		  M, Path);
v_msg_bucket(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bucket}, X, Path).

-compile({nowarn_unused_function,v_msg_exemplar/3}).
-dialyzer({nowarn_function,v_msg_exemplar/3}).
v_msg_exemplar(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_double(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{timestamp := F2} ->
	  v_msg_timestamp(F2, [timestamp | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{attachments := F3} ->
	  'v_map<string,string>'(F3, [attachments | Path],
				 TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (timestamp) -> ok;
		      (attachments) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_exemplar(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   exemplar},
		  M, Path);
v_msg_exemplar(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, exemplar}, X, Path).

-compile({nowarn_unused_function,v_msg_distribution_value/3}).
-dialyzer({nowarn_function,v_msg_distribution_value/3}).
v_msg_distribution_value(#{} = M, Path, TrUserData) ->
    case M of
      #{count := F1} ->
	  v_type_int64(F1, [count | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sum := F2} ->
	  v_type_double(F2, [sum | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sum_of_squared_deviation := F3} ->
	  v_type_double(F3, [sum_of_squared_deviation | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{bucket_options := F4} ->
	  v_msg_bucket_options(F4, [bucket_options | Path],
			       TrUserData);
      _ -> ok
    end,
    case M of
      #{buckets := F5} ->
	  if is_list(F5) ->
		 _ = [v_msg_bucket(Elem, [buckets | Path], TrUserData)
		      || Elem <- F5],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, bucket}}, F5,
			       [buckets | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (count) -> ok;
		      (sum) -> ok;
		      (sum_of_squared_deviation) -> ok;
		      (bucket_options) -> ok;
		      (buckets) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_distribution_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   distribution_value},
		  M, Path);
v_msg_distribution_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, distribution_value}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_snapshot/3}).
-dialyzer({nowarn_function,v_msg_snapshot/3}).
v_msg_snapshot(#{} = M, Path, TrUserData) ->
    case M of
      #{count := F1} ->
	  v_msg_int_64_value(F1, [count | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sum := F2} ->
	  v_msg_double_value(F2, [sum | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{percentile_values := F3} ->
	  if is_list(F3) ->
		 _ = [v_msg_value_at_percentile(Elem,
						[percentile_values | Path],
						TrUserData)
		      || Elem <- F3],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of,
				{msg, value_at_percentile}},
			       F3, [percentile_values | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (count) -> ok;
		      (sum) -> ok;
		      (percentile_values) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_snapshot(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   snapshot},
		  M, Path);
v_msg_snapshot(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, snapshot}, X, Path).

-compile({nowarn_unused_function,v_msg_value_at_percentile/3}).
-dialyzer({nowarn_function,v_msg_value_at_percentile/3}).
v_msg_value_at_percentile(#{} = M, Path, TrUserData) ->
    case M of
      #{percentile := F1} ->
	  v_type_double(F1, [percentile | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_double(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (percentile) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_value_at_percentile(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   value_at_percentile},
		  M, Path);
v_msg_value_at_percentile(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, value_at_percentile}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_summary_value/3}).
-dialyzer({nowarn_function,v_msg_summary_value/3}).
v_msg_summary_value(#{} = M, Path, TrUserData) ->
    case M of
      #{count := F1} ->
	  v_msg_int_64_value(F1, [count | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{sum := F2} ->
	  v_msg_double_value(F2, [sum | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{snapshot := F3} ->
	  v_msg_snapshot(F3, [snapshot | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (count) -> ok;
		      (sum) -> ok;
		      (snapshot) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_summary_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   summary_value},
		  M, Path);
v_msg_summary_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, summary_value}, X, Path).

-compile({nowarn_unused_function,v_msg_double_value/3}).
-dialyzer({nowarn_function,v_msg_double_value/3}).
v_msg_double_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_double(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_double_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   double_value},
		  M, Path);
v_msg_double_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, double_value}, X, Path).

-compile({nowarn_unused_function,v_msg_float_value/3}).
-dialyzer({nowarn_function,v_msg_float_value/3}).
v_msg_float_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_float(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_float_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   float_value},
		  M, Path);
v_msg_float_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, float_value}, X, Path).

-compile({nowarn_unused_function,v_msg_int_64_value/3}).
-dialyzer({nowarn_function,v_msg_int_64_value/3}).
v_msg_int_64_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_int64(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_int_64_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   int_64_value},
		  M, Path);
v_msg_int_64_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_64_value}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_64_value/3}).
-dialyzer({nowarn_function,v_msg_u_int_64_value/3}).
v_msg_u_int_64_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_uint64(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_u_int_64_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   u_int_64_value},
		  M, Path);
v_msg_u_int_64_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_64_value}, X, Path).

-compile({nowarn_unused_function,v_msg_int_32_value/3}).
-dialyzer({nowarn_function,v_msg_int_32_value/3}).
v_msg_int_32_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_int32(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_int_32_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   int_32_value},
		  M, Path);
v_msg_int_32_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_32_value}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_32_value/3}).
-dialyzer({nowarn_function,v_msg_u_int_32_value/3}).
v_msg_u_int_32_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_uint32(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_u_int_32_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   u_int_32_value},
		  M, Path);
v_msg_u_int_32_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_32_value}, X, Path).

-compile({nowarn_unused_function,v_msg_bool_value/3}).
-dialyzer({nowarn_function,v_msg_bool_value/3}).
v_msg_bool_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bool(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bool_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bool_value},
		  M, Path);
v_msg_bool_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bool_value}, X, Path).

-compile({nowarn_unused_function,v_msg_string_value/3}).
-dialyzer({nowarn_function,v_msg_string_value/3}).
v_msg_string_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_string(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_string_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   string_value},
		  M, Path);
v_msg_string_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, string_value}, X, Path).

-compile({nowarn_unused_function,v_msg_bytes_value/3}).
-dialyzer({nowarn_function,v_msg_bytes_value/3}).
v_msg_bytes_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bytes(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bytes_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bytes_value},
		  M, Path);
v_msg_bytes_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bytes_value}, X, Path).

-compile({nowarn_unused_function,v_msg_resource/3}).
-dialyzer({nowarn_function,v_msg_resource/3}).
v_msg_resource(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} ->
	  v_type_string(F1, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{labels := F2} ->
	  'v_map<string,string>'(F2, [labels | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_resource(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   resource},
		  M, Path);
v_msg_resource(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, resource}, X, Path).

-compile({nowarn_unused_function,'v_enum_library_info.Language'/3}).
-dialyzer({nowarn_function,'v_enum_library_info.Language'/3}).
'v_enum_library_info.Language'('LANGUAGE_UNSPECIFIED',
			       _Path, _TrUserData) ->
    ok;
'v_enum_library_info.Language'('CPP', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('C_SHARP', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('ERLANG', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('GO_LANG', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('JAVA', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('NODE_JS', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('PHP', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('PYTHON', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'('RUBY', _Path,
			       _TrUserData) ->
    ok;
'v_enum_library_info.Language'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_library_info.Language'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'library_info.Language'},
		  X, Path).

-compile({nowarn_unused_function,'v_enum_metric_descriptor.Type'/3}).
-dialyzer({nowarn_function,'v_enum_metric_descriptor.Type'/3}).
'v_enum_metric_descriptor.Type'('UNSPECIFIED', _Path,
				_TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('GAUGE_INT64', _Path,
				_TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('GAUGE_DOUBLE', _Path,
				_TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('GAUGE_DISTRIBUTION',
				_Path, _TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('CUMULATIVE_INT64',
				_Path, _TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('CUMULATIVE_DOUBLE',
				_Path, _TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('CUMULATIVE_DISTRIBUTION',
				_Path, _TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'('SUMMARY', _Path,
				_TrUserData) ->
    ok;
'v_enum_metric_descriptor.Type'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_metric_descriptor.Type'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'metric_descriptor.Type'},
		  X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_type_string(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_node.attributes'/2}).
'tr_decode_init_default_node.attributes'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_node.attributes'/3}).
'tr_merge_node.attributes'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_node.attributes'/2}).
'tr_decode_repeated_finalize_node.attributes'(L,
					      TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_node.attributes'/2}).
'tr_encode_node.attributes'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_node.attributes'/3}).
'tr_decode_repeated_add_elem_node.attributes'(Elem, L,
					      _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_decode_init_default_resource.labels'/2}).
'tr_decode_init_default_resource.labels'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_resource.labels'/3}).
'tr_merge_resource.labels'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_resource.labels'/2}).
'tr_decode_repeated_finalize_resource.labels'(L,
					      TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_resource.labels'/2}).
'tr_encode_resource.labels'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_resource.labels'/3}).
'tr_decode_repeated_add_elem_resource.labels'(Elem, L,
					      _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_exemplar.attachments[x]'/2}).
'tr_encode_exemplar.attachments[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_exemplar.attachments'/2}).
'tr_decode_init_default_exemplar.attachments'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_exemplar.attachments'/3}).
'tr_merge_exemplar.attachments'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_exemplar.attachments'/2}).
'tr_decode_repeated_finalize_exemplar.attachments'(L,
						   TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_exemplar.attachments'/2}).
'tr_encode_exemplar.attachments'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_exemplar.attachments'/3}).
'tr_decode_repeated_add_elem_exemplar.attachments'(Elem,
						   L, _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_node.attributes[x]'/2}).
'tr_encode_node.attributes[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_encode_resource.labels[x]'/2}).
'tr_encode_resource.labels[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{enum, 'library_info.Language'},
      [{'LANGUAGE_UNSPECIFIED', 0}, {'CPP', 1},
       {'C_SHARP', 2}, {'ERLANG', 3}, {'GO_LANG', 4},
       {'JAVA', 5}, {'NODE_JS', 6}, {'PHP', 7}, {'PYTHON', 8},
       {'RUBY', 9}]},
     {{enum, 'metric_descriptor.Type'},
      [{'UNSPECIFIED', 0}, {'GAUGE_INT64', 1},
       {'GAUGE_DOUBLE', 2}, {'GAUGE_DISTRIBUTION', 3},
       {'CUMULATIVE_INT64', 4}, {'CUMULATIVE_DOUBLE', 5},
       {'CUMULATIVE_DISTRIBUTION', 6}, {'SUMMARY', 7}]},
     {{msg, export_metrics_service_request},
      [#{name => node, fnum => 1, rnum => 2,
	 type => {msg, node}, occurrence => optional,
	 opts => []},
       #{name => metrics, fnum => 2, rnum => 3,
	 type => {msg, metric}, occurrence => repeated,
	 opts => []},
       #{name => resource, fnum => 3, rnum => 4,
	 type => {msg, resource}, occurrence => optional,
	 opts => []}]},
     {{msg, export_metrics_service_response}, []},
     {{msg, node},
      [#{name => identifier, fnum => 1, rnum => 2,
	 type => {msg, process_identifier},
	 occurrence => optional, opts => []},
       #{name => library_info, fnum => 2, rnum => 3,
	 type => {msg, library_info}, occurrence => optional,
	 opts => []},
       #{name => service_info, fnum => 3, rnum => 4,
	 type => {msg, service_info}, occurrence => optional,
	 opts => []},
       #{name => attributes, fnum => 4, rnum => 5,
	 type => {map, string, string}, occurrence => repeated,
	 opts => []}]},
     {{msg, process_identifier},
      [#{name => host_name, fnum => 1, rnum => 2,
	 type => string, occurrence => optional, opts => []},
       #{name => pid, fnum => 2, rnum => 3, type => uint32,
	 occurrence => optional, opts => []},
       #{name => start_timestamp, fnum => 3, rnum => 4,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []}]},
     {{msg, library_info},
      [#{name => language, fnum => 1, rnum => 2,
	 type => {enum, 'library_info.Language'},
	 occurrence => optional, opts => []},
       #{name => exporter_version, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => core_library_version, fnum => 3, rnum => 4,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, service_info},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, timestamp},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, metric},
      [#{name => descriptor, rnum => 2,
	 fields =>
	     [#{name => metric_descriptor, fnum => 1, rnum => 2,
		type => {msg, metric_descriptor},
		occurrence => optional, opts => []},
	      #{name => name, fnum => 2, rnum => 2, type => string,
		occurrence => optional, opts => []}]},
       #{name => timeseries, fnum => 3, rnum => 3,
	 type => {msg, time_series}, occurrence => repeated,
	 opts => []},
       #{name => resource, fnum => 4, rnum => 4,
	 type => {msg, resource}, occurrence => optional,
	 opts => []}]},
     {{msg, metric_descriptor},
      [#{name => name, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []},
       #{name => unit, fnum => 3, rnum => 4, type => string,
	 occurrence => optional, opts => []},
       #{name => type, fnum => 4, rnum => 5,
	 type => {enum, 'metric_descriptor.Type'},
	 occurrence => optional, opts => []},
       #{name => label_keys, fnum => 5, rnum => 6,
	 type => {msg, label_key}, occurrence => repeated,
	 opts => []}]},
     {{msg, label_key},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => description, fnum => 2, rnum => 3,
	 type => string, occurrence => optional, opts => []}]},
     {{msg, time_series},
      [#{name => start_timestamp, fnum => 1, rnum => 2,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => label_values, fnum => 2, rnum => 3,
	 type => {msg, label_value}, occurrence => repeated,
	 opts => []},
       #{name => points, fnum => 3, rnum => 4,
	 type => {msg, point}, occurrence => repeated,
	 opts => []}]},
     {{msg, label_value},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => has_value, fnum => 2, rnum => 3, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, point},
      [#{name => timestamp, fnum => 1, rnum => 2,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => value, rnum => 3,
	 fields =>
	     [#{name => int64_value, fnum => 2, rnum => 3,
		type => int64, occurrence => optional, opts => []},
	      #{name => double_value, fnum => 3, rnum => 3,
		type => double, occurrence => optional, opts => []},
	      #{name => distribution_value, fnum => 4, rnum => 3,
		type => {msg, distribution_value},
		occurrence => optional, opts => []},
	      #{name => summary_value, fnum => 5, rnum => 3,
		type => {msg, summary_value}, occurrence => optional,
		opts => []}]}]},
     {{msg, bucket_options},
      [#{name => type, rnum => 2,
	 fields =>
	     [#{name => explicit, fnum => 1, rnum => 2,
		type => {msg, explicit}, occurrence => optional,
		opts => []}]}]},
     {{msg, explicit},
      [#{name => bounds, fnum => 1, rnum => 2, type => double,
	 occurrence => repeated, opts => [packed]}]},
     {{msg, bucket},
      [#{name => count, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => exemplar, fnum => 2, rnum => 3,
	 type => {msg, exemplar}, occurrence => optional,
	 opts => []}]},
     {{msg, exemplar},
      [#{name => value, fnum => 1, rnum => 2, type => double,
	 occurrence => optional, opts => []},
       #{name => timestamp, fnum => 2, rnum => 3,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => attachments, fnum => 3, rnum => 4,
	 type => {map, string, string}, occurrence => repeated,
	 opts => []}]},
     {{msg, distribution_value},
      [#{name => count, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => sum, fnum => 2, rnum => 3, type => double,
	 occurrence => optional, opts => []},
       #{name => sum_of_squared_deviation, fnum => 3,
	 rnum => 4, type => double, occurrence => optional,
	 opts => []},
       #{name => bucket_options, fnum => 4, rnum => 5,
	 type => {msg, bucket_options}, occurrence => optional,
	 opts => []},
       #{name => buckets, fnum => 5, rnum => 6,
	 type => {msg, bucket}, occurrence => repeated,
	 opts => []}]},
     {{msg, snapshot},
      [#{name => count, fnum => 1, rnum => 2,
	 type => {msg, int_64_value}, occurrence => optional,
	 opts => []},
       #{name => sum, fnum => 2, rnum => 3,
	 type => {msg, double_value}, occurrence => optional,
	 opts => []},
       #{name => percentile_values, fnum => 3, rnum => 4,
	 type => {msg, value_at_percentile},
	 occurrence => repeated, opts => []}]},
     {{msg, value_at_percentile},
      [#{name => percentile, fnum => 1, rnum => 2,
	 type => double, occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => double,
	 occurrence => optional, opts => []}]},
     {{msg, summary_value},
      [#{name => count, fnum => 1, rnum => 2,
	 type => {msg, int_64_value}, occurrence => optional,
	 opts => []},
       #{name => sum, fnum => 2, rnum => 3,
	 type => {msg, double_value}, occurrence => optional,
	 opts => []},
       #{name => snapshot, fnum => 3, rnum => 4,
	 type => {msg, snapshot}, occurrence => optional,
	 opts => []}]},
     {{msg, double_value},
      [#{name => value, fnum => 1, rnum => 2, type => double,
	 occurrence => optional, opts => []}]},
     {{msg, float_value},
      [#{name => value, fnum => 1, rnum => 2, type => float,
	 occurrence => optional, opts => []}]},
     {{msg, int_64_value},
      [#{name => value, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, u_int_64_value},
      [#{name => value, fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, int_32_value},
      [#{name => value, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, u_int_32_value},
      [#{name => value, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, bool_value},
      [#{name => value, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, string_value},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, bytes_value},
      [#{name => value, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []}]},
     {{msg, resource},
      [#{name => type, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => labels, fnum => 2, rnum => 3,
	 type => {map, string, string}, occurrence => repeated,
	 opts => []}]}].


get_msg_names() ->
    [export_metrics_service_request,
     export_metrics_service_response, node,
     process_identifier, library_info, service_info,
     timestamp, metric, metric_descriptor, label_key,
     time_series, label_value, point, bucket_options,
     explicit, bucket, exemplar, distribution_value,
     snapshot, value_at_percentile, summary_value,
     double_value, float_value, int_64_value, u_int_64_value,
     int_32_value, u_int_32_value, bool_value, string_value,
     bytes_value, resource].


get_group_names() -> [].


get_msg_or_group_names() ->
    [export_metrics_service_request,
     export_metrics_service_response, node,
     process_identifier, library_info, service_info,
     timestamp, metric, metric_descriptor, label_key,
     time_series, label_value, point, bucket_options,
     explicit, bucket, exemplar, distribution_value,
     snapshot, value_at_percentile, summary_value,
     double_value, float_value, int_64_value, u_int_64_value,
     int_32_value, u_int_32_value, bool_value, string_value,
     bytes_value, resource].


get_enum_names() ->
    ['library_info.Language', 'metric_descriptor.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(export_metrics_service_request) ->
    [#{name => node, fnum => 1, rnum => 2,
       type => {msg, node}, occurrence => optional,
       opts => []},
     #{name => metrics, fnum => 2, rnum => 3,
       type => {msg, metric}, occurrence => repeated,
       opts => []},
     #{name => resource, fnum => 3, rnum => 4,
       type => {msg, resource}, occurrence => optional,
       opts => []}];
find_msg_def(export_metrics_service_response) -> [];
find_msg_def(node) ->
    [#{name => identifier, fnum => 1, rnum => 2,
       type => {msg, process_identifier},
       occurrence => optional, opts => []},
     #{name => library_info, fnum => 2, rnum => 3,
       type => {msg, library_info}, occurrence => optional,
       opts => []},
     #{name => service_info, fnum => 3, rnum => 4,
       type => {msg, service_info}, occurrence => optional,
       opts => []},
     #{name => attributes, fnum => 4, rnum => 5,
       type => {map, string, string}, occurrence => repeated,
       opts => []}];
find_msg_def(process_identifier) ->
    [#{name => host_name, fnum => 1, rnum => 2,
       type => string, occurrence => optional, opts => []},
     #{name => pid, fnum => 2, rnum => 3, type => uint32,
       occurrence => optional, opts => []},
     #{name => start_timestamp, fnum => 3, rnum => 4,
       type => {msg, timestamp}, occurrence => optional,
       opts => []}];
find_msg_def(library_info) ->
    [#{name => language, fnum => 1, rnum => 2,
       type => {enum, 'library_info.Language'},
       occurrence => optional, opts => []},
     #{name => exporter_version, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => core_library_version, fnum => 3, rnum => 4,
       type => string, occurrence => optional, opts => []}];
find_msg_def(service_info) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(timestamp) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(metric) ->
    [#{name => descriptor, rnum => 2,
       fields =>
	   [#{name => metric_descriptor, fnum => 1, rnum => 2,
	      type => {msg, metric_descriptor},
	      occurrence => optional, opts => []},
	    #{name => name, fnum => 2, rnum => 2, type => string,
	      occurrence => optional, opts => []}]},
     #{name => timeseries, fnum => 3, rnum => 3,
       type => {msg, time_series}, occurrence => repeated,
       opts => []},
     #{name => resource, fnum => 4, rnum => 4,
       type => {msg, resource}, occurrence => optional,
       opts => []}];
find_msg_def(metric_descriptor) ->
    [#{name => name, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []},
     #{name => unit, fnum => 3, rnum => 4, type => string,
       occurrence => optional, opts => []},
     #{name => type, fnum => 4, rnum => 5,
       type => {enum, 'metric_descriptor.Type'},
       occurrence => optional, opts => []},
     #{name => label_keys, fnum => 5, rnum => 6,
       type => {msg, label_key}, occurrence => repeated,
       opts => []}];
find_msg_def(label_key) ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => description, fnum => 2, rnum => 3,
       type => string, occurrence => optional, opts => []}];
find_msg_def(time_series) ->
    [#{name => start_timestamp, fnum => 1, rnum => 2,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => label_values, fnum => 2, rnum => 3,
       type => {msg, label_value}, occurrence => repeated,
       opts => []},
     #{name => points, fnum => 3, rnum => 4,
       type => {msg, point}, occurrence => repeated,
       opts => []}];
find_msg_def(label_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => has_value, fnum => 2, rnum => 3, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(point) ->
    [#{name => timestamp, fnum => 1, rnum => 2,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => value, rnum => 3,
       fields =>
	   [#{name => int64_value, fnum => 2, rnum => 3,
	      type => int64, occurrence => optional, opts => []},
	    #{name => double_value, fnum => 3, rnum => 3,
	      type => double, occurrence => optional, opts => []},
	    #{name => distribution_value, fnum => 4, rnum => 3,
	      type => {msg, distribution_value},
	      occurrence => optional, opts => []},
	    #{name => summary_value, fnum => 5, rnum => 3,
	      type => {msg, summary_value}, occurrence => optional,
	      opts => []}]}];
find_msg_def(bucket_options) ->
    [#{name => type, rnum => 2,
       fields =>
	   [#{name => explicit, fnum => 1, rnum => 2,
	      type => {msg, explicit}, occurrence => optional,
	      opts => []}]}];
find_msg_def(explicit) ->
    [#{name => bounds, fnum => 1, rnum => 2, type => double,
       occurrence => repeated, opts => [packed]}];
find_msg_def(bucket) ->
    [#{name => count, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => exemplar, fnum => 2, rnum => 3,
       type => {msg, exemplar}, occurrence => optional,
       opts => []}];
find_msg_def(exemplar) ->
    [#{name => value, fnum => 1, rnum => 2, type => double,
       occurrence => optional, opts => []},
     #{name => timestamp, fnum => 2, rnum => 3,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => attachments, fnum => 3, rnum => 4,
       type => {map, string, string}, occurrence => repeated,
       opts => []}];
find_msg_def(distribution_value) ->
    [#{name => count, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => sum, fnum => 2, rnum => 3, type => double,
       occurrence => optional, opts => []},
     #{name => sum_of_squared_deviation, fnum => 3,
       rnum => 4, type => double, occurrence => optional,
       opts => []},
     #{name => bucket_options, fnum => 4, rnum => 5,
       type => {msg, bucket_options}, occurrence => optional,
       opts => []},
     #{name => buckets, fnum => 5, rnum => 6,
       type => {msg, bucket}, occurrence => repeated,
       opts => []}];
find_msg_def(snapshot) ->
    [#{name => count, fnum => 1, rnum => 2,
       type => {msg, int_64_value}, occurrence => optional,
       opts => []},
     #{name => sum, fnum => 2, rnum => 3,
       type => {msg, double_value}, occurrence => optional,
       opts => []},
     #{name => percentile_values, fnum => 3, rnum => 4,
       type => {msg, value_at_percentile},
       occurrence => repeated, opts => []}];
find_msg_def(value_at_percentile) ->
    [#{name => percentile, fnum => 1, rnum => 2,
       type => double, occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => double,
       occurrence => optional, opts => []}];
find_msg_def(summary_value) ->
    [#{name => count, fnum => 1, rnum => 2,
       type => {msg, int_64_value}, occurrence => optional,
       opts => []},
     #{name => sum, fnum => 2, rnum => 3,
       type => {msg, double_value}, occurrence => optional,
       opts => []},
     #{name => snapshot, fnum => 3, rnum => 4,
       type => {msg, snapshot}, occurrence => optional,
       opts => []}];
find_msg_def(double_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => double,
       occurrence => optional, opts => []}];
find_msg_def(float_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => float,
       occurrence => optional, opts => []}];
find_msg_def(int_64_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []}];
find_msg_def(u_int_64_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def(int_32_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(u_int_32_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(bool_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(string_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(bytes_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(resource) ->
    [#{name => type, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => labels, fnum => 2, rnum => 3,
       type => {map, string, string}, occurrence => repeated,
       opts => []}];
find_msg_def(_) -> error.


find_enum_def('library_info.Language') ->
    [{'LANGUAGE_UNSPECIFIED', 0}, {'CPP', 1},
     {'C_SHARP', 2}, {'ERLANG', 3}, {'GO_LANG', 4},
     {'JAVA', 5}, {'NODE_JS', 6}, {'PHP', 7}, {'PYTHON', 8},
     {'RUBY', 9}];
find_enum_def('metric_descriptor.Type') ->
    [{'UNSPECIFIED', 0}, {'GAUGE_INT64', 1},
     {'GAUGE_DOUBLE', 2}, {'GAUGE_DISTRIBUTION', 3},
     {'CUMULATIVE_INT64', 4}, {'CUMULATIVE_DOUBLE', 5},
     {'CUMULATIVE_DISTRIBUTION', 6}, {'SUMMARY', 7}];
find_enum_def(_) -> error.


enum_symbol_by_value('library_info.Language', Value) ->
    'enum_symbol_by_value_library_info.Language'(Value);
enum_symbol_by_value('metric_descriptor.Type', Value) ->
    'enum_symbol_by_value_metric_descriptor.Type'(Value).


enum_value_by_symbol('library_info.Language', Sym) ->
    'enum_value_by_symbol_library_info.Language'(Sym);
enum_value_by_symbol('metric_descriptor.Type', Sym) ->
    'enum_value_by_symbol_metric_descriptor.Type'(Sym).


'enum_symbol_by_value_library_info.Language'(0) ->
    'LANGUAGE_UNSPECIFIED';
'enum_symbol_by_value_library_info.Language'(1) ->
    'CPP';
'enum_symbol_by_value_library_info.Language'(2) ->
    'C_SHARP';
'enum_symbol_by_value_library_info.Language'(3) ->
    'ERLANG';
'enum_symbol_by_value_library_info.Language'(4) ->
    'GO_LANG';
'enum_symbol_by_value_library_info.Language'(5) ->
    'JAVA';
'enum_symbol_by_value_library_info.Language'(6) ->
    'NODE_JS';
'enum_symbol_by_value_library_info.Language'(7) ->
    'PHP';
'enum_symbol_by_value_library_info.Language'(8) ->
    'PYTHON';
'enum_symbol_by_value_library_info.Language'(9) ->
    'RUBY'.


'enum_value_by_symbol_library_info.Language'('LANGUAGE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_library_info.Language'('CPP') ->
    1;
'enum_value_by_symbol_library_info.Language'('C_SHARP') ->
    2;
'enum_value_by_symbol_library_info.Language'('ERLANG') ->
    3;
'enum_value_by_symbol_library_info.Language'('GO_LANG') ->
    4;
'enum_value_by_symbol_library_info.Language'('JAVA') ->
    5;
'enum_value_by_symbol_library_info.Language'('NODE_JS') ->
    6;
'enum_value_by_symbol_library_info.Language'('PHP') ->
    7;
'enum_value_by_symbol_library_info.Language'('PYTHON') ->
    8;
'enum_value_by_symbol_library_info.Language'('RUBY') ->
    9.

'enum_symbol_by_value_metric_descriptor.Type'(0) ->
    'UNSPECIFIED';
'enum_symbol_by_value_metric_descriptor.Type'(1) ->
    'GAUGE_INT64';
'enum_symbol_by_value_metric_descriptor.Type'(2) ->
    'GAUGE_DOUBLE';
'enum_symbol_by_value_metric_descriptor.Type'(3) ->
    'GAUGE_DISTRIBUTION';
'enum_symbol_by_value_metric_descriptor.Type'(4) ->
    'CUMULATIVE_INT64';
'enum_symbol_by_value_metric_descriptor.Type'(5) ->
    'CUMULATIVE_DOUBLE';
'enum_symbol_by_value_metric_descriptor.Type'(6) ->
    'CUMULATIVE_DISTRIBUTION';
'enum_symbol_by_value_metric_descriptor.Type'(7) ->
    'SUMMARY'.


'enum_value_by_symbol_metric_descriptor.Type'('UNSPECIFIED') ->
    0;
'enum_value_by_symbol_metric_descriptor.Type'('GAUGE_INT64') ->
    1;
'enum_value_by_symbol_metric_descriptor.Type'('GAUGE_DOUBLE') ->
    2;
'enum_value_by_symbol_metric_descriptor.Type'('GAUGE_DISTRIBUTION') ->
    3;
'enum_value_by_symbol_metric_descriptor.Type'('CUMULATIVE_INT64') ->
    4;
'enum_value_by_symbol_metric_descriptor.Type'('CUMULATIVE_DOUBLE') ->
    5;
'enum_value_by_symbol_metric_descriptor.Type'('CUMULATIVE_DISTRIBUTION') ->
    6;
'enum_value_by_symbol_metric_descriptor.Type'('SUMMARY') ->
    7.


get_service_names() ->
    ['opencensus.proto.agent.metrics.v1.MetricsService'].


get_service_def('opencensus.proto.agent.metrics.v1.MetricsService') ->
    {{service,
      'opencensus.proto.agent.metrics.v1.MetricsService'},
     [#{name => 'Export',
	input => export_metrics_service_request,
	output => export_metrics_service_response,
	input_stream => true, output_stream => true,
	opts => []}]};
get_service_def(_) -> error.


get_rpc_names('opencensus.proto.agent.metrics.v1.MetricsService') ->
    ['Export'];
get_rpc_names(_) -> error.


find_rpc_def('opencensus.proto.agent.metrics.v1.MetricsService',
	     RpcName) ->
    'find_rpc_def_opencensus.proto.agent.metrics.v1.MetricsService'(RpcName);
find_rpc_def(_, _) -> error.


'find_rpc_def_opencensus.proto.agent.metrics.v1.MetricsService'('Export') ->
    #{name => 'Export',
      input => export_metrics_service_request,
      output => export_metrics_service_response,
      input_stream => true, output_stream => true,
      opts => []};
'find_rpc_def_opencensus.proto.agent.metrics.v1.MetricsService'(_) ->
    error.


fetch_rpc_def(ServiceName, RpcName) ->
    case find_rpc_def(ServiceName, RpcName) of
      Def when is_map(Def) -> Def;
      error ->
	  erlang:error({no_such_rpc, ServiceName, RpcName})
    end.


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
fqbin_to_service_name(<<"opencensus.proto.agent.metrics.v1.MetricsService">>) ->
    'opencensus.proto.agent.metrics.v1.MetricsService';
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
service_name_to_fqbin('opencensus.proto.agent.metrics.v1.MetricsService') ->
    <<"opencensus.proto.agent.metrics.v1.MetricsService">>;
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
fqbins_to_service_and_rpc_name(<<"opencensus.proto.agent.metrics.v1.MetricsService">>, <<"Export">>) ->
    {'opencensus.proto.agent.metrics.v1.MetricsService',
     'Export'};
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
service_and_rpc_name_to_fqbins('opencensus.proto.agent.metrics.v1.MetricsService',
			       'Export') ->
    {<<"opencensus.proto.agent.metrics.v1.MetricsService">>, <<"Export">>};
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"opencensus.proto.agent.metrics.v1.ExportMetricsServiceRequest">>) ->
    export_metrics_service_request;
fqbin_to_msg_name(<<"opencensus.proto.agent.metrics.v1.ExportMetricsServiceResponse">>) ->
    export_metrics_service_response;
fqbin_to_msg_name(<<"opencensus.proto.agent.common.v1.Node">>) -> node;
fqbin_to_msg_name(<<"opencensus.proto.agent.common.v1.ProcessIdentifier">>) -> process_identifier;
fqbin_to_msg_name(<<"opencensus.proto.agent.common.v1.LibraryInfo">>) -> library_info;
fqbin_to_msg_name(<<"opencensus.proto.agent.common.v1.ServiceInfo">>) -> service_info;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.Metric">>) -> metric;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.MetricDescriptor">>) -> metric_descriptor;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.LabelKey">>) -> label_key;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.TimeSeries">>) -> time_series;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.LabelValue">>) -> label_value;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.Point">>) -> point;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.DistributionValue.BucketOptions">>) -> bucket_options;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.DistributionValue.BucketOptions.Explicit">>) -> explicit;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.DistributionValue.Bucket">>) -> bucket;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.DistributionValue.Exemplar">>) -> exemplar;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.DistributionValue">>) -> distribution_value;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.SummaryValue.Snapshot">>) -> snapshot;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.SummaryValue.Snapshot.ValueAtPercentile">>) -> value_at_percentile;
fqbin_to_msg_name(<<"opencensus.proto.metrics.v1.SummaryValue">>) -> summary_value;
fqbin_to_msg_name(<<"google.protobuf.DoubleValue">>) -> double_value;
fqbin_to_msg_name(<<"google.protobuf.FloatValue">>) -> float_value;
fqbin_to_msg_name(<<"google.protobuf.Int64Value">>) -> int_64_value;
fqbin_to_msg_name(<<"google.protobuf.UInt64Value">>) -> u_int_64_value;
fqbin_to_msg_name(<<"google.protobuf.Int32Value">>) -> int_32_value;
fqbin_to_msg_name(<<"google.protobuf.UInt32Value">>) -> u_int_32_value;
fqbin_to_msg_name(<<"google.protobuf.BoolValue">>) -> bool_value;
fqbin_to_msg_name(<<"google.protobuf.StringValue">>) -> string_value;
fqbin_to_msg_name(<<"google.protobuf.BytesValue">>) -> bytes_value;
fqbin_to_msg_name(<<"opencensus.proto.resource.v1.Resource">>) -> resource;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(export_metrics_service_request) ->
    <<"opencensus.proto.agent.metrics.v1.ExportMetricsServiceRequest">>;
msg_name_to_fqbin(export_metrics_service_response) ->
    <<"opencensus.proto.agent.metrics.v1.ExportMetricsServiceResponse">>;
msg_name_to_fqbin(node) -> <<"opencensus.proto.agent.common.v1.Node">>;
msg_name_to_fqbin(process_identifier) -> <<"opencensus.proto.agent.common.v1.ProcessIdentifier">>;
msg_name_to_fqbin(library_info) -> <<"opencensus.proto.agent.common.v1.LibraryInfo">>;
msg_name_to_fqbin(service_info) -> <<"opencensus.proto.agent.common.v1.ServiceInfo">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(metric) -> <<"opencensus.proto.metrics.v1.Metric">>;
msg_name_to_fqbin(metric_descriptor) -> <<"opencensus.proto.metrics.v1.MetricDescriptor">>;
msg_name_to_fqbin(label_key) -> <<"opencensus.proto.metrics.v1.LabelKey">>;
msg_name_to_fqbin(time_series) -> <<"opencensus.proto.metrics.v1.TimeSeries">>;
msg_name_to_fqbin(label_value) -> <<"opencensus.proto.metrics.v1.LabelValue">>;
msg_name_to_fqbin(point) -> <<"opencensus.proto.metrics.v1.Point">>;
msg_name_to_fqbin(bucket_options) -> <<"opencensus.proto.metrics.v1.DistributionValue.BucketOptions">>;
msg_name_to_fqbin(explicit) -> <<"opencensus.proto.metrics.v1.DistributionValue.BucketOptions.Explicit">>;
msg_name_to_fqbin(bucket) -> <<"opencensus.proto.metrics.v1.DistributionValue.Bucket">>;
msg_name_to_fqbin(exemplar) -> <<"opencensus.proto.metrics.v1.DistributionValue.Exemplar">>;
msg_name_to_fqbin(distribution_value) -> <<"opencensus.proto.metrics.v1.DistributionValue">>;
msg_name_to_fqbin(snapshot) -> <<"opencensus.proto.metrics.v1.SummaryValue.Snapshot">>;
msg_name_to_fqbin(value_at_percentile) -> <<"opencensus.proto.metrics.v1.SummaryValue.Snapshot.ValueAtPercentile">>;
msg_name_to_fqbin(summary_value) -> <<"opencensus.proto.metrics.v1.SummaryValue">>;
msg_name_to_fqbin(double_value) -> <<"google.protobuf.DoubleValue">>;
msg_name_to_fqbin(float_value) -> <<"google.protobuf.FloatValue">>;
msg_name_to_fqbin(int_64_value) -> <<"google.protobuf.Int64Value">>;
msg_name_to_fqbin(u_int_64_value) -> <<"google.protobuf.UInt64Value">>;
msg_name_to_fqbin(int_32_value) -> <<"google.protobuf.Int32Value">>;
msg_name_to_fqbin(u_int_32_value) -> <<"google.protobuf.UInt32Value">>;
msg_name_to_fqbin(bool_value) -> <<"google.protobuf.BoolValue">>;
msg_name_to_fqbin(string_value) -> <<"google.protobuf.StringValue">>;
msg_name_to_fqbin(bytes_value) -> <<"google.protobuf.BytesValue">>;
msg_name_to_fqbin(resource) -> <<"opencensus.proto.resource.v1.Resource">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"opencensus.proto.agent.common.v1.LibraryInfo.Language">>) -> 'library_info.Language';
fqbin_to_enum_name(<<"opencensus.proto.metrics.v1.MetricDescriptor.Type">>) -> 'metric_descriptor.Type';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('library_info.Language') -> <<"opencensus.proto.agent.common.v1.LibraryInfo.Language">>;
enum_name_to_fqbin('metric_descriptor.Type') -> <<"opencensus.proto.metrics.v1.MetricDescriptor.Type">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() ->
    'opencensus.proto.agent.metrics.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "metrics_service.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["metrics_service.proto", "common.proto",
     "timestamp.proto", "metrics.proto", "wrappers.proto",
     "resource.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["metrics_service", "common", "timestamp", "metrics",
     "wrappers", "resource"].


get_msg_containment("metrics_service") ->
    [export_metrics_service_request,
     export_metrics_service_response];
get_msg_containment("common") ->
    [library_info, node, process_identifier, service_info];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment("metrics") ->
    [distribution_value, bucket, bucket_options, explicit,
     exemplar, label_key, label_value, metric,
     metric_descriptor, point, summary_value, snapshot,
     value_at_percentile, time_series];
get_msg_containment("wrappers") ->
    [bool_value, bytes_value, double_value, float_value,
     int_32_value, int_64_value, string_value,
     u_int_32_value, u_int_64_value];
get_msg_containment("resource") -> [resource];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("metrics_service") ->
    'opencensus.proto.agent.metrics.v1';
get_pkg_containment("common") ->
    'opencensus.proto.agent.common.v1';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("metrics") ->
    'opencensus.proto.metrics.v1';
get_pkg_containment("wrappers") -> 'google.protobuf';
get_pkg_containment("resource") ->
    'opencensus.proto.resource.v1';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("metrics_service") ->
    ['opencensus.proto.agent.metrics.v1.MetricsService'];
get_service_containment("common") -> [];
get_service_containment("timestamp") -> [];
get_service_containment("metrics") -> [];
get_service_containment("wrappers") -> [];
get_service_containment("resource") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("metrics_service") ->
    [{'opencensus.proto.agent.metrics.v1.MetricsService',
      'Export'}];
get_rpc_containment("common") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment("metrics") -> [];
get_rpc_containment("wrappers") -> [];
get_rpc_containment("resource") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("metrics_service") -> [];
get_enum_containment("common") ->
    ['library_info.Language'];
get_enum_containment("timestamp") -> [];
get_enum_containment("metrics") ->
    ['metric_descriptor.Type'];
get_enum_containment("wrappers") -> [];
get_enum_containment("resource") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.MetricDescriptor">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.DistributionValue.Exemplar">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.agent.common.v1.ProcessIdentifier">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.TimeSeries">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.Metric">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.DistributionValue.BucketOptions">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.SummaryValue.Snapshot">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.Point">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.DistributionValue.BucketOptions.Explicit">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.DistributionValue.Bucket">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.agent.metrics.v1.ExportMetricsServiceRequest">>) ->
    "metrics_service";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.resource.v1.Resource">>) -> "resource";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.UInt64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.UInt32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.StringValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Int64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Int32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.FloatValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.DoubleValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.BytesValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.BoolValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.SummaryValue.Snapshot.ValueAtPercentile">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.SummaryValue">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.LabelValue">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.DistributionValue">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.agent.common.v1.Node">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.agent.metrics.v1.ExportMetricsServiceResponse">>) ->
    "metrics_service";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.metrics.v1.LabelKey">>) -> "metrics";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.agent.common.v1.ServiceInfo">>) -> "common";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.agent.common.v1.LibraryInfo">>) -> "common";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


get_proto_by_service_name_as_fqbin(<<"opencensus.proto.agent.metrics.v1.MetricsService">>) ->
    "metrics_service";
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"opencensus.proto.metrics.v1.MetricDescriptor.Type">>) -> "metrics";
get_proto_by_enum_name_as_fqbin(<<"opencensus.proto.agent.common.v1.LibraryInfo.Language">>) -> "common";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.resource.v1">>) ->
    ["resource"];
get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.metrics.v1">>) -> ["metrics"];
get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.agent.common.v1">>) -> ["common"];
get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.agent.metrics.v1">>) ->
    ["metrics_service"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["timestamp", "wrappers"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
