%% -*- coding: utf-8 -*-
%% @private
%% Automatically generated, do not edit
%% Generated by gpb_compile version 4.7.3
-module(dump_pb).

-export([encode_msg/2, encode_msg/3]).
-export([decode_msg/2, decode_msg/3]).
-export([merge_msgs/3, merge_msgs/4]).
-export([verify_msg/2, verify_msg/3]).
-export([get_msg_defs/0]).
-export([get_msg_names/0]).
-export([get_group_names/0]).
-export([get_msg_or_group_names/0]).
-export([get_enum_names/0]).
-export([find_msg_def/1, fetch_msg_def/1]).
-export([find_enum_def/1, fetch_enum_def/1]).
-export([enum_symbol_by_value/2, enum_value_by_symbol/2]).
-export(['enum_symbol_by_value_span.SpanKind'/1, 'enum_value_by_symbol_span.SpanKind'/1]).
-export(['enum_symbol_by_value_message_event.Type'/1, 'enum_value_by_symbol_message_event.Type'/1]).
-export(['enum_symbol_by_value_link.Type'/1, 'enum_value_by_symbol_link.Type'/1]).
-export([get_service_names/0]).
-export([get_service_def/1]).
-export([get_rpc_names/1]).
-export([find_rpc_def/2, fetch_rpc_def/2]).
-export([fqbin_to_service_name/1]).
-export([service_name_to_fqbin/1]).
-export([fqbins_to_service_and_rpc_name/2]).
-export([service_and_rpc_name_to_fqbins/2]).
-export([fqbin_to_msg_name/1]).
-export([msg_name_to_fqbin/1]).
-export([fqbin_to_enum_name/1]).
-export([enum_name_to_fqbin/1]).
-export([get_package_name/0]).
-export([uses_packages/0]).
-export([source_basename/0]).
-export([get_all_source_basenames/0]).
-export([get_all_proto_names/0]).
-export([get_msg_containment/1]).
-export([get_pkg_containment/1]).
-export([get_service_containment/1]).
-export([get_rpc_containment/1]).
-export([get_enum_containment/1]).
-export([get_proto_by_msg_name_as_fqbin/1]).
-export([get_proto_by_service_name_as_fqbin/1]).
-export([get_proto_by_enum_name_as_fqbin/1]).
-export([get_protos_by_pkg_name_as_fqbin/1]).
-export([gpb_version_as_string/0, gpb_version_as_list/0]).



-spec encode_msg(map(), atom()) -> binary().
encode_msg(Msg, MsgName) when is_atom(MsgName) ->
    encode_msg(Msg, MsgName, []).

-spec encode_msg(map(), atom(), list()) -> binary().
encode_msg(Msg, MsgName, Opts) ->
    case proplists:get_bool(verify, Opts) of
      true -> verify_msg(Msg, MsgName, Opts);
      false -> ok
    end,
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      dump_spans ->
	  encode_msg_dump_spans(id(Msg, TrUserData), TrUserData);
      tracestate ->
	  encode_msg_tracestate(id(Msg, TrUserData), TrUserData);
      entry ->
	  encode_msg_entry(id(Msg, TrUserData), TrUserData);
      attributes ->
	  encode_msg_attributes(id(Msg, TrUserData), TrUserData);
      time_event ->
	  encode_msg_time_event(id(Msg, TrUserData), TrUserData);
      message_event ->
	  encode_msg_message_event(id(Msg, TrUserData),
				   TrUserData);
      annotation ->
	  encode_msg_annotation(id(Msg, TrUserData), TrUserData);
      time_events ->
	  encode_msg_time_events(id(Msg, TrUserData), TrUserData);
      link ->
	  encode_msg_link(id(Msg, TrUserData), TrUserData);
      links ->
	  encode_msg_links(id(Msg, TrUserData), TrUserData);
      span ->
	  encode_msg_span(id(Msg, TrUserData), TrUserData);
      status ->
	  encode_msg_status(id(Msg, TrUserData), TrUserData);
      attribute_value ->
	  encode_msg_attribute_value(id(Msg, TrUserData),
				     TrUserData);
      stack_frame ->
	  encode_msg_stack_frame(id(Msg, TrUserData), TrUserData);
      stack_frames ->
	  encode_msg_stack_frames(id(Msg, TrUserData),
				  TrUserData);
      stack_trace ->
	  encode_msg_stack_trace(id(Msg, TrUserData), TrUserData);
      module ->
	  encode_msg_module(id(Msg, TrUserData), TrUserData);
      truncatable_string ->
	  encode_msg_truncatable_string(id(Msg, TrUserData),
					TrUserData);
      resource ->
	  encode_msg_resource(id(Msg, TrUserData), TrUserData);
      timestamp ->
	  encode_msg_timestamp(id(Msg, TrUserData), TrUserData);
      double_value ->
	  encode_msg_double_value(id(Msg, TrUserData),
				  TrUserData);
      float_value ->
	  encode_msg_float_value(id(Msg, TrUserData), TrUserData);
      int_64_value ->
	  encode_msg_int_64_value(id(Msg, TrUserData),
				  TrUserData);
      u_int_64_value ->
	  encode_msg_u_int_64_value(id(Msg, TrUserData),
				    TrUserData);
      int_32_value ->
	  encode_msg_int_32_value(id(Msg, TrUserData),
				  TrUserData);
      u_int_32_value ->
	  encode_msg_u_int_32_value(id(Msg, TrUserData),
				    TrUserData);
      bool_value ->
	  encode_msg_bool_value(id(Msg, TrUserData), TrUserData);
      string_value ->
	  encode_msg_string_value(id(Msg, TrUserData),
				  TrUserData);
      bytes_value ->
	  encode_msg_bytes_value(id(Msg, TrUserData), TrUserData)
    end.


encode_msg_dump_spans(Msg, TrUserData) ->
    encode_msg_dump_spans(Msg, <<>>, TrUserData).


encode_msg_dump_spans(#{} = M, Bin, TrUserData) ->
    case M of
      #{spans := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true -> e_field_dump_spans_spans(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_tracestate(Msg, TrUserData) ->
    encode_msg_tracestate(Msg, <<>>, TrUserData).


encode_msg_tracestate(#{} = M, Bin, TrUserData) ->
    case M of
      #{entries := F1} ->
	  TrF1 = id(F1, TrUserData),
	  if TrF1 == [] -> Bin;
	     true ->
		 e_field_tracestate_entries(TrF1, Bin, TrUserData)
	  end;
      _ -> Bin
    end.

encode_msg_entry(Msg, TrUserData) ->
    encode_msg_entry(Msg, <<>>, TrUserData).


encode_msg_entry(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{key := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_attributes(Msg, TrUserData) ->
    encode_msg_attributes(Msg, <<>>, TrUserData).


encode_msg_attributes(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{attribute_map := F1} ->
	       TrF1 = 'tr_encode_attributes.attribute_map'(F1,
							   TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_attributes_attribute_map(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{dropped_attributes_count := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_time_event(Msg, TrUserData) ->
    encode_msg_time_event(Msg, <<>>, TrUserData).


encode_msg_time_event(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{time := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_time_event_time(TrF1, <<Bin/binary, 10>>,
						 TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{value := F2} ->
	  case id(F2, TrUserData) of
	    {annotation, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_mfield_time_event_annotation(TrTF2, <<B1/binary, 18>>,
						 TrUserData)
		end;
	    {message_event, TF2} ->
		begin
		  TrTF2 = id(TF2, TrUserData),
		  e_mfield_time_event_message_event(TrTF2,
						    <<B1/binary, 26>>,
						    TrUserData)
		end
	  end;
      _ -> B1
    end.

encode_msg_message_event(Msg, TrUserData) ->
    encode_msg_message_event(Msg, <<>>, TrUserData).


encode_msg_message_event(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 'TYPE_UNSPECIFIED'; TrF1 =:= 0 -> Bin;
		    true ->
			'e_enum_message_event.Type'(TrF1, <<Bin/binary, 8>>,
						    TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{uncompressed_size := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 0 -> B2;
		    true -> e_varint(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{compressed_size := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= 0 -> B3;
	       true -> e_varint(TrF4, <<B3/binary, 32>>, TrUserData)
	    end
	  end;
      _ -> B3
    end.

encode_msg_annotation(Msg, TrUserData) ->
    encode_msg_annotation(Msg, <<>>, TrUserData).


encode_msg_annotation(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{description := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_annotation_description(TrF1,
							<<Bin/binary, 10>>,
							TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{attributes := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_annotation_attributes(TrF2, <<B1/binary, 18>>,
						  TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_time_events(Msg, TrUserData) ->
    encode_msg_time_events(Msg, <<>>, TrUserData).


encode_msg_time_events(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{time_event := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_time_events_time_event(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{dropped_annotations_count := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= 0 -> B1;
		    true ->
			e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    case M of
      #{dropped_message_events_count := F3} ->
	  begin
	    TrF3 = id(F3, TrUserData),
	    if TrF3 =:= 0 -> B2;
	       true ->
		   e_type_int32(TrF3, <<B2/binary, 24>>, TrUserData)
	    end
	  end;
      _ -> B2
    end.

encode_msg_link(Msg, TrUserData) ->
    encode_msg_link(Msg, <<>>, TrUserData).


encode_msg_link(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{trace_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{span_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{type := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= 'TYPE_UNSPECIFIED'; TrF3 =:= 0 -> B2;
		    true ->
			'e_enum_link.Type'(TrF3, <<B2/binary, 24>>, TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    case M of
      #{attributes := F4} ->
	  begin
	    TrF4 = id(F4, TrUserData),
	    if TrF4 =:= undefined -> B3;
	       true ->
		   e_mfield_link_attributes(TrF4, <<B3/binary, 34>>,
					    TrUserData)
	    end
	  end;
      _ -> B3
    end.

encode_msg_links(Msg, TrUserData) ->
    encode_msg_links(Msg, <<>>, TrUserData).


encode_msg_links(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{link := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true -> e_field_links_link(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{dropped_links_count := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_span(Msg, TrUserData) ->
    encode_msg_span(Msg, <<>>, TrUserData).


encode_msg_span(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{trace_id := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case iolist_size(TrF1) of
		   0 -> Bin;
		   _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{span_id := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 case iolist_size(TrF2) of
		   0 -> B1;
		   _ -> e_type_bytes(TrF2, <<B1/binary, 18>>, TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{tracestate := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			e_mfield_span_tracestate(TrF3, <<B2/binary, 122>>,
						 TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{parent_span_id := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 case iolist_size(TrF4) of
		   0 -> B3;
		   _ -> e_type_bytes(TrF4, <<B3/binary, 26>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{name := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= undefined -> B4;
		    true ->
			e_mfield_span_name(TrF5, <<B4/binary, 34>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{kind := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= 'SPAN_KIND_UNSPECIFIED'; TrF6 =:= 0 -> B5;
		    true ->
			'e_enum_span.SpanKind'(TrF6, <<B5/binary, 112>>,
					       TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    B7 = case M of
	   #{start_time := F7} ->
	       begin
		 TrF7 = id(F7, TrUserData),
		 if TrF7 =:= undefined -> B6;
		    true ->
			e_mfield_span_start_time(TrF7, <<B6/binary, 42>>,
						 TrUserData)
		 end
	       end;
	   _ -> B6
	 end,
    B8 = case M of
	   #{end_time := F8} ->
	       begin
		 TrF8 = id(F8, TrUserData),
		 if TrF8 =:= undefined -> B7;
		    true ->
			e_mfield_span_end_time(TrF8, <<B7/binary, 50>>,
					       TrUserData)
		 end
	       end;
	   _ -> B7
	 end,
    B9 = case M of
	   #{attributes := F9} ->
	       begin
		 TrF9 = id(F9, TrUserData),
		 if TrF9 =:= undefined -> B8;
		    true ->
			e_mfield_span_attributes(TrF9, <<B8/binary, 58>>,
						 TrUserData)
		 end
	       end;
	   _ -> B8
	 end,
    B10 = case M of
	    #{stack_trace := F10} ->
		begin
		  TrF10 = id(F10, TrUserData),
		  if TrF10 =:= undefined -> B9;
		     true ->
			 e_mfield_span_stack_trace(TrF10, <<B9/binary, 66>>,
						   TrUserData)
		  end
		end;
	    _ -> B9
	  end,
    B11 = case M of
	    #{time_events := F11} ->
		begin
		  TrF11 = id(F11, TrUserData),
		  if TrF11 =:= undefined -> B10;
		     true ->
			 e_mfield_span_time_events(TrF11, <<B10/binary, 74>>,
						   TrUserData)
		  end
		end;
	    _ -> B10
	  end,
    B12 = case M of
	    #{links := F12} ->
		begin
		  TrF12 = id(F12, TrUserData),
		  if TrF12 =:= undefined -> B11;
		     true ->
			 e_mfield_span_links(TrF12, <<B11/binary, 82>>,
					     TrUserData)
		  end
		end;
	    _ -> B11
	  end,
    B13 = case M of
	    #{status := F13} ->
		begin
		  TrF13 = id(F13, TrUserData),
		  if TrF13 =:= undefined -> B12;
		     true ->
			 e_mfield_span_status(TrF13, <<B12/binary, 90>>,
					      TrUserData)
		  end
		end;
	    _ -> B12
	  end,
    B14 = case M of
	    #{resource := F14} ->
		begin
		  TrF14 = id(F14, TrUserData),
		  if TrF14 =:= undefined -> B13;
		     true ->
			 e_mfield_span_resource(TrF14, <<B13/binary, 130, 1>>,
						TrUserData)
		  end
		end;
	    _ -> B13
	  end,
    B15 = case M of
	    #{same_process_as_parent_span := F15} ->
		begin
		  TrF15 = id(F15, TrUserData),
		  if TrF15 =:= undefined -> B14;
		     true ->
			 e_mfield_span_same_process_as_parent_span(TrF15,
								   <<B14/binary,
								     98>>,
								   TrUserData)
		  end
		end;
	    _ -> B14
	  end,
    case M of
      #{child_span_count := F16} ->
	  begin
	    TrF16 = id(F16, TrUserData),
	    if TrF16 =:= undefined -> B15;
	       true ->
		   e_mfield_span_child_span_count(TrF16,
						  <<B15/binary, 106>>,
						  TrUserData)
	    end
	  end;
      _ -> B15
    end.

encode_msg_status(Msg, TrUserData) ->
    encode_msg_status(Msg, <<>>, TrUserData).


encode_msg_status(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{code := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{message := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    case is_empty_string(TrF2) of
	      true -> B1;
	      false ->
		  e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_attribute_value(Msg, TrUserData) ->
    encode_msg_attribute_value(Msg, <<>>, TrUserData).


encode_msg_attribute_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  case id(F1, TrUserData) of
	    {string_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_mfield_attribute_value_string_value(TrTF1,
							<<Bin/binary, 10>>,
							TrUserData)
		end;
	    {int_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_int64(TrTF1, <<Bin/binary, 16>>, TrUserData)
		end;
	    {bool_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_bool(TrTF1, <<Bin/binary, 24>>, TrUserData)
		end;
	    {double_value, TF1} ->
		begin
		  TrTF1 = id(TF1, TrUserData),
		  e_type_double(TrTF1, <<Bin/binary, 33>>, TrUserData)
		end
	  end;
      _ -> Bin
    end.

encode_msg_stack_frame(Msg, TrUserData) ->
    encode_msg_stack_frame(Msg, <<>>, TrUserData).


encode_msg_stack_frame(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{function_name := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_stack_frame_function_name(TrF1,
							   <<Bin/binary, 10>>,
							   TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    B2 = case M of
	   #{original_function_name := F2} ->
	       begin
		 TrF2 = id(F2, TrUserData),
		 if TrF2 =:= undefined -> B1;
		    true ->
			e_mfield_stack_frame_original_function_name(TrF2,
								    <<B1/binary,
								      18>>,
								    TrUserData)
		 end
	       end;
	   _ -> B1
	 end,
    B3 = case M of
	   #{file_name := F3} ->
	       begin
		 TrF3 = id(F3, TrUserData),
		 if TrF3 =:= undefined -> B2;
		    true ->
			e_mfield_stack_frame_file_name(TrF3, <<B2/binary, 26>>,
						       TrUserData)
		 end
	       end;
	   _ -> B2
	 end,
    B4 = case M of
	   #{line_number := F4} ->
	       begin
		 TrF4 = id(F4, TrUserData),
		 if TrF4 =:= 0 -> B3;
		    true ->
			e_type_int64(TrF4, <<B3/binary, 32>>, TrUserData)
		 end
	       end;
	   _ -> B3
	 end,
    B5 = case M of
	   #{column_number := F5} ->
	       begin
		 TrF5 = id(F5, TrUserData),
		 if TrF5 =:= 0 -> B4;
		    true ->
			e_type_int64(TrF5, <<B4/binary, 40>>, TrUserData)
		 end
	       end;
	   _ -> B4
	 end,
    B6 = case M of
	   #{load_module := F6} ->
	       begin
		 TrF6 = id(F6, TrUserData),
		 if TrF6 =:= undefined -> B5;
		    true ->
			e_mfield_stack_frame_load_module(TrF6,
							 <<B5/binary, 50>>,
							 TrUserData)
		 end
	       end;
	   _ -> B5
	 end,
    case M of
      #{source_version := F7} ->
	  begin
	    TrF7 = id(F7, TrUserData),
	    if TrF7 =:= undefined -> B6;
	       true ->
		   e_mfield_stack_frame_source_version(TrF7,
						       <<B6/binary, 58>>,
						       TrUserData)
	    end
	  end;
      _ -> B6
    end.

encode_msg_stack_frames(Msg, TrUserData) ->
    encode_msg_stack_frames(Msg, <<>>, TrUserData).


encode_msg_stack_frames(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{frame := F1} ->
	       TrF1 = id(F1, TrUserData),
	       if TrF1 == [] -> Bin;
		  true ->
		      e_field_stack_frames_frame(TrF1, Bin, TrUserData)
	       end;
	   _ -> Bin
	 end,
    case M of
      #{dropped_frames_count := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_stack_trace(Msg, TrUserData) ->
    encode_msg_stack_trace(Msg, <<>>, TrUserData).


encode_msg_stack_trace(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{stack_frames := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_stack_trace_stack_frames(TrF1,
							  <<Bin/binary, 10>>,
							  TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{stack_trace_hash_id := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true -> e_varint(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_module(Msg, TrUserData) ->
    encode_msg_module(Msg, <<>>, TrUserData).


encode_msg_module(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{module := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= undefined -> Bin;
		    true ->
			e_mfield_module_module(TrF1, <<Bin/binary, 10>>,
					       TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{build_id := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= undefined -> B1;
	       true ->
		   e_mfield_module_build_id(TrF2, <<B1/binary, 18>>,
					    TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_truncatable_string(Msg, TrUserData) ->
    encode_msg_truncatable_string(Msg, <<>>, TrUserData).


encode_msg_truncatable_string(#{} = M, Bin,
			      TrUserData) ->
    B1 = case M of
	   #{value := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{truncated_byte_count := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_resource(Msg, TrUserData) ->
    encode_msg_resource(Msg, <<>>, TrUserData).


encode_msg_resource(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{type := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 case is_empty_string(TrF1) of
		   true -> Bin;
		   false ->
		       e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{labels := F2} ->
	  TrF2 = 'tr_encode_resource.labels'(F2, TrUserData),
	  if TrF2 == [] -> B1;
	     true -> e_field_resource_labels(TrF2, B1, TrUserData)
	  end;
      _ -> B1
    end.

encode_msg_timestamp(Msg, TrUserData) ->
    encode_msg_timestamp(Msg, <<>>, TrUserData).


encode_msg_timestamp(#{} = M, Bin, TrUserData) ->
    B1 = case M of
	   #{seconds := F1} ->
	       begin
		 TrF1 = id(F1, TrUserData),
		 if TrF1 =:= 0 -> Bin;
		    true ->
			e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
		 end
	       end;
	   _ -> Bin
	 end,
    case M of
      #{nanos := F2} ->
	  begin
	    TrF2 = id(F2, TrUserData),
	    if TrF2 =:= 0 -> B1;
	       true ->
		   e_type_int32(TrF2, <<B1/binary, 16>>, TrUserData)
	    end
	  end;
      _ -> B1
    end.

encode_msg_double_value(Msg, TrUserData) ->
    encode_msg_double_value(Msg, <<>>, TrUserData).


encode_msg_double_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_double(TrF1, <<Bin/binary, 9>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_float_value(Msg, TrUserData) ->
    encode_msg_float_value(Msg, <<>>, TrUserData).


encode_msg_float_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0.0 -> Bin;
	       true ->
		   e_type_float(TrF1, <<Bin/binary, 13>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_int_64_value(Msg, TrUserData) ->
    encode_msg_int_64_value(Msg, <<>>, TrUserData).


encode_msg_int_64_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int64(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_u_int_64_value(Msg, TrUserData) ->
    encode_msg_u_int_64_value(Msg, <<>>, TrUserData).


encode_msg_u_int_64_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_int_32_value(Msg, TrUserData) ->
    encode_msg_int_32_value(Msg, <<>>, TrUserData).


encode_msg_int_32_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true ->
		   e_type_int32(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_u_int_32_value(Msg, TrUserData) ->
    encode_msg_u_int_32_value(Msg, <<>>, TrUserData).


encode_msg_u_int_32_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= 0 -> Bin;
	       true -> e_varint(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_bool_value(Msg, TrUserData) ->
    encode_msg_bool_value(Msg, <<>>, TrUserData).


encode_msg_bool_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    if TrF1 =:= false -> Bin;
	       true -> e_type_bool(TrF1, <<Bin/binary, 8>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_string_value(Msg, TrUserData) ->
    encode_msg_string_value(Msg, <<>>, TrUserData).


encode_msg_string_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case is_empty_string(TrF1) of
	      true -> Bin;
	      false ->
		  e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

encode_msg_bytes_value(Msg, TrUserData) ->
    encode_msg_bytes_value(Msg, <<>>, TrUserData).


encode_msg_bytes_value(#{} = M, Bin, TrUserData) ->
    case M of
      #{value := F1} ->
	  begin
	    TrF1 = id(F1, TrUserData),
	    case iolist_size(TrF1) of
	      0 -> Bin;
	      _ -> e_type_bytes(TrF1, <<Bin/binary, 10>>, TrUserData)
	    end
	  end;
      _ -> Bin
    end.

e_mfield_dump_spans_spans(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_span(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_dump_spans_spans([Elem | Rest], Bin,
			 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_dump_spans_spans(id(Elem, TrUserData),
				     Bin2, TrUserData),
    e_field_dump_spans_spans(Rest, Bin3, TrUserData);
e_field_dump_spans_spans([], Bin, _TrUserData) -> Bin.

e_mfield_tracestate_entries(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_entry(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_tracestate_entries([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_tracestate_entries(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_tracestate_entries(Rest, Bin3, TrUserData);
e_field_tracestate_entries([], Bin, _TrUserData) -> Bin.

e_mfield_attributes_attribute_map(Msg, Bin,
				  TrUserData) ->
    SubBin = 'encode_msg_map<string,attribute_value>'(Msg,
						      <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_attributes_attribute_map([Elem | Rest], Bin,
				 TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 =
	e_mfield_attributes_attribute_map('tr_encode_attributes.attribute_map[x]'(Elem,
										  TrUserData),
					  Bin2, TrUserData),
    e_field_attributes_attribute_map(Rest, Bin3,
				     TrUserData);
e_field_attributes_attribute_map([], Bin,
				 _TrUserData) ->
    Bin.

e_mfield_time_event_time(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_event_annotation(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_annotation(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_event_message_event(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_message_event(Msg, <<>>,
				      TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_annotation_description(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_annotation_attributes(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_attributes(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_time_events_time_event(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_time_event(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_time_events_time_event([Elem | Rest], Bin,
			       TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_time_events_time_event(id(Elem,
					      TrUserData),
					   Bin2, TrUserData),
    e_field_time_events_time_event(Rest, Bin3, TrUserData);
e_field_time_events_time_event([], Bin, _TrUserData) ->
    Bin.

e_mfield_link_attributes(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_attributes(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_links_link(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_link(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_links_link([Elem | Rest], Bin, TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_links_link(id(Elem, TrUserData), Bin2,
			       TrUserData),
    e_field_links_link(Rest, Bin3, TrUserData);
e_field_links_link([], Bin, _TrUserData) -> Bin.

e_mfield_span_tracestate(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_tracestate(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_name(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_start_time(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_end_time(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_timestamp(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_attributes(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_attributes(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_stack_trace(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_stack_trace(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_time_events(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_time_events(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_links(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_links(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_status(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_status(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_resource(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_resource(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_same_process_as_parent_span(Msg, Bin,
					  TrUserData) ->
    SubBin = encode_msg_bool_value(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_span_child_span_count(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_u_int_32_value(Msg, <<>>,
				       TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_attribute_value_string_value(Msg, Bin,
				      TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_function_name(Msg, Bin,
				   TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_original_function_name(Msg, Bin,
					    TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_file_name(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_load_module(Msg, Bin,
				 TrUserData) ->
    SubBin = encode_msg_module(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frame_source_version(Msg, Bin,
				    TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_stack_frames_frame(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_stack_frame(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_stack_frames_frame([Elem | Rest], Bin,
			   TrUserData) ->
    Bin2 = <<Bin/binary, 10>>,
    Bin3 = e_mfield_stack_frames_frame(id(Elem, TrUserData),
				       Bin2, TrUserData),
    e_field_stack_frames_frame(Rest, Bin3, TrUserData);
e_field_stack_frames_frame([], Bin, _TrUserData) -> Bin.

e_mfield_stack_trace_stack_frames(Msg, Bin,
				  TrUserData) ->
    SubBin = encode_msg_stack_frames(Msg, <<>>, TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_module_module(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_module_build_id(Msg, Bin, TrUserData) ->
    SubBin = encode_msg_truncatable_string(Msg, <<>>,
					   TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_mfield_resource_labels(Msg, Bin, TrUserData) ->
    SubBin = 'encode_msg_map<string,string>'(Msg, <<>>,
					     TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

e_field_resource_labels([Elem | Rest], Bin,
			TrUserData) ->
    Bin2 = <<Bin/binary, 18>>,
    Bin3 =
	e_mfield_resource_labels('tr_encode_resource.labels[x]'(Elem,
								TrUserData),
				 Bin2, TrUserData),
    e_field_resource_labels(Rest, Bin3, TrUserData);
e_field_resource_labels([], Bin, _TrUserData) -> Bin.

'encode_msg_map<string,string>'(#{key := F1,
				  value := F2},
				Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      e_type_string(TrF2, <<B1/binary, 18>>, TrUserData)
    end.

'encode_msg_map<string,attribute_value>'(#{key := F1,
					   value := F2},
					 Bin, TrUserData) ->
    B1 = begin
	   TrF1 = id(F1, TrUserData),
	   e_type_string(TrF1, <<Bin/binary, 10>>, TrUserData)
	 end,
    begin
      TrF2 = id(F2, TrUserData),
      'e_mfield_map<string,attribute_value>_value'(TrF2,
						   <<B1/binary, 18>>,
						   TrUserData)
    end.

'e_mfield_map<string,attribute_value>_value'(Msg, Bin,
					     TrUserData) ->
    SubBin = encode_msg_attribute_value(Msg, <<>>,
					TrUserData),
    Bin2 = e_varint(byte_size(SubBin), Bin),
    <<Bin2/binary, SubBin/binary>>.

'e_enum_span.SpanKind'('SPAN_KIND_UNSPECIFIED', Bin,
		       _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_span.SpanKind'('SERVER', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_span.SpanKind'('CLIENT', Bin, _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_span.SpanKind'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_message_event.Type'('TYPE_UNSPECIFIED', Bin,
			    _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_message_event.Type'('SENT', Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_message_event.Type'('RECEIVED', Bin,
			    _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_message_event.Type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

'e_enum_link.Type'('TYPE_UNSPECIFIED', Bin,
		   _TrUserData) ->
    <<Bin/binary, 0>>;
'e_enum_link.Type'('CHILD_LINKED_SPAN', Bin,
		   _TrUserData) ->
    <<Bin/binary, 1>>;
'e_enum_link.Type'('PARENT_LINKED_SPAN', Bin,
		   _TrUserData) ->
    <<Bin/binary, 2>>;
'e_enum_link.Type'(V, Bin, _TrUserData) ->
    e_varint(V, Bin).

-compile({nowarn_unused_function,e_type_sint/3}).
e_type_sint(Value, Bin, _TrUserData) when Value >= 0 ->
    e_varint(Value * 2, Bin);
e_type_sint(Value, Bin, _TrUserData) ->
    e_varint(Value * -2 - 1, Bin).

-compile({nowarn_unused_function,e_type_int32/3}).
e_type_int32(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int32(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_int64/3}).
e_type_int64(Value, Bin, _TrUserData)
    when 0 =< Value, Value =< 127 ->
    <<Bin/binary, Value>>;
e_type_int64(Value, Bin, _TrUserData) ->
    <<N:64/unsigned-native>> = <<Value:64/signed-native>>,
    e_varint(N, Bin).

-compile({nowarn_unused_function,e_type_bool/3}).
e_type_bool(true, Bin, _TrUserData) ->
    <<Bin/binary, 1>>;
e_type_bool(false, Bin, _TrUserData) ->
    <<Bin/binary, 0>>;
e_type_bool(1, Bin, _TrUserData) -> <<Bin/binary, 1>>;
e_type_bool(0, Bin, _TrUserData) -> <<Bin/binary, 0>>.

-compile({nowarn_unused_function,e_type_string/3}).
e_type_string(S, Bin, _TrUserData) ->
    Utf8 = unicode:characters_to_binary(S),
    Bin2 = e_varint(byte_size(Utf8), Bin),
    <<Bin2/binary, Utf8/binary>>.

-compile({nowarn_unused_function,e_type_bytes/3}).
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_binary(Bytes) ->
    Bin2 = e_varint(byte_size(Bytes), Bin),
    <<Bin2/binary, Bytes/binary>>;
e_type_bytes(Bytes, Bin, _TrUserData)
    when is_list(Bytes) ->
    BytesBin = iolist_to_binary(Bytes),
    Bin2 = e_varint(byte_size(BytesBin), Bin),
    <<Bin2/binary, BytesBin/binary>>.

-compile({nowarn_unused_function,e_type_fixed32/3}).
e_type_fixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little>>.

-compile({nowarn_unused_function,e_type_sfixed32/3}).
e_type_sfixed32(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:32/little-signed>>.

-compile({nowarn_unused_function,e_type_fixed64/3}).
e_type_fixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little>>.

-compile({nowarn_unused_function,e_type_sfixed64/3}).
e_type_sfixed64(Value, Bin, _TrUserData) ->
    <<Bin/binary, Value:64/little-signed>>.

-compile({nowarn_unused_function,e_type_float/3}).
e_type_float(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:32/little-float>>;
e_type_float(infinity, Bin, _) ->
    <<Bin/binary, 0:16, 128, 127>>;
e_type_float('-infinity', Bin, _) ->
    <<Bin/binary, 0:16, 128, 255>>;
e_type_float(nan, Bin, _) ->
    <<Bin/binary, 0:16, 192, 127>>.

-compile({nowarn_unused_function,e_type_double/3}).
e_type_double(V, Bin, _) when is_number(V) ->
    <<Bin/binary, V:64/little-float>>;
e_type_double(infinity, Bin, _) ->
    <<Bin/binary, 0:48, 240, 127>>;
e_type_double('-infinity', Bin, _) ->
    <<Bin/binary, 0:48, 240, 255>>;
e_type_double(nan, Bin, _) ->
    <<Bin/binary, 0:48, 248, 127>>.

-compile({nowarn_unused_function,e_varint/3}).
e_varint(N, Bin, _TrUserData) -> e_varint(N, Bin).

-compile({nowarn_unused_function,e_varint/2}).
e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
    Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
    e_varint(N bsr 7, Bin2).

is_empty_string("") -> true;
is_empty_string(<<>>) -> true;
is_empty_string(L) when is_list(L) ->
    not string_has_chars(L);
is_empty_string(B) when is_binary(B) -> false.

string_has_chars([C | _]) when is_integer(C) -> true;
string_has_chars([H | T]) ->
    case string_has_chars(H) of
      true -> true;
      false -> string_has_chars(T)
    end;
string_has_chars(B)
    when is_binary(B), byte_size(B) =/= 0 ->
    true;
string_has_chars(C) when is_integer(C) -> true;
string_has_chars(<<>>) -> false;
string_has_chars([]) -> false.


decode_msg(Bin, MsgName) when is_binary(Bin) ->
    decode_msg(Bin, MsgName, []).

decode_msg(Bin, MsgName, Opts) when is_binary(Bin) ->
    TrUserData = proplists:get_value(user_data, Opts),
    decode_msg_1_catch(Bin, MsgName, TrUserData).

-ifdef('OTP_RELEASE').
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason:StackTrace -> error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-else.
decode_msg_1_catch(Bin, MsgName, TrUserData) ->
    try decode_msg_2_doit(MsgName, Bin, TrUserData)
    catch Class:Reason ->
        StackTrace = erlang:get_stacktrace(),
        error({gpb_error,{decoding_failure, {Bin, MsgName, {Class, Reason, StackTrace}}}})
    end.
-endif.

decode_msg_2_doit(dump_spans, Bin, TrUserData) ->
    id(decode_msg_dump_spans(Bin, TrUserData), TrUserData);
decode_msg_2_doit(tracestate, Bin, TrUserData) ->
    id(decode_msg_tracestate(Bin, TrUserData), TrUserData);
decode_msg_2_doit(entry, Bin, TrUserData) ->
    id(decode_msg_entry(Bin, TrUserData), TrUserData);
decode_msg_2_doit(attributes, Bin, TrUserData) ->
    id(decode_msg_attributes(Bin, TrUserData), TrUserData);
decode_msg_2_doit(time_event, Bin, TrUserData) ->
    id(decode_msg_time_event(Bin, TrUserData), TrUserData);
decode_msg_2_doit(message_event, Bin, TrUserData) ->
    id(decode_msg_message_event(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(annotation, Bin, TrUserData) ->
    id(decode_msg_annotation(Bin, TrUserData), TrUserData);
decode_msg_2_doit(time_events, Bin, TrUserData) ->
    id(decode_msg_time_events(Bin, TrUserData), TrUserData);
decode_msg_2_doit(link, Bin, TrUserData) ->
    id(decode_msg_link(Bin, TrUserData), TrUserData);
decode_msg_2_doit(links, Bin, TrUserData) ->
    id(decode_msg_links(Bin, TrUserData), TrUserData);
decode_msg_2_doit(span, Bin, TrUserData) ->
    id(decode_msg_span(Bin, TrUserData), TrUserData);
decode_msg_2_doit(status, Bin, TrUserData) ->
    id(decode_msg_status(Bin, TrUserData), TrUserData);
decode_msg_2_doit(attribute_value, Bin, TrUserData) ->
    id(decode_msg_attribute_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(stack_frame, Bin, TrUserData) ->
    id(decode_msg_stack_frame(Bin, TrUserData), TrUserData);
decode_msg_2_doit(stack_frames, Bin, TrUserData) ->
    id(decode_msg_stack_frames(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(stack_trace, Bin, TrUserData) ->
    id(decode_msg_stack_trace(Bin, TrUserData), TrUserData);
decode_msg_2_doit(module, Bin, TrUserData) ->
    id(decode_msg_module(Bin, TrUserData), TrUserData);
decode_msg_2_doit(truncatable_string, Bin,
		  TrUserData) ->
    id(decode_msg_truncatable_string(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(resource, Bin, TrUserData) ->
    id(decode_msg_resource(Bin, TrUserData), TrUserData);
decode_msg_2_doit(timestamp, Bin, TrUserData) ->
    id(decode_msg_timestamp(Bin, TrUserData), TrUserData);
decode_msg_2_doit(double_value, Bin, TrUserData) ->
    id(decode_msg_double_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(float_value, Bin, TrUserData) ->
    id(decode_msg_float_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(int_64_value, Bin, TrUserData) ->
    id(decode_msg_int_64_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_64_value, Bin, TrUserData) ->
    id(decode_msg_u_int_64_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(int_32_value, Bin, TrUserData) ->
    id(decode_msg_int_32_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(u_int_32_value, Bin, TrUserData) ->
    id(decode_msg_u_int_32_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bool_value, Bin, TrUserData) ->
    id(decode_msg_bool_value(Bin, TrUserData), TrUserData);
decode_msg_2_doit(string_value, Bin, TrUserData) ->
    id(decode_msg_string_value(Bin, TrUserData),
       TrUserData);
decode_msg_2_doit(bytes_value, Bin, TrUserData) ->
    id(decode_msg_bytes_value(Bin, TrUserData), TrUserData).



decode_msg_dump_spans(Bin, TrUserData) ->
    dfp_read_field_def_dump_spans(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_dump_spans(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_dump_spans_spans(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_dump_spans(<<>>, 0, 0, R1,
			      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{spans => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_dump_spans(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_dump_spans(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_dump_spans(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_dump_spans(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_dump_spans(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_dump_spans_spans(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_dump_spans(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_dump_spans(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_dump_spans(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_dump_spans(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_dump_spans(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_dump_spans(<<>>, 0, 0, R1,
			     TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{spans => lists_reverse(R1, TrUserData)}
    end.

d_field_dump_spans_spans(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_dump_spans_spans(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_dump_spans_spans(<<0:1, X:7, Rest/binary>>, N,
			 Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_span(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_dump_spans(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_dump_spans(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_dump_spans(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_dump_spans(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_dump_spans(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_dump_spans(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_dump_spans(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_dump_spans(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_dump_spans(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_dump_spans(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_dump_spans(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_dump_spans(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_dump_spans(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_dump_spans(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_dump_spans(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_tracestate(Bin, TrUserData) ->
    dfp_read_field_def_tracestate(Bin, 0, 0,
				  id([], TrUserData), TrUserData).

dfp_read_field_def_tracestate(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_tracestate_entries(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_tracestate(<<>>, 0, 0, R1,
			      TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{entries => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_tracestate(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_tracestate(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_tracestate(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_tracestate(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_tracestate(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_tracestate_entries(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_tracestate(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_tracestate(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_tracestate(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_tracestate(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_tracestate(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_tracestate(<<>>, 0, 0, R1,
			     TrUserData) ->
    S1 = #{},
    if R1 == '$undef' -> S1;
       true -> S1#{entries => lists_reverse(R1, TrUserData)}
    end.

d_field_tracestate_entries(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_tracestate_entries(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_tracestate_entries(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_entry(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_tracestate(RestF, 0, 0,
				  cons(NewFValue, Prev, TrUserData),
				  TrUserData).

skip_varint_tracestate(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_tracestate(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_tracestate(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_tracestate(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_tracestate(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_tracestate(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_tracestate(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_tracestate(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_tracestate(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_tracestate(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_tracestate(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_tracestate(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_tracestate(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_tracestate(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_entry(Bin, TrUserData) ->
    dfp_read_field_def_entry(Bin, 0, 0,
			     id(<<>>, TrUserData), id(<<>>, TrUserData),
			     TrUserData).

dfp_read_field_def_entry(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_entry_key(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_entry(<<18, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_entry_value(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_entry(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
dfp_read_field_def_entry(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_entry(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_entry(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_entry(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_entry(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_entry_key(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_entry_value(Rest, 0, 0, F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_entry(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_entry(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_entry(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_entry(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_entry(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_entry(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2}.

d_field_entry_key(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_entry_key(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, TrUserData);
d_field_entry_key(<<0:1, X:7, Rest/binary>>, N, Acc, _,
		  F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_entry(RestF, 0, 0, NewFValue, F@_2,
			     TrUserData).

d_field_entry_value(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_entry_value(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_entry_value(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_entry(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_entry(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_entry(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_entry(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_entry(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_entry(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_entry(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_entry(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_entry(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_entry(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_entry(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_entry(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_entry(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_entry(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_entry(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

decode_msg_attributes(Bin, TrUserData) ->
    dfp_read_field_def_attributes(Bin, 0, 0,
				  'tr_decode_init_default_attributes.attribute_map'([],
										    TrUserData),
				  id(0, TrUserData), TrUserData).

dfp_read_field_def_attributes(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_attributes_attribute_map(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_attributes(<<16, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_attributes_dropped_attributes_count(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
dfp_read_field_def_attributes(<<>>, 0, 0, R1, F@_2,
			      TrUserData) ->
    #{attribute_map =>
	  'tr_decode_repeated_finalize_attributes.attribute_map'(R1,
								 TrUserData),
      dropped_attributes_count => F@_2};
dfp_read_field_def_attributes(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_attributes(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_attributes(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_attributes(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_attributes(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_attributes_attribute_map(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_attributes_dropped_attributes_count(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_attributes(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_attributes(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_attributes(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_attributes(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_attributes(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_attributes(<<>>, 0, 0, R1, F@_2,
			     TrUserData) ->
    #{attribute_map =>
	  'tr_decode_repeated_finalize_attributes.attribute_map'(R1,
								 TrUserData),
      dropped_attributes_count => F@_2}.

d_field_attributes_attribute_map(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_attributes_attribute_map(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_attributes_attribute_map(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,attribute_value>'(Bs,
									TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_attributes(RestF, 0, 0,
				  'tr_decode_repeated_add_elem_attributes.attribute_map'(NewFValue,
											 Prev,
											 TrUserData),
				  F@_2, TrUserData).

d_field_attributes_dropped_attributes_count(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_attributes_dropped_attributes_count(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
d_field_attributes_dropped_attributes_count(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_attributes(RestF, 0, 0, F@_1,
				  NewFValue, TrUserData).

skip_varint_attributes(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_attributes(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_attributes(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_attributes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_attributes(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_attributes(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_attributes(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_attributes(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_attributes(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_attributes(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_attributes(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_attributes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_attributes(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_attributes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_time_event(Bin, TrUserData) ->
    dfp_read_field_def_time_event(Bin, 0, 0,
				  id('$undef', TrUserData),
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_time_event(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_time_event_time(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_time_event(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_time_event_annotation(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_time_event(<<26, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_time_event_message_event(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_time_event(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{time => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end;
dfp_read_field_def_time_event(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_time_event(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_time_event(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_time_event(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_time_event(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_time_event_time(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      18 ->
	  d_field_time_event_annotation(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      26 ->
	  d_field_time_event_message_event(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_time_event(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_time_event(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_time_event(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_time_event(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_time_event(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_time_event(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{time => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{value => F@_2}
    end.

d_field_time_event_time(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_time_event_time(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_time_event_time(<<0:1, X:7, Rest/binary>>, N,
			Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_event(RestF, 0, 0,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_timestamp(Prev, NewFValue,
							     TrUserData)
				  end,
				  F@_2, TrUserData).

d_field_time_event_annotation(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_time_event_annotation(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_time_event_annotation(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_annotation(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_event(RestF, 0, 0, F@_1,
				  case Prev of
				    '$undef' ->
					id({annotation, NewFValue}, TrUserData);
				    {annotation, MVPrev} ->
					id({annotation,
					    merge_msg_annotation(MVPrev,
								 NewFValue,
								 TrUserData)},
					   TrUserData);
				    _ -> id({annotation, NewFValue}, TrUserData)
				  end,
				  TrUserData).

d_field_time_event_message_event(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_time_event_message_event(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_time_event_message_event(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_message_event(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_event(RestF, 0, 0, F@_1,
				  case Prev of
				    '$undef' ->
					id({message_event, NewFValue},
					   TrUserData);
				    {message_event, MVPrev} ->
					id({message_event,
					    merge_msg_message_event(MVPrev,
								    NewFValue,
								    TrUserData)},
					   TrUserData);
				    _ ->
					id({message_event, NewFValue},
					   TrUserData)
				  end,
				  TrUserData).

skip_varint_time_event(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_time_event(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_time_event(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_time_event(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_time_event(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_time_event(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_time_event(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_time_event(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_time_event(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_time_event(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_time_event(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_time_event(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_time_event(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_time_event(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_message_event(Bin, TrUserData) ->
    dfp_read_field_def_message_event(Bin, 0, 0,
				     id('TYPE_UNSPECIFIED', TrUserData),
				     id(0, TrUserData), id(0, TrUserData),
				     id(0, TrUserData), TrUserData).

dfp_read_field_def_message_event(<<8, Rest/binary>>, Z1,
				 Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_message_event_type(Rest, Z1, Z2, F@_1, F@_2,
			       F@_3, F@_4, TrUserData);
dfp_read_field_def_message_event(<<16, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_message_event_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, TrUserData);
dfp_read_field_def_message_event(<<24, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_message_event_uncompressed_size(Rest, Z1, Z2,
					    F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_message_event(<<32, Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_message_event_compressed_size(Rest, Z1, Z2,
					  F@_1, F@_2, F@_3, F@_4, TrUserData);
dfp_read_field_def_message_event(<<>>, 0, 0, F@_1, F@_2,
				 F@_3, F@_4, _) ->
    #{type => F@_1, id => F@_2, uncompressed_size => F@_3,
      compressed_size => F@_4};
dfp_read_field_def_message_event(Other, Z1, Z2, F@_1,
				 F@_2, F@_3, F@_4, TrUserData) ->
    dg_read_field_def_message_event(Other, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, TrUserData).

dg_read_field_def_message_event(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_message_event(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData);
dg_read_field_def_message_event(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_message_event_type(Rest, 0, 0, F@_1, F@_2, F@_3,
				     F@_4, TrUserData);
      16 ->
	  d_field_message_event_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, TrUserData);
      24 ->
	  d_field_message_event_uncompressed_size(Rest, 0, 0,
						  F@_1, F@_2, F@_3, F@_4,
						  TrUserData);
      32 ->
	  d_field_message_event_compressed_size(Rest, 0, 0, F@_1,
						F@_2, F@_3, F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_message_event(Rest, 0, 0, F@_1, F@_2, F@_3,
					  F@_4, TrUserData);
	    1 ->
		skip_64_message_event(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData);
	    2 ->
		skip_length_delimited_message_event(Rest, 0, 0, F@_1,
						    F@_2, F@_3, F@_4,
						    TrUserData);
	    3 ->
		skip_group_message_event(Rest, Key bsr 3, 0, F@_1, F@_2,
					 F@_3, F@_4, TrUserData);
	    5 ->
		skip_32_message_event(Rest, 0, 0, F@_1, F@_2, F@_3,
				      F@_4, TrUserData)
	  end
    end;
dg_read_field_def_message_event(<<>>, 0, 0, F@_1, F@_2,
				F@_3, F@_4, _) ->
    #{type => F@_1, id => F@_2, uncompressed_size => F@_3,
      compressed_size => F@_4}.

d_field_message_event_type(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_message_event_type(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_message_event_type(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} =
	{id('d_enum_message_event.Type'(begin
					  <<Res:32/signed-native>> = <<(X bsl N
									  +
									  Acc):32/unsigned-native>>,
					  id(Res, TrUserData)
					end),
	    TrUserData),
	 Rest},
    dfp_read_field_def_message_event(RestF, 0, 0, NewFValue,
				     F@_2, F@_3, F@_4, TrUserData).

d_field_message_event_id(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_message_event_id(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_message_event_id(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_message_event(RestF, 0, 0, F@_1,
				     NewFValue, F@_3, F@_4, TrUserData).

d_field_message_event_uncompressed_size(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData)
    when N < 57 ->
    d_field_message_event_uncompressed_size(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2, F@_3,
					    F@_4, TrUserData);
d_field_message_event_uncompressed_size(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, _, F@_4,
					TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_message_event(RestF, 0, 0, F@_1,
				     F@_2, NewFValue, F@_4, TrUserData).

d_field_message_event_compressed_size(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, F@_4,
				      TrUserData)
    when N < 57 ->
    d_field_message_event_compressed_size(Rest, N + 7,
					  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					  TrUserData);
d_field_message_event_compressed_size(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, F@_2, F@_3, _,
				      TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_message_event(RestF, 0, 0, F@_1,
				     F@_2, F@_3, NewFValue, TrUserData).

skip_varint_message_event(<<1:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_message_event(Rest, Z1, Z2, F@_1, F@_2,
			      F@_3, F@_4, TrUserData);
skip_varint_message_event(<<0:1, _:7, Rest/binary>>, Z1,
			  Z2, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_message_event(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_length_delimited_message_event(<<1:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_message_event(Rest, N + 7,
					X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
					TrUserData);
skip_length_delimited_message_event(<<0:1, X:7,
				      Rest/binary>>,
				    N, Acc, F@_1, F@_2, F@_3, F@_4,
				    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_message_event(Rest2, 0, 0, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_group_message_event(Bin, FNum, Z2, F@_1, F@_2,
			 F@_3, F@_4, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_message_event(Rest, 0, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_32_message_event(<<_:32, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_message_event(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

skip_64_message_event(<<_:64, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_message_event(Rest, Z1, Z2, F@_1,
				     F@_2, F@_3, F@_4, TrUserData).

decode_msg_annotation(Bin, TrUserData) ->
    dfp_read_field_def_annotation(Bin, 0, 0,
				  id('$undef', TrUserData),
				  id('$undef', TrUserData), TrUserData).

dfp_read_field_def_annotation(<<10, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_annotation_description(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
dfp_read_field_def_annotation(<<18, Rest/binary>>, Z1,
			      Z2, F@_1, F@_2, TrUserData) ->
    d_field_annotation_attributes(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData);
dfp_read_field_def_annotation(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{description => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{attributes => F@_2}
    end;
dfp_read_field_def_annotation(Other, Z1, Z2, F@_1, F@_2,
			      TrUserData) ->
    dg_read_field_def_annotation(Other, Z1, Z2, F@_1, F@_2,
				 TrUserData).

dg_read_field_def_annotation(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_annotation(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
dg_read_field_def_annotation(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_annotation_description(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
      18 ->
	  d_field_annotation_attributes(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_annotation(Rest, 0, 0, F@_1, F@_2,
				       TrUserData);
	    1 ->
		skip_64_annotation(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_annotation(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    3 ->
		skip_group_annotation(Rest, Key bsr 3, 0, F@_1, F@_2,
				      TrUserData);
	    5 ->
		skip_32_annotation(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_annotation(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{description => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{attributes => F@_2}
    end.

d_field_annotation_description(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_annotation_description(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_annotation_description(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_annotation(RestF, 0, 0,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_truncatable_string(Prev,
								      NewFValue,
								      TrUserData)
				  end,
				  F@_2, TrUserData).

d_field_annotation_attributes(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_annotation_attributes(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_annotation_attributes(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attributes(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_annotation(RestF, 0, 0, F@_1,
				  if Prev == '$undef' -> NewFValue;
				     true ->
					 merge_msg_attributes(Prev, NewFValue,
							      TrUserData)
				  end,
				  TrUserData).

skip_varint_annotation(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_annotation(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
skip_varint_annotation(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_annotation(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_length_delimited_annotation(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_annotation(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_annotation(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_annotation(Rest2, 0, 0, F@_1, F@_2,
				  TrUserData).

skip_group_annotation(Bin, FNum, Z2, F@_1, F@_2,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_annotation(Rest, 0, Z2, F@_1, F@_2,
				  TrUserData).

skip_32_annotation(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_annotation(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

skip_64_annotation(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   F@_2, TrUserData) ->
    dfp_read_field_def_annotation(Rest, Z1, Z2, F@_1, F@_2,
				  TrUserData).

decode_msg_time_events(Bin, TrUserData) ->
    dfp_read_field_def_time_events(Bin, 0, 0,
				   id([], TrUserData), id(0, TrUserData),
				   id(0, TrUserData), TrUserData).

dfp_read_field_def_time_events(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_events_time_event(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData);
dfp_read_field_def_time_events(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_events_dropped_annotations_count(Rest, Z1,
						  Z2, F@_1, F@_2, F@_3,
						  TrUserData);
dfp_read_field_def_time_events(<<24, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, TrUserData) ->
    d_field_time_events_dropped_message_events_count(Rest,
						     Z1, Z2, F@_1, F@_2, F@_3,
						     TrUserData);
dfp_read_field_def_time_events(<<>>, 0, 0, R1, F@_2,
			       F@_3, TrUserData) ->
    S1 = #{dropped_annotations_count => F@_2,
	   dropped_message_events_count => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{time_event => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_time_events(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, TrUserData) ->
    dg_read_field_def_time_events(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, TrUserData).

dg_read_field_def_time_events(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_time_events(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
dg_read_field_def_time_events(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_time_events_time_event(Rest, 0, 0, F@_1, F@_2,
					 F@_3, TrUserData);
      16 ->
	  d_field_time_events_dropped_annotations_count(Rest, 0,
							0, F@_1, F@_2, F@_3,
							TrUserData);
      24 ->
	  d_field_time_events_dropped_message_events_count(Rest,
							   0, 0, F@_1, F@_2,
							   F@_3, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_time_events(Rest, 0, 0, F@_1, F@_2, F@_3,
					TrUserData);
	    1 ->
		skip_64_time_events(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData);
	    2 ->
		skip_length_delimited_time_events(Rest, 0, 0, F@_1,
						  F@_2, F@_3, TrUserData);
	    3 ->
		skip_group_time_events(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, TrUserData);
	    5 ->
		skip_32_time_events(Rest, 0, 0, F@_1, F@_2, F@_3,
				    TrUserData)
	  end
    end;
dg_read_field_def_time_events(<<>>, 0, 0, R1, F@_2,
			      F@_3, TrUserData) ->
    S1 = #{dropped_annotations_count => F@_2,
	   dropped_message_events_count => F@_3},
    if R1 == '$undef' -> S1;
       true -> S1#{time_event => lists_reverse(R1, TrUserData)}
    end.

d_field_time_events_time_event(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    d_field_time_events_time_event(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, F@_3, TrUserData);
d_field_time_events_time_event(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, Prev, F@_2, F@_3, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_time_event(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_time_events(RestF, 0, 0,
				   cons(NewFValue, Prev, TrUserData), F@_2,
				   F@_3, TrUserData).

d_field_time_events_dropped_annotations_count(<<1:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, F@_2, F@_3,
					      TrUserData)
    when N < 57 ->
    d_field_time_events_dropped_annotations_count(Rest,
						  N + 7, X bsl N + Acc, F@_1,
						  F@_2, F@_3, TrUserData);
d_field_time_events_dropped_annotations_count(<<0:1,
						X:7, Rest/binary>>,
					      N, Acc, F@_1, _, F@_3,
					      TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_time_events(RestF, 0, 0, F@_1,
				   NewFValue, F@_3, TrUserData).

d_field_time_events_dropped_message_events_count(<<1:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, F@_3,
						 TrUserData)
    when N < 57 ->
    d_field_time_events_dropped_message_events_count(Rest,
						     N + 7, X bsl N + Acc, F@_1,
						     F@_2, F@_3, TrUserData);
d_field_time_events_dropped_message_events_count(<<0:1,
						   X:7, Rest/binary>>,
						 N, Acc, F@_1, F@_2, _,
						 TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_time_events(RestF, 0, 0, F@_1, F@_2,
				   NewFValue, TrUserData).

skip_varint_time_events(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    skip_varint_time_events(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    TrUserData);
skip_varint_time_events(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_events(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_length_delimited_time_events(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData)
    when N < 57 ->
    skip_length_delimited_time_events(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3,
				      TrUserData);
skip_length_delimited_time_events(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_time_events(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, TrUserData).

skip_group_time_events(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_time_events(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_32_time_events(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_events(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

skip_64_time_events(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, TrUserData) ->
    dfp_read_field_def_time_events(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, TrUserData).

decode_msg_link(Bin, TrUserData) ->
    dfp_read_field_def_link(Bin, 0, 0, id(<<>>, TrUserData),
			    id(<<>>, TrUserData),
			    id('TYPE_UNSPECIFIED', TrUserData),
			    id('$undef', TrUserData), TrUserData).

dfp_read_field_def_link(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_trace_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, TrUserData);
dfp_read_field_def_link(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_span_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, TrUserData);
dfp_read_field_def_link(<<24, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_type(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      TrUserData);
dfp_read_field_def_link(<<34, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    d_field_link_attributes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData);
dfp_read_field_def_link(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, _) ->
    S1 = #{trace_id => F@_1, span_id => F@_2, type => F@_3},
    if F@_4 == '$undef' -> S1;
       true -> S1#{attributes => F@_4}
    end;
dfp_read_field_def_link(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, TrUserData) ->
    dg_read_field_def_link(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, TrUserData).

dg_read_field_def_link(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_link(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, TrUserData);
dg_read_field_def_link(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_link_trace_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
      18 ->
	  d_field_link_span_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       TrUserData);
      24 ->
	  d_field_link_type(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    TrUserData);
      34 ->
	  d_field_link_attributes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_link(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 TrUserData);
	    1 ->
		skip_64_link(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData);
	    2 ->
		skip_length_delimited_link(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, TrUserData);
	    3 ->
		skip_group_link(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, TrUserData);
	    5 ->
		skip_32_link(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     TrUserData)
	  end
    end;
dg_read_field_def_link(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       F@_4, _) ->
    S1 = #{trace_id => F@_1, span_id => F@_2, type => F@_3},
    if F@_4 == '$undef' -> S1;
       true -> S1#{attributes => F@_4}
    end.

d_field_link_trace_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_trace_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, TrUserData);
d_field_link_trace_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_link(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, F@_4, TrUserData).

d_field_link_span_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_span_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, TrUserData);
d_field_link_span_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_link(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, F@_4, TrUserData).

d_field_link_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_type(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, TrUserData);
d_field_link_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, _, F@_4, TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_link.Type'(begin
						  <<Res:32/signed-native>> =
						      <<(X bsl N +
							   Acc):32/unsigned-native>>,
						  id(Res, TrUserData)
						end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_link(RestF, 0, 0, F@_1, F@_2,
			    NewFValue, F@_4, TrUserData).

d_field_link_attributes(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    d_field_link_attributes(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, TrUserData);
d_field_link_attributes(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attributes(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_link(RestF, 0, 0, F@_1, F@_2, F@_3,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_attributes(Prev, NewFValue,
							TrUserData)
			    end,
			    TrUserData).

skip_varint_link(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    skip_varint_link(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     TrUserData);
skip_varint_link(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_link(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_length_delimited_link(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData)
    when N < 57 ->
    skip_length_delimited_link(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, TrUserData);
skip_length_delimited_link(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_link(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_group_link(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_link(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_32_link(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_link(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

skip_64_link(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, TrUserData) ->
    dfp_read_field_def_link(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, TrUserData).

decode_msg_links(Bin, TrUserData) ->
    dfp_read_field_def_links(Bin, 0, 0, id([], TrUserData),
			     id(0, TrUserData), TrUserData).

dfp_read_field_def_links(<<10, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_links_link(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
dfp_read_field_def_links(<<16, Rest/binary>>, Z1, Z2,
			 F@_1, F@_2, TrUserData) ->
    d_field_links_dropped_links_count(Rest, Z1, Z2, F@_1,
				      F@_2, TrUserData);
dfp_read_field_def_links(<<>>, 0, 0, R1, F@_2,
			 TrUserData) ->
    S1 = #{dropped_links_count => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{link => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_links(Other, Z1, Z2, F@_1, F@_2,
			 TrUserData) ->
    dg_read_field_def_links(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData).

dg_read_field_def_links(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_links(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
dg_read_field_def_links(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_links_link(Rest, 0, 0, F@_1, F@_2, TrUserData);
      16 ->
	  d_field_links_dropped_links_count(Rest, 0, 0, F@_1,
					    F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_links(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_links(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_links(Rest, 0, 0, F@_1, F@_2,
					    TrUserData);
	    3 ->
		skip_group_links(Rest, Key bsr 3, 0, F@_1, F@_2,
				 TrUserData);
	    5 -> skip_32_links(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_links(<<>>, 0, 0, R1, F@_2,
			TrUserData) ->
    S1 = #{dropped_links_count => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{link => lists_reverse(R1, TrUserData)}
    end.

d_field_links_link(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_links_link(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, TrUserData);
d_field_links_link(<<0:1, X:7, Rest/binary>>, N, Acc,
		   Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_link(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_links(RestF, 0, 0,
			     cons(NewFValue, Prev, TrUserData), F@_2,
			     TrUserData).

d_field_links_dropped_links_count(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_links_dropped_links_count(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_links_dropped_links_count(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_links(RestF, 0, 0, F@_1, NewFValue,
			     TrUserData).

skip_varint_links(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    skip_varint_links(Rest, Z1, Z2, F@_1, F@_2, TrUserData);
skip_varint_links(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		  F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_links(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_length_delimited_links(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_links(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
skip_length_delimited_links(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_links(Rest2, 0, 0, F@_1, F@_2,
			     TrUserData).

skip_group_links(Bin, FNum, Z2, F@_1, F@_2,
		 TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_links(Rest, 0, Z2, F@_1, F@_2,
			     TrUserData).

skip_32_links(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_links(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

skip_64_links(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	      TrUserData) ->
    dfp_read_field_def_links(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData).

decode_msg_span(Bin, TrUserData) ->
    dfp_read_field_def_span(Bin, 0, 0, id(<<>>, TrUserData),
			    id(<<>>, TrUserData), id('$undef', TrUserData),
			    id(<<>>, TrUserData), id('$undef', TrUserData),
			    id('SPAN_KIND_UNSPECIFIED', TrUserData),
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    id('$undef', TrUserData), id('$undef', TrUserData),
			    TrUserData).

dfp_read_field_def_span(<<10, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_trace_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<18, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_span_id(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			 F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			 F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<122, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_tracestate(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<26, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_parent_span_id(Rest, Z1, Z2, F@_1, F@_2,
				F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				TrUserData);
dfp_read_field_def_span(<<34, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_name(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		      F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<112, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_kind(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		      F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<42, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_start_time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<50, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_end_time(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<58, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_attributes(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<66, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_stack_trace(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<74, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_time_events(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			     F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<82, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_links(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<90, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_status(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<130, 1, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_resource(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			  F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
dfp_read_field_def_span(<<98, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_same_process_as_parent_span(Rest, Z1, Z2,
					     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
					     F@_7, F@_8, F@_9, F@_10, F@_11,
					     F@_12, F@_13, F@_14, F@_15, F@_16,
					     TrUserData);
dfp_read_field_def_span(<<106, Rest/binary>>, Z1, Z2,
			F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    d_field_span_child_span_count(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				  F@_16, TrUserData);
dfp_read_field_def_span(<<>>, 0, 0, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, _) ->
    S1 = #{trace_id => F@_1, span_id => F@_2,
	   parent_span_id => F@_4, kind => F@_6},
    S2 = if F@_3 == '$undef' -> S1;
	    true -> S1#{tracestate => F@_3}
	 end,
    S3 = if F@_5 == '$undef' -> S2;
	    true -> S2#{name => F@_5}
	 end,
    S4 = if F@_7 == '$undef' -> S3;
	    true -> S3#{start_time => F@_7}
	 end,
    S5 = if F@_8 == '$undef' -> S4;
	    true -> S4#{end_time => F@_8}
	 end,
    S6 = if F@_9 == '$undef' -> S5;
	    true -> S5#{attributes => F@_9}
	 end,
    S7 = if F@_10 == '$undef' -> S6;
	    true -> S6#{stack_trace => F@_10}
	 end,
    S8 = if F@_11 == '$undef' -> S7;
	    true -> S7#{time_events => F@_11}
	 end,
    S9 = if F@_12 == '$undef' -> S8;
	    true -> S8#{links => F@_12}
	 end,
    S10 = if F@_13 == '$undef' -> S9;
	     true -> S9#{status => F@_13}
	  end,
    S11 = if F@_14 == '$undef' -> S10;
	     true -> S10#{resource => F@_14}
	  end,
    S12 = if F@_15 == '$undef' -> S11;
	     true -> S11#{same_process_as_parent_span => F@_15}
	  end,
    if F@_16 == '$undef' -> S12;
       true -> S12#{child_span_count => F@_16}
    end;
dfp_read_field_def_span(Other, Z1, Z2, F@_1, F@_2, F@_3,
			F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    dg_read_field_def_span(Other, Z1, Z2, F@_1, F@_2, F@_3,
			   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			   F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

dg_read_field_def_span(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_span(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			   TrUserData);
dg_read_field_def_span(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
		       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		       TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_span_trace_id(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				TrUserData);
      18 ->
	  d_field_span_span_id(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			       F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			       F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
      122 ->
	  d_field_span_tracestate(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  TrUserData);
      26 ->
	  d_field_span_parent_span_id(Rest, 0, 0, F@_1, F@_2,
				      F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
				      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				      F@_16, TrUserData);
      34 ->
	  d_field_span_name(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			    F@_13, F@_14, F@_15, F@_16, TrUserData);
      112 ->
	  d_field_span_kind(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			    F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			    F@_13, F@_14, F@_15, F@_16, TrUserData);
      42 ->
	  d_field_span_start_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  TrUserData);
      50 ->
	  d_field_span_end_time(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				TrUserData);
      58 ->
	  d_field_span_attributes(Rest, 0, 0, F@_1, F@_2, F@_3,
				  F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				  TrUserData);
      66 ->
	  d_field_span_stack_trace(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   TrUserData);
      74 ->
	  d_field_span_time_events(Rest, 0, 0, F@_1, F@_2, F@_3,
				   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				   F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				   TrUserData);
      82 ->
	  d_field_span_links(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			     F@_13, F@_14, F@_15, F@_16, TrUserData);
      90 ->
	  d_field_span_status(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
			      F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
			      F@_13, F@_14, F@_15, F@_16, TrUserData);
      130 ->
	  d_field_span_resource(Rest, 0, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				TrUserData);
      98 ->
	  d_field_span_same_process_as_parent_span(Rest, 0, 0,
						   F@_1, F@_2, F@_3, F@_4, F@_5,
						   F@_6, F@_7, F@_8, F@_9,
						   F@_10, F@_11, F@_12, F@_13,
						   F@_14, F@_15, F@_16,
						   TrUserData);
      106 ->
	  d_field_span_child_span_count(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
					F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
					F@_15, F@_16, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_span(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				 F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
				 F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
	    1 ->
		skip_64_span(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			     F@_14, F@_15, F@_16, TrUserData);
	    2 ->
		skip_length_delimited_span(Rest, 0, 0, F@_1, F@_2, F@_3,
					   F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					   F@_10, F@_11, F@_12, F@_13, F@_14,
					   F@_15, F@_16, TrUserData);
	    3 ->
		skip_group_span(Rest, Key bsr 3, 0, F@_1, F@_2, F@_3,
				F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
				F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
				TrUserData);
	    5 ->
		skip_32_span(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4, F@_5,
			     F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			     F@_14, F@_15, F@_16, TrUserData)
	  end
    end;
dg_read_field_def_span(<<>>, 0, 0, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		       F@_13, F@_14, F@_15, F@_16, _) ->
    S1 = #{trace_id => F@_1, span_id => F@_2,
	   parent_span_id => F@_4, kind => F@_6},
    S2 = if F@_3 == '$undef' -> S1;
	    true -> S1#{tracestate => F@_3}
	 end,
    S3 = if F@_5 == '$undef' -> S2;
	    true -> S2#{name => F@_5}
	 end,
    S4 = if F@_7 == '$undef' -> S3;
	    true -> S3#{start_time => F@_7}
	 end,
    S5 = if F@_8 == '$undef' -> S4;
	    true -> S4#{end_time => F@_8}
	 end,
    S6 = if F@_9 == '$undef' -> S5;
	    true -> S5#{attributes => F@_9}
	 end,
    S7 = if F@_10 == '$undef' -> S6;
	    true -> S6#{stack_trace => F@_10}
	 end,
    S8 = if F@_11 == '$undef' -> S7;
	    true -> S7#{time_events => F@_11}
	 end,
    S9 = if F@_12 == '$undef' -> S8;
	    true -> S8#{links => F@_12}
	 end,
    S10 = if F@_13 == '$undef' -> S9;
	     true -> S9#{status => F@_13}
	  end,
    S11 = if F@_14 == '$undef' -> S10;
	     true -> S10#{resource => F@_14}
	  end,
    S12 = if F@_15 == '$undef' -> S11;
	     true -> S11#{same_process_as_parent_span => F@_15}
	  end,
    if F@_16 == '$undef' -> S12;
       true -> S12#{child_span_count => F@_16}
    end.

d_field_span_trace_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		      TrUserData)
    when N < 57 ->
    d_field_span_trace_id(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_trace_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, NewFValue, F@_2,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			    TrUserData).

d_field_span_span_id(<<1:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		     TrUserData)
    when N < 57 ->
    d_field_span_span_id(Rest, N + 7, X bsl N + Acc, F@_1,
			 F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			 F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_span_id(<<0:1, X:7, Rest/binary>>, N, Acc,
		     F@_1, _, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		     F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		     TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, NewFValue,
			    F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			    TrUserData).

d_field_span_tracestate(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData)
    when N < 57 ->
    d_field_span_tracestate(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, TrUserData);
d_field_span_tracestate(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_tracestate(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_tracestate(Prev, NewFValue,
							TrUserData)
			    end,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

d_field_span_parent_span_id(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    F@_15, F@_16, TrUserData)
    when N < 57 ->
    d_field_span_parent_span_id(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
				F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
				F@_16, TrUserData);
d_field_span_parent_span_id(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    NewFValue, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			    TrUserData).

d_field_span_name(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		  TrUserData)
    when N < 57 ->
    d_field_span_name(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_name(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, Prev, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		  TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_truncatable_string(Prev, NewFValue,
								TrUserData)
			    end,
			    F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12, F@_13,
			    F@_14, F@_15, F@_16, TrUserData).

d_field_span_kind(<<1:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		  TrUserData)
    when N < 57 ->
    d_field_span_kind(Rest, N + 7, X bsl N + Acc, F@_1,
		      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		      F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_kind(<<0:1, X:7, Rest/binary>>, N, Acc,
		  F@_1, F@_2, F@_3, F@_4, F@_5, _, F@_7, F@_8, F@_9,
		  F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		  TrUserData) ->
    {NewFValue, RestF} = {id('d_enum_span.SpanKind'(begin
						      <<Res:32/signed-native>> =
							  <<(X bsl N +
							       Acc):32/unsigned-native>>,
						      id(Res, TrUserData)
						    end),
			     TrUserData),
			  Rest},
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, NewFValue, F@_7, F@_8, F@_9, F@_10,
			    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			    TrUserData).

d_field_span_start_time(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData)
    when N < 57 ->
    d_field_span_start_time(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, TrUserData);
d_field_span_start_time(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, Prev, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_timestamp(Prev, NewFValue,
						       TrUserData)
			    end,
			    F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			    F@_15, F@_16, TrUserData).

d_field_span_end_time(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		      TrUserData)
    when N < 57 ->
    d_field_span_end_time(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_end_time(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, Prev, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_timestamp(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_timestamp(Prev, NewFValue,
						       TrUserData)
			    end,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, TrUserData).

d_field_span_attributes(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData)
    when N < 57 ->
    d_field_span_attributes(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			    F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			    F@_16, TrUserData);
d_field_span_attributes(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			Prev, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attributes(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_attributes(Prev, NewFValue,
							TrUserData)
			    end,
			    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			    TrUserData).

d_field_span_stack_trace(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 TrUserData)
    when N < 57 ->
    d_field_span_stack_trace(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, TrUserData);
d_field_span_stack_trace(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, Prev, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_stack_trace(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_stack_trace(Prev, NewFValue,
							 TrUserData)
			    end,
			    F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			    TrUserData).

d_field_span_time_events(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
			 TrUserData)
    when N < 57 ->
    d_field_span_time_events(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			     F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			     F@_16, TrUserData);
d_field_span_time_events(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			 F@_9, F@_10, Prev, F@_12, F@_13, F@_14, F@_15, F@_16,
			 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_time_events(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_time_events(Prev, NewFValue,
							 TrUserData)
			    end,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

d_field_span_links(<<1:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		   TrUserData)
    when N < 57 ->
    d_field_span_links(Rest, N + 7, X bsl N + Acc, F@_1,
		       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
		       F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_links(<<0:1, X:7, Rest/binary>>, N, Acc,
		   F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		   F@_10, F@_11, Prev, F@_13, F@_14, F@_15, F@_16,
		   TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_links(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_links(Prev, NewFValue, TrUserData)
			    end,
			    F@_13, F@_14, F@_15, F@_16, TrUserData).

d_field_span_status(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		    TrUserData)
    when N < 57 ->
    d_field_span_status(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_status(<<0:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		    F@_10, F@_11, F@_12, Prev, F@_14, F@_15, F@_16,
		    TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_status(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_status(Prev, NewFValue, TrUserData)
			    end,
			    F@_14, F@_15, F@_16, TrUserData).

d_field_span_resource(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		      TrUserData)
    when N < 57 ->
    d_field_span_resource(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10,
			  F@_11, F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_resource(<<0:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		      F@_10, F@_11, F@_12, F@_13, Prev, F@_15, F@_16,
		      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_resource(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_resource(Prev, NewFValue,
						      TrUserData)
			    end,
			    F@_15, F@_16, TrUserData).

d_field_span_same_process_as_parent_span(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, F@_15, F@_16,
					 TrUserData)
    when N < 57 ->
    d_field_span_same_process_as_parent_span(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2, F@_3,
					     F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
					     F@_10, F@_11, F@_12, F@_13, F@_14,
					     F@_15, F@_16, TrUserData);
d_field_span_same_process_as_parent_span(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					 F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
					 F@_12, F@_13, F@_14, Prev, F@_16,
					 TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_bool_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_bool_value(Prev, NewFValue,
							TrUserData)
			    end,
			    F@_16, TrUserData).

d_field_span_child_span_count(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, F@_16, TrUserData)
    when N < 57 ->
    d_field_span_child_span_count(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
				  F@_13, F@_14, F@_15, F@_16, TrUserData);
d_field_span_child_span_count(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      F@_8, F@_9, F@_10, F@_11, F@_12, F@_13, F@_14,
			      F@_15, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_u_int_32_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_span(RestF, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15,
			    if Prev == '$undef' -> NewFValue;
			       true ->
				   merge_msg_u_int_32_value(Prev, NewFValue,
							    TrUserData)
			    end,
			    TrUserData).

skip_varint_span(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		 F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		 TrUserData) ->
    skip_varint_span(Rest, Z1, Z2, F@_1, F@_2, F@_3, F@_4,
		     F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		     F@_13, F@_14, F@_15, F@_16, TrUserData);
skip_varint_span(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		 F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9,
		 F@_10, F@_11, F@_12, F@_13, F@_14, F@_15, F@_16,
		 TrUserData) ->
    dfp_read_field_def_span(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

skip_length_delimited_span(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, TrUserData)
    when N < 57 ->
    skip_length_delimited_span(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			       F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			       F@_16, TrUserData);
skip_length_delimited_span(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, F@_8,
			   F@_9, F@_10, F@_11, F@_12, F@_13, F@_14, F@_15,
			   F@_16, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_span(Rest2, 0, 0, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

skip_group_span(Bin, FNum, Z2, F@_1, F@_2, F@_3, F@_4,
		F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11, F@_12,
		F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_span(Rest, 0, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

skip_32_span(<<_:32, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
	     F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    dfp_read_field_def_span(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

skip_64_span(<<_:64, Rest/binary>>, Z1, Z2, F@_1, F@_2,
	     F@_3, F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
	     F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData) ->
    dfp_read_field_def_span(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, F@_8, F@_9, F@_10, F@_11,
			    F@_12, F@_13, F@_14, F@_15, F@_16, TrUserData).

decode_msg_status(Bin, TrUserData) ->
    dfp_read_field_def_status(Bin, 0, 0, id(0, TrUserData),
			      id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_status(<<8, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_status_code(Rest, Z1, Z2, F@_1, F@_2,
			TrUserData);
dfp_read_field_def_status(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_status_message(Rest, Z1, Z2, F@_1, F@_2,
			   TrUserData);
dfp_read_field_def_status(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{code => F@_1, message => F@_2};
dfp_read_field_def_status(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_status(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_status(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_status(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_status(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_status_code(Rest, 0, 0, F@_1, F@_2, TrUserData);
      18 ->
	  d_field_status_message(Rest, 0, 0, F@_1, F@_2,
				 TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_status(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_status(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_status(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_status(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_status(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_status(<<>>, 0, 0, F@_1, F@_2, _) ->
    #{code => F@_1, message => F@_2}.

d_field_status_code(<<1:1, X:7, Rest/binary>>, N, Acc,
		    F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_status_code(Rest, N + 7, X bsl N + Acc, F@_1,
			F@_2, TrUserData);
d_field_status_code(<<0:1, X:7, Rest/binary>>, N, Acc,
		    _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_status(RestF, 0, 0, NewFValue, F@_2,
			      TrUserData).

d_field_status_message(<<1:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_status_message(Rest, N + 7, X bsl N + Acc, F@_1,
			   F@_2, TrUserData);
d_field_status_message(<<0:1, X:7, Rest/binary>>, N,
		       Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_status(RestF, 0, 0, F@_1, NewFValue,
			      TrUserData).

skip_varint_status(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_status(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_status(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_status(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_status(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_status(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_status(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_status(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_status(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_status(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_status(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_status(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_status(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_status(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_attribute_value(Bin, TrUserData) ->
    dfp_read_field_def_attribute_value(Bin, 0, 0,
				       id('$undef', TrUserData), TrUserData).

dfp_read_field_def_attribute_value(<<10, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_string_value(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_attribute_value(<<16, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_int_value(Rest, Z1, Z2, F@_1,
				      TrUserData);
dfp_read_field_def_attribute_value(<<24, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_bool_value(Rest, Z1, Z2, F@_1,
				       TrUserData);
dfp_read_field_def_attribute_value(<<33, Rest/binary>>,
				   Z1, Z2, F@_1, TrUserData) ->
    d_field_attribute_value_double_value(Rest, Z1, Z2, F@_1,
					 TrUserData);
dfp_read_field_def_attribute_value(<<>>, 0, 0, F@_1,
				   _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end;
dfp_read_field_def_attribute_value(Other, Z1, Z2, F@_1,
				   TrUserData) ->
    dg_read_field_def_attribute_value(Other, Z1, Z2, F@_1,
				      TrUserData).

dg_read_field_def_attribute_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_attribute_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_attribute_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_attribute_value_string_value(Rest, 0, 0, F@_1,
					       TrUserData);
      16 ->
	  d_field_attribute_value_int_value(Rest, 0, 0, F@_1,
					    TrUserData);
      24 ->
	  d_field_attribute_value_bool_value(Rest, 0, 0, F@_1,
					     TrUserData);
      33 ->
	  d_field_attribute_value_double_value(Rest, 0, 0, F@_1,
					       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_attribute_value(Rest, 0, 0, F@_1,
					    TrUserData);
	    1 ->
		skip_64_attribute_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_attribute_value(Rest, 0, 0, F@_1,
						      TrUserData);
	    3 ->
		skip_group_attribute_value(Rest, Key bsr 3, 0, F@_1,
					   TrUserData);
	    5 ->
		skip_32_attribute_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_attribute_value(<<>>, 0, 0, F@_1,
				  _) ->
    S1 = #{},
    if F@_1 == '$undef' -> S1;
       true -> S1#{value => F@_1}
    end.

d_field_attribute_value_string_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_attribute_value_string_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
d_field_attribute_value_string_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_attribute_value(RestF, 0, 0,
				       case Prev of
					 '$undef' ->
					     id({string_value, NewFValue},
						TrUserData);
					 {string_value, MVPrev} ->
					     id({string_value,
						 merge_msg_truncatable_string(MVPrev,
									      NewFValue,
									      TrUserData)},
						TrUserData);
					 _ ->
					     id({string_value, NewFValue},
						TrUserData)
				       end,
				       TrUserData).

d_field_attribute_value_int_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_attribute_value_int_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
d_field_attribute_value_int_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_attribute_value(RestF, 0, 0,
				       id({int_value, NewFValue}, TrUserData),
				       TrUserData).

d_field_attribute_value_bool_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_attribute_value_bool_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
d_field_attribute_value_bool_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_attribute_value(RestF, 0, 0,
				       id({bool_value, NewFValue}, TrUserData),
				       TrUserData).

d_field_attribute_value_double_value(<<0:48, 240, 127,
				       Rest/binary>>,
				     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2,
				       id({double_value,
					   id(infinity, TrUserData)},
					  TrUserData),
				       TrUserData);
d_field_attribute_value_double_value(<<0:48, 240, 255,
				       Rest/binary>>,
				     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2,
				       id({double_value,
					   id('-infinity', TrUserData)},
					  TrUserData),
				       TrUserData);
d_field_attribute_value_double_value(<<_:48, 15:4, _:4,
				       _:1, 127:7, Rest/binary>>,
				     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2,
				       id({double_value, id(nan, TrUserData)},
					  TrUserData),
				       TrUserData);
d_field_attribute_value_double_value(<<Value:64/little-float,
				       Rest/binary>>,
				     Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2,
				       id({double_value, id(Value, TrUserData)},
					  TrUserData),
				       TrUserData).

skip_varint_attribute_value(<<1:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    skip_varint_attribute_value(Rest, Z1, Z2, F@_1,
				TrUserData);
skip_varint_attribute_value(<<0:1, _:7, Rest/binary>>,
			    Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_length_delimited_attribute_value(<<1:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_attribute_value(Rest, N + 7,
					  X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_attribute_value(<<0:1, X:7,
					Rest/binary>>,
				      N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_attribute_value(Rest2, 0, 0, F@_1,
				       TrUserData).

skip_group_attribute_value(Bin, FNum, Z2, F@_1,
			   TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_attribute_value(Rest, 0, Z2, F@_1,
				       TrUserData).

skip_32_attribute_value(<<_:32, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2, F@_1,
				       TrUserData).

skip_64_attribute_value(<<_:64, Rest/binary>>, Z1, Z2,
			F@_1, TrUserData) ->
    dfp_read_field_def_attribute_value(Rest, Z1, Z2, F@_1,
				       TrUserData).

decode_msg_stack_frame(Bin, TrUserData) ->
    dfp_read_field_def_stack_frame(Bin, 0, 0,
				   id('$undef', TrUserData),
				   id('$undef', TrUserData),
				   id('$undef', TrUserData), id(0, TrUserData),
				   id(0, TrUserData), id('$undef', TrUserData),
				   id('$undef', TrUserData), TrUserData).

dfp_read_field_def_stack_frame(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_function_name(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData);
dfp_read_field_def_stack_frame(<<18, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_original_function_name(Rest, Z1, Z2,
					       F@_1, F@_2, F@_3, F@_4, F@_5,
					       F@_6, F@_7, TrUserData);
dfp_read_field_def_stack_frame(<<26, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_file_name(Rest, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData);
dfp_read_field_def_stack_frame(<<32, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_line_number(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_stack_frame(<<40, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_column_number(Rest, Z1, Z2, F@_1,
				      F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				      TrUserData);
dfp_read_field_def_stack_frame(<<50, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_load_module(Rest, Z1, Z2, F@_1,
				    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				    TrUserData);
dfp_read_field_def_stack_frame(<<58, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    d_field_stack_frame_source_version(Rest, Z1, Z2, F@_1,
				       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
dfp_read_field_def_stack_frame(<<>>, 0, 0, F@_1, F@_2,
			       F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{line_number => F@_4, column_number => F@_5},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{function_name => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{original_function_name => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{file_name => F@_3}
	 end,
    S5 = if F@_6 == '$undef' -> S4;
	    true -> S4#{load_module => F@_6}
	 end,
    if F@_7 == '$undef' -> S5;
       true -> S5#{source_version => F@_7}
    end;
dfp_read_field_def_stack_frame(Other, Z1, Z2, F@_1,
			       F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			       TrUserData) ->
    dg_read_field_def_stack_frame(Other, Z1, Z2, F@_1, F@_2,
				  F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

dg_read_field_def_stack_frame(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stack_frame(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
dg_read_field_def_stack_frame(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_stack_frame_function_name(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
      18 ->
	  d_field_stack_frame_original_function_name(Rest, 0, 0,
						     F@_1, F@_2, F@_3, F@_4,
						     F@_5, F@_6, F@_7,
						     TrUserData);
      26 ->
	  d_field_stack_frame_file_name(Rest, 0, 0, F@_1, F@_2,
					F@_3, F@_4, F@_5, F@_6, F@_7,
					TrUserData);
      32 ->
	  d_field_stack_frame_line_number(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      40 ->
	  d_field_stack_frame_column_number(Rest, 0, 0, F@_1,
					    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					    TrUserData);
      50 ->
	  d_field_stack_frame_load_module(Rest, 0, 0, F@_1, F@_2,
					  F@_3, F@_4, F@_5, F@_6, F@_7,
					  TrUserData);
      58 ->
	  d_field_stack_frame_source_version(Rest, 0, 0, F@_1,
					     F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
					     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_stack_frame(Rest, 0, 0, F@_1, F@_2, F@_3,
					F@_4, F@_5, F@_6, F@_7, TrUserData);
	    1 ->
		skip_64_stack_frame(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, TrUserData);
	    2 ->
		skip_length_delimited_stack_frame(Rest, 0, 0, F@_1,
						  F@_2, F@_3, F@_4, F@_5, F@_6,
						  F@_7, TrUserData);
	    3 ->
		skip_group_stack_frame(Rest, Key bsr 3, 0, F@_1, F@_2,
				       F@_3, F@_4, F@_5, F@_6, F@_7,
				       TrUserData);
	    5 ->
		skip_32_stack_frame(Rest, 0, 0, F@_1, F@_2, F@_3, F@_4,
				    F@_5, F@_6, F@_7, TrUserData)
	  end
    end;
dg_read_field_def_stack_frame(<<>>, 0, 0, F@_1, F@_2,
			      F@_3, F@_4, F@_5, F@_6, F@_7, _) ->
    S1 = #{line_number => F@_4, column_number => F@_5},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{function_name => F@_1}
	 end,
    S3 = if F@_2 == '$undef' -> S2;
	    true -> S2#{original_function_name => F@_2}
	 end,
    S4 = if F@_3 == '$undef' -> S3;
	    true -> S3#{file_name => F@_3}
	 end,
    S5 = if F@_6 == '$undef' -> S4;
	    true -> S4#{load_module => F@_6}
	 end,
    if F@_7 == '$undef' -> S5;
       true -> S5#{source_version => F@_7}
    end.

d_field_stack_frame_function_name(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_function_name(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_function_name(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, Prev, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_truncatable_string(Prev,
								       NewFValue,
								       TrUserData)
				   end,
				   F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
				   TrUserData).

d_field_stack_frame_original_function_name(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_original_function_name(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2, F@_3,
					       F@_4, F@_5, F@_6, F@_7,
					       TrUserData);
d_field_stack_frame_original_function_name(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, Prev, F@_3, F@_4, F@_5,
					   F@_6, F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame(RestF, 0, 0, F@_1,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_truncatable_string(Prev,
								       NewFValue,
								       TrUserData)
				   end,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_stack_frame_file_name(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			      TrUserData)
    when N < 57 ->
    d_field_stack_frame_file_name(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				  F@_6, F@_7, TrUserData);
d_field_stack_frame_file_name(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, Prev, F@_4, F@_5, F@_6, F@_7,
			      TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame(RestF, 0, 0, F@_1, F@_2,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_truncatable_string(Prev,
								       NewFValue,
								       TrUserData)
				   end,
				   F@_4, F@_5, F@_6, F@_7, TrUserData).

d_field_stack_frame_line_number(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_line_number(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_stack_frame_line_number(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, _, F@_5, F@_6, F@_7,
				TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_stack_frame(RestF, 0, 0, F@_1, F@_2,
				   F@_3, NewFValue, F@_5, F@_6, F@_7,
				   TrUserData).

d_field_stack_frame_column_number(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_column_number(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_column_number(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, _, F@_6, F@_7,
				  TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_stack_frame(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, NewFValue, F@_6, F@_7,
				   TrUserData).

d_field_stack_frame_load_module(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_load_module(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, F@_3, F@_4, F@_5,
				    F@_6, F@_7, TrUserData);
d_field_stack_frame_load_module(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, Prev,
				F@_7, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_module(Bs, TrUserData), TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_module(Prev, NewFValue,
							   TrUserData)
				   end,
				   F@_7, TrUserData).

d_field_stack_frame_source_version(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   F@_7, TrUserData)
    when N < 57 ->
    d_field_stack_frame_source_version(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				       F@_5, F@_6, F@_7, TrUserData);
d_field_stack_frame_source_version(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				   Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frame(RestF, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_truncatable_string(Prev,
								       NewFValue,
								       TrUserData)
				   end,
				   TrUserData).

skip_varint_stack_frame(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    skip_varint_stack_frame(Rest, Z1, Z2, F@_1, F@_2, F@_3,
			    F@_4, F@_5, F@_6, F@_7, TrUserData);
skip_varint_stack_frame(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6, F@_7,
			TrUserData) ->
    dfp_read_field_def_stack_frame(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_length_delimited_stack_frame(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData)
    when N < 57 ->
    skip_length_delimited_stack_frame(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, F@_3, F@_4,
				      F@_5, F@_6, F@_7, TrUserData);
skip_length_delimited_stack_frame(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, F@_3, F@_4, F@_5, F@_6,
				  F@_7, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stack_frame(Rest2, 0, 0, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_group_stack_frame(Bin, FNum, Z2, F@_1, F@_2, F@_3,
		       F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stack_frame(Rest, 0, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_32_stack_frame(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_stack_frame(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

skip_64_stack_frame(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData) ->
    dfp_read_field_def_stack_frame(Rest, Z1, Z2, F@_1, F@_2,
				   F@_3, F@_4, F@_5, F@_6, F@_7, TrUserData).

decode_msg_stack_frames(Bin, TrUserData) ->
    dfp_read_field_def_stack_frames(Bin, 0, 0,
				    id([], TrUserData), id(0, TrUserData),
				    TrUserData).

dfp_read_field_def_stack_frames(<<10, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_frames_frame(Rest, Z1, Z2, F@_1, F@_2,
			       TrUserData);
dfp_read_field_def_stack_frames(<<16, Rest/binary>>, Z1,
				Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_frames_dropped_frames_count(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
dfp_read_field_def_stack_frames(<<>>, 0, 0, R1, F@_2,
				TrUserData) ->
    S1 = #{dropped_frames_count => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{frame => lists_reverse(R1, TrUserData)}
    end;
dfp_read_field_def_stack_frames(Other, Z1, Z2, F@_1,
				F@_2, TrUserData) ->
    dg_read_field_def_stack_frames(Other, Z1, Z2, F@_1,
				   F@_2, TrUserData).

dg_read_field_def_stack_frames(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stack_frames(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_stack_frames(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_stack_frames_frame(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
      16 ->
	  d_field_stack_frames_dropped_frames_count(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_stack_frames(Rest, 0, 0, F@_1, F@_2,
					 TrUserData);
	    1 ->
		skip_64_stack_frames(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    2 ->
		skip_length_delimited_stack_frames(Rest, 0, 0, F@_1,
						   F@_2, TrUserData);
	    3 ->
		skip_group_stack_frames(Rest, Key bsr 3, 0, F@_1, F@_2,
					TrUserData);
	    5 ->
		skip_32_stack_frames(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_stack_frames(<<>>, 0, 0, R1, F@_2,
			       TrUserData) ->
    S1 = #{dropped_frames_count => F@_2},
    if R1 == '$undef' -> S1;
       true -> S1#{frame => lists_reverse(R1, TrUserData)}
    end.

d_field_stack_frames_frame(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_frames_frame(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
d_field_stack_frames_frame(<<0:1, X:7, Rest/binary>>, N,
			   Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_stack_frame(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_frames(RestF, 0, 0,
				    cons(NewFValue, Prev, TrUserData), F@_2,
				    TrUserData).

d_field_stack_frames_dropped_frames_count(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_frames_dropped_frames_count(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
d_field_stack_frames_dropped_frames_count(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_stack_frames(RestF, 0, 0, F@_1,
				    NewFValue, TrUserData).

skip_varint_stack_frames(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_stack_frames(Rest, Z1, Z2, F@_1, F@_2,
			     TrUserData);
skip_varint_stack_frames(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_frames(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_length_delimited_stack_frames(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_stack_frames(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_stack_frames(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stack_frames(Rest2, 0, 0, F@_1, F@_2,
				    TrUserData).

skip_group_stack_frames(Bin, FNum, Z2, F@_1, F@_2,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stack_frames(Rest, 0, Z2, F@_1, F@_2,
				    TrUserData).

skip_32_stack_frames(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_frames(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

skip_64_stack_frames(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_frames(Rest, Z1, Z2, F@_1,
				    F@_2, TrUserData).

decode_msg_stack_trace(Bin, TrUserData) ->
    dfp_read_field_def_stack_trace(Bin, 0, 0,
				   id('$undef', TrUserData), id(0, TrUserData),
				   TrUserData).

dfp_read_field_def_stack_trace(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_trace_stack_frames(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_stack_trace(<<16, Rest/binary>>, Z1,
			       Z2, F@_1, F@_2, TrUserData) ->
    d_field_stack_trace_stack_trace_hash_id(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData);
dfp_read_field_def_stack_trace(<<>>, 0, 0, F@_1, F@_2,
			       _) ->
    S1 = #{stack_trace_hash_id => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{stack_frames => F@_1}
    end;
dfp_read_field_def_stack_trace(Other, Z1, Z2, F@_1,
			       F@_2, TrUserData) ->
    dg_read_field_def_stack_trace(Other, Z1, Z2, F@_1, F@_2,
				  TrUserData).

dg_read_field_def_stack_trace(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_stack_trace(Rest, N + 7,
				  X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_stack_trace(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_stack_trace_stack_frames(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_stack_trace_stack_trace_hash_id(Rest, 0, 0,
						  F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_stack_trace(Rest, 0, 0, F@_1, F@_2,
					TrUserData);
	    1 ->
		skip_64_stack_trace(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_stack_trace(Rest, 0, 0, F@_1,
						  F@_2, TrUserData);
	    3 ->
		skip_group_stack_trace(Rest, Key bsr 3, 0, F@_1, F@_2,
				       TrUserData);
	    5 ->
		skip_32_stack_trace(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_stack_trace(<<>>, 0, 0, F@_1, F@_2,
			      _) ->
    S1 = #{stack_trace_hash_id => F@_2},
    if F@_1 == '$undef' -> S1;
       true -> S1#{stack_frames => F@_1}
    end.

d_field_stack_trace_stack_frames(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_trace_stack_frames(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_stack_trace_stack_frames(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_stack_frames(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_stack_trace(RestF, 0, 0,
				   if Prev == '$undef' -> NewFValue;
				      true ->
					  merge_msg_stack_frames(Prev,
								 NewFValue,
								 TrUserData)
				   end,
				   F@_2, TrUserData).

d_field_stack_trace_stack_trace_hash_id(<<1:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_stack_trace_stack_trace_hash_id(Rest, N + 7,
					    X bsl N + Acc, F@_1, F@_2,
					    TrUserData);
d_field_stack_trace_stack_trace_hash_id(<<0:1, X:7,
					  Rest/binary>>,
					N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_stack_trace(RestF, 0, 0, F@_1,
				   NewFValue, TrUserData).

skip_varint_stack_trace(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_stack_trace(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
skip_varint_stack_trace(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_stack_trace(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_length_delimited_stack_trace(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_stack_trace(Rest, N + 7,
				      X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_stack_trace(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_stack_trace(Rest2, 0, 0, F@_1, F@_2,
				   TrUserData).

skip_group_stack_trace(Bin, FNum, Z2, F@_1, F@_2,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_stack_trace(Rest, 0, Z2, F@_1, F@_2,
				   TrUserData).

skip_32_stack_trace(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_stack_trace(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

skip_64_stack_trace(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    F@_2, TrUserData) ->
    dfp_read_field_def_stack_trace(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData).

decode_msg_module(Bin, TrUserData) ->
    dfp_read_field_def_module(Bin, 0, 0,
			      id('$undef', TrUserData),
			      id('$undef', TrUserData), TrUserData).

dfp_read_field_def_module(<<10, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_module_module(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_module(<<18, Rest/binary>>, Z1, Z2,
			  F@_1, F@_2, TrUserData) ->
    d_field_module_build_id(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_module(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{module => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{build_id => F@_2}
    end;
dfp_read_field_def_module(Other, Z1, Z2, F@_1, F@_2,
			  TrUserData) ->
    dg_read_field_def_module(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData).

dg_read_field_def_module(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_module(Rest, N + 7, X bsl N + Acc,
			     F@_1, F@_2, TrUserData);
dg_read_field_def_module(<<0:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_module_module(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_module_build_id(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_module(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    1 -> skip_64_module(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_module(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    3 ->
		skip_group_module(Rest, Key bsr 3, 0, F@_1, F@_2,
				  TrUserData);
	    5 -> skip_32_module(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_module(<<>>, 0, 0, F@_1, F@_2, _) ->
    S1 = #{},
    S2 = if F@_1 == '$undef' -> S1;
	    true -> S1#{module => F@_1}
	 end,
    if F@_2 == '$undef' -> S2;
       true -> S2#{build_id => F@_2}
    end.

d_field_module_module(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_module_module(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_module_module(<<0:1, X:7, Rest/binary>>, N, Acc,
		      Prev, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_module(RestF, 0, 0,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_truncatable_string(Prev,
								  NewFValue,
								  TrUserData)
			      end,
			      F@_2, TrUserData).

d_field_module_build_id(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_module_build_id(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_module_build_id(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_truncatable_string(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_module(RestF, 0, 0, F@_1,
			      if Prev == '$undef' -> NewFValue;
				 true ->
				     merge_msg_truncatable_string(Prev,
								  NewFValue,
								  TrUserData)
			      end,
			      TrUserData).

skip_varint_module(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    skip_varint_module(Rest, Z1, Z2, F@_1, F@_2,
		       TrUserData);
skip_varint_module(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		   F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_module(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_length_delimited_module(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_module(Rest, N + 7, X bsl N + Acc,
				 F@_1, F@_2, TrUserData);
skip_length_delimited_module(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_module(Rest2, 0, 0, F@_1, F@_2,
			      TrUserData).

skip_group_module(Bin, FNum, Z2, F@_1, F@_2,
		  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_module(Rest, 0, Z2, F@_1, F@_2,
			      TrUserData).

skip_32_module(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_module(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

skip_64_module(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
	       F@_2, TrUserData) ->
    dfp_read_field_def_module(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData).

decode_msg_truncatable_string(Bin, TrUserData) ->
    dfp_read_field_def_truncatable_string(Bin, 0, 0,
					  id(<<>>, TrUserData),
					  id(0, TrUserData), TrUserData).

dfp_read_field_def_truncatable_string(<<10,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_truncatable_string_value(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
dfp_read_field_def_truncatable_string(<<16,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    d_field_truncatable_string_truncated_byte_count(Rest,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData);
dfp_read_field_def_truncatable_string(<<>>, 0, 0, F@_1,
				      F@_2, _) ->
    #{value => F@_1, truncated_byte_count => F@_2};
dfp_read_field_def_truncatable_string(Other, Z1, Z2,
				      F@_1, F@_2, TrUserData) ->
    dg_read_field_def_truncatable_string(Other, Z1, Z2,
					 F@_1, F@_2, TrUserData).

dg_read_field_def_truncatable_string(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_truncatable_string(Rest, N + 7,
					 X bsl N + Acc, F@_1, F@_2, TrUserData);
dg_read_field_def_truncatable_string(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_truncatable_string_value(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      16 ->
	  d_field_truncatable_string_truncated_byte_count(Rest, 0,
							  0, F@_1, F@_2,
							  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_truncatable_string(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    1 ->
		skip_64_truncatable_string(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
	    2 ->
		skip_length_delimited_truncatable_string(Rest, 0, 0,
							 F@_1, F@_2,
							 TrUserData);
	    3 ->
		skip_group_truncatable_string(Rest, Key bsr 3, 0, F@_1,
					      F@_2, TrUserData);
	    5 ->
		skip_32_truncatable_string(Rest, 0, 0, F@_1, F@_2,
					   TrUserData)
	  end
    end;
dg_read_field_def_truncatable_string(<<>>, 0, 0, F@_1,
				     F@_2, _) ->
    #{value => F@_1, truncated_byte_count => F@_2}.

d_field_truncatable_string_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_truncatable_string_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
d_field_truncatable_string_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_truncatable_string(RestF, 0, 0,
					  NewFValue, F@_2, TrUserData).

d_field_truncatable_string_truncated_byte_count(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_truncatable_string_truncated_byte_count(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
d_field_truncatable_string_truncated_byte_count(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_truncatable_string(RestF, 0, 0, F@_1,
					  NewFValue, TrUserData).

skip_varint_truncatable_string(<<1:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    skip_varint_truncatable_string(Rest, Z1, Z2, F@_1, F@_2,
				   TrUserData);
skip_varint_truncatable_string(<<0:1, _:7,
				 Rest/binary>>,
			       Z1, Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_truncatable_string(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_length_delimited_truncatable_string(<<1:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_truncatable_string(Rest, N + 7,
					     X bsl N + Acc, F@_1, F@_2,
					     TrUserData);
skip_length_delimited_truncatable_string(<<0:1, X:7,
					   Rest/binary>>,
					 N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_truncatable_string(Rest2, 0, 0, F@_1,
					  F@_2, TrUserData).

skip_group_truncatable_string(Bin, FNum, Z2, F@_1, F@_2,
			      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_truncatable_string(Rest, 0, Z2, F@_1,
					  F@_2, TrUserData).

skip_32_truncatable_string(<<_:32, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_truncatable_string(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

skip_64_truncatable_string(<<_:64, Rest/binary>>, Z1,
			   Z2, F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_truncatable_string(Rest, Z1, Z2,
					  F@_1, F@_2, TrUserData).

decode_msg_resource(Bin, TrUserData) ->
    dfp_read_field_def_resource(Bin, 0, 0,
				id(<<>>, TrUserData),
				'tr_decode_init_default_resource.labels'([],
									 TrUserData),
				TrUserData).

dfp_read_field_def_resource(<<10, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_resource_type(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
dfp_read_field_def_resource(<<18, Rest/binary>>, Z1, Z2,
			    F@_1, F@_2, TrUserData) ->
    d_field_resource_labels(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_resource(<<>>, 0, 0, F@_1, R1,
			    TrUserData) ->
    #{type => F@_1,
      labels =>
	  'tr_decode_repeated_finalize_resource.labels'(R1,
							TrUserData)};
dfp_read_field_def_resource(Other, Z1, Z2, F@_1, F@_2,
			    TrUserData) ->
    dg_read_field_def_resource(Other, Z1, Z2, F@_1, F@_2,
			       TrUserData).

dg_read_field_def_resource(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_resource(Rest, N + 7, X bsl N + Acc,
			       F@_1, F@_2, TrUserData);
dg_read_field_def_resource(<<0:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_resource_type(Rest, 0, 0, F@_1, F@_2,
				TrUserData);
      18 ->
	  d_field_resource_labels(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_resource(Rest, 0, 0, F@_1, F@_2,
				     TrUserData);
	    1 ->
		skip_64_resource(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_resource(Rest, 0, 0, F@_1, F@_2,
					       TrUserData);
	    3 ->
		skip_group_resource(Rest, Key bsr 3, 0, F@_1, F@_2,
				    TrUserData);
	    5 ->
		skip_32_resource(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_resource(<<>>, 0, 0, F@_1, R1,
			   TrUserData) ->
    #{type => F@_1,
      labels =>
	  'tr_decode_repeated_finalize_resource.labels'(R1,
							TrUserData)}.

d_field_resource_type(<<1:1, X:7, Rest/binary>>, N, Acc,
		      F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_resource_type(Rest, N + 7, X bsl N + Acc, F@_1,
			  F@_2, TrUserData);
d_field_resource_type(<<0:1, X:7, Rest/binary>>, N, Acc,
		      _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_resource(RestF, 0, 0, NewFValue,
				F@_2, TrUserData).

d_field_resource_labels(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_resource_labels(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_resource_labels(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id('decode_msg_map<string,string>'(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    dfp_read_field_def_resource(RestF, 0, 0, F@_1,
				'tr_decode_repeated_add_elem_resource.labels'(NewFValue,
									      Prev,
									      TrUserData),
				TrUserData).

skip_varint_resource(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    skip_varint_resource(Rest, Z1, Z2, F@_1, F@_2,
			 TrUserData);
skip_varint_resource(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		     F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_resource(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_length_delimited_resource(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_resource(Rest, N + 7,
				   X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_resource(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_resource(Rest2, 0, 0, F@_1, F@_2,
				TrUserData).

skip_group_resource(Bin, FNum, Z2, F@_1, F@_2,
		    TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_resource(Rest, 0, Z2, F@_1, F@_2,
				TrUserData).

skip_32_resource(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_resource(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

skip_64_resource(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		 F@_2, TrUserData) ->
    dfp_read_field_def_resource(Rest, Z1, Z2, F@_1, F@_2,
				TrUserData).

decode_msg_timestamp(Bin, TrUserData) ->
    dfp_read_field_def_timestamp(Bin, 0, 0,
				 id(0, TrUserData), id(0, TrUserData),
				 TrUserData).

dfp_read_field_def_timestamp(<<8, Rest/binary>>, Z1, Z2,
			     F@_1, F@_2, TrUserData) ->
    d_field_timestamp_seconds(Rest, Z1, Z2, F@_1, F@_2,
			      TrUserData);
dfp_read_field_def_timestamp(<<16, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    d_field_timestamp_nanos(Rest, Z1, Z2, F@_1, F@_2,
			    TrUserData);
dfp_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			     _) ->
    #{seconds => F@_1, nanos => F@_2};
dfp_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
			     TrUserData) ->
    dg_read_field_def_timestamp(Other, Z1, Z2, F@_1, F@_2,
				TrUserData).

dg_read_field_def_timestamp(<<1:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_timestamp(Rest, N + 7, X bsl N + Acc,
				F@_1, F@_2, TrUserData);
dg_read_field_def_timestamp(<<0:1, X:7, Rest/binary>>,
			    N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_timestamp_seconds(Rest, 0, 0, F@_1, F@_2,
				    TrUserData);
      16 ->
	  d_field_timestamp_nanos(Rest, 0, 0, F@_1, F@_2,
				  TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_timestamp(Rest, 0, 0, F@_1, F@_2,
				      TrUserData);
	    1 ->
		skip_64_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData);
	    2 ->
		skip_length_delimited_timestamp(Rest, 0, 0, F@_1, F@_2,
						TrUserData);
	    3 ->
		skip_group_timestamp(Rest, Key bsr 3, 0, F@_1, F@_2,
				     TrUserData);
	    5 ->
		skip_32_timestamp(Rest, 0, 0, F@_1, F@_2, TrUserData)
	  end
    end;
dg_read_field_def_timestamp(<<>>, 0, 0, F@_1, F@_2,
			    _) ->
    #{seconds => F@_1, nanos => F@_2}.

d_field_timestamp_seconds(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_seconds(Rest, N + 7, X bsl N + Acc,
			      F@_1, F@_2, TrUserData);
d_field_timestamp_seconds(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, NewFValue,
				 F@_2, TrUserData).

d_field_timestamp_nanos(<<1:1, X:7, Rest/binary>>, N,
			Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    d_field_timestamp_nanos(Rest, N + 7, X bsl N + Acc,
			    F@_1, F@_2, TrUserData);
d_field_timestamp_nanos(<<0:1, X:7, Rest/binary>>, N,
			Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_timestamp(RestF, 0, 0, F@_1,
				 NewFValue, TrUserData).

skip_varint_timestamp(<<1:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    skip_varint_timestamp(Rest, Z1, Z2, F@_1, F@_2,
			  TrUserData);
skip_varint_timestamp(<<0:1, _:7, Rest/binary>>, Z1, Z2,
		      F@_1, F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_length_delimited_timestamp(<<1:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    skip_length_delimited_timestamp(Rest, N + 7,
				    X bsl N + Acc, F@_1, F@_2, TrUserData);
skip_length_delimited_timestamp(<<0:1, X:7,
				  Rest/binary>>,
				N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_timestamp(Rest2, 0, 0, F@_1, F@_2,
				 TrUserData).

skip_group_timestamp(Bin, FNum, Z2, F@_1, F@_2,
		     TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_timestamp(Rest, 0, Z2, F@_1, F@_2,
				 TrUserData).

skip_32_timestamp(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

skip_64_timestamp(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		  F@_2, TrUserData) ->
    dfp_read_field_def_timestamp(Rest, Z1, Z2, F@_1, F@_2,
				 TrUserData).

decode_msg_double_value(Bin, TrUserData) ->
    dfp_read_field_def_double_value(Bin, 0, 0,
				    id(0.0, TrUserData), TrUserData).

dfp_read_field_def_double_value(<<9, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_double_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_double_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_double_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_double_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_double_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_double_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_double_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      9 ->
	  d_field_double_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_double_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_double_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_double_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_double_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_double_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_double_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_double_value_value(<<0:48, 240, 127,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(infinity, TrUserData), TrUserData);
d_field_double_value_value(<<0:48, 240, 255,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id('-infinity', TrUserData), TrUserData);
d_field_double_value_value(<<_:48, 15:4, _:4, _:1,
			     127:7, Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(nan, TrUserData), TrUserData);
d_field_double_value_value(<<Value:64/little-float,
			     Rest/binary>>,
			   Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2,
				    id(Value, TrUserData), TrUserData).

skip_varint_double_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_double_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_double_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_double_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_double_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_double_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_double_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_double_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_double_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_double_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_double_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_double_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_float_value(Bin, TrUserData) ->
    dfp_read_field_def_float_value(Bin, 0, 0,
				   id(0.0, TrUserData), TrUserData).

dfp_read_field_def_float_value(<<13, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_float_value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_float_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_float_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_float_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_float_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_float_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_float_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      13 ->
	  d_field_float_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_float_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_float_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_float_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_float_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_float_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_float_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_float_value_value(<<0:16, 128, 127,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(infinity, TrUserData), TrUserData);
d_field_float_value_value(<<0:16, 128, 255,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id('-infinity', TrUserData), TrUserData);
d_field_float_value_value(<<_:16, 1:1, _:7, _:1, 127:7,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(nan, TrUserData), TrUserData);
d_field_float_value_value(<<Value:32/little-float,
			    Rest/binary>>,
			  Z1, Z2, _, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2,
				   id(Value, TrUserData), TrUserData).

skip_varint_float_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_float_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_float_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_float_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_float_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_float_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_float_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_float_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_float_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_float_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_float_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_float_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

decode_msg_int_64_value(Bin, TrUserData) ->
    dfp_read_field_def_int_64_value(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_int_64_value(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_int_64_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_int_64_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_int_64_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_int_64_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_64_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_64_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_64_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_64_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_int_64_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_int_64_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_int_64_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_64_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_int_64_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:64/signed-native>> = <<(X bsl N +
							    Acc):64/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_64_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_int_64_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_int_64_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_int_64_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_int_64_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_64_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_64_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_64_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_int_64_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_64_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_int_64_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_int_64_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_64_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_u_int_64_value(Bin, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_64_value(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_64_value_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_u_int_64_value(<<>>, 0, 0, F@_1,
				  _) ->
    #{value => F@_1};
dfp_read_field_def_u_int_64_value(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_u_int_64_value(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_u_int_64_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_64_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_64_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_64_value_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_64_value(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_u_int_64_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_64_value(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_u_int_64_value(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_u_int_64_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_64_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_u_int_64_value_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_64_value_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_u_int_64_value_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_64_value(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_u_int_64_value(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_64_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_u_int_64_value(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_u_int_64_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_64_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_64_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_64_value(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_u_int_64_value(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_64_value(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_u_int_64_value(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_u_int_64_value(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_64_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_int_32_value(Bin, TrUserData) ->
    dfp_read_field_def_int_32_value(Bin, 0, 0,
				    id(0, TrUserData), TrUserData).

dfp_read_field_def_int_32_value(<<8, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_int_32_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_int_32_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_int_32_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_int_32_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_int_32_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_int_32_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_int_32_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_int_32_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_int_32_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_int_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_int_32_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_int_32_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_int_32_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = {begin
			    <<Res:32/signed-native>> = <<(X bsl N +
							    Acc):32/unsigned-native>>,
			    id(Res, TrUserData)
			  end,
			  Rest},
    dfp_read_field_def_int_32_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_int_32_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_int_32_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_int_32_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_int_32_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_int_32_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_int_32_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_int_32_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_int_32_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_int_32_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_int_32_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_int_32_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_int_32_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_u_int_32_value(Bin, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Bin, 0, 0,
				      id(0, TrUserData), TrUserData).

dfp_read_field_def_u_int_32_value(<<8, Rest/binary>>,
				  Z1, Z2, F@_1, TrUserData) ->
    d_field_u_int_32_value_value(Rest, Z1, Z2, F@_1,
				 TrUserData);
dfp_read_field_def_u_int_32_value(<<>>, 0, 0, F@_1,
				  _) ->
    #{value => F@_1};
dfp_read_field_def_u_int_32_value(Other, Z1, Z2, F@_1,
				  TrUserData) ->
    dg_read_field_def_u_int_32_value(Other, Z1, Z2, F@_1,
				     TrUserData).

dg_read_field_def_u_int_32_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_u_int_32_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_u_int_32_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_u_int_32_value_value(Rest, 0, 0, F@_1,
				       TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_u_int_32_value(Rest, 0, 0, F@_1,
					   TrUserData);
	    1 ->
		skip_64_u_int_32_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_u_int_32_value(Rest, 0, 0, F@_1,
						     TrUserData);
	    3 ->
		skip_group_u_int_32_value(Rest, Key bsr 3, 0, F@_1,
					  TrUserData);
	    5 ->
		skip_32_u_int_32_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_u_int_32_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_u_int_32_value_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_u_int_32_value_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
d_field_u_int_32_value_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc, TrUserData),
			  Rest},
    dfp_read_field_def_u_int_32_value(RestF, 0, 0,
				      NewFValue, TrUserData).

skip_varint_u_int_32_value(<<1:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    skip_varint_u_int_32_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
skip_varint_u_int_32_value(<<0:1, _:7, Rest/binary>>,
			   Z1, Z2, F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_length_delimited_u_int_32_value(<<1:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_u_int_32_value(Rest, N + 7,
					 X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_u_int_32_value(<<0:1, X:7,
				       Rest/binary>>,
				     N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_u_int_32_value(Rest2, 0, 0, F@_1,
				      TrUserData).

skip_group_u_int_32_value(Bin, FNum, Z2, F@_1,
			  TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_u_int_32_value(Rest, 0, Z2, F@_1,
				      TrUserData).

skip_32_u_int_32_value(<<_:32, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

skip_64_u_int_32_value(<<_:64, Rest/binary>>, Z1, Z2,
		       F@_1, TrUserData) ->
    dfp_read_field_def_u_int_32_value(Rest, Z1, Z2, F@_1,
				      TrUserData).

decode_msg_bool_value(Bin, TrUserData) ->
    dfp_read_field_def_bool_value(Bin, 0, 0,
				  id(false, TrUserData), TrUserData).

dfp_read_field_def_bool_value(<<8, Rest/binary>>, Z1,
			      Z2, F@_1, TrUserData) ->
    d_field_bool_value_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
dfp_read_field_def_bool_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_bool_value(Other, Z1, Z2, F@_1,
			      TrUserData) ->
    dg_read_field_def_bool_value(Other, Z1, Z2, F@_1,
				 TrUserData).

dg_read_field_def_bool_value(<<1:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bool_value(Rest, N + 7, X bsl N + Acc,
				 F@_1, TrUserData);
dg_read_field_def_bool_value(<<0:1, X:7, Rest/binary>>,
			     N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      8 ->
	  d_field_bool_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bool_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_bool_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bool_value(Rest, 0, 0, F@_1,
						 TrUserData);
	    3 ->
		skip_group_bool_value(Rest, Key bsr 3, 0, F@_1,
				      TrUserData);
	    5 -> skip_32_bool_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bool_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_bool_value_value(<<1:1, X:7, Rest/binary>>, N,
			 Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bool_value_value(Rest, N + 7, X bsl N + Acc,
			     F@_1, TrUserData);
d_field_bool_value_value(<<0:1, X:7, Rest/binary>>, N,
			 Acc, _, TrUserData) ->
    {NewFValue, RestF} = {id(X bsl N + Acc =/= 0,
			     TrUserData),
			  Rest},
    dfp_read_field_def_bool_value(RestF, 0, 0, NewFValue,
				  TrUserData).

skip_varint_bool_value(<<1:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    skip_varint_bool_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_bool_value(<<0:1, _:7, Rest/binary>>, Z1,
		       Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_length_delimited_bool_value(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bool_value(Rest, N + 7,
				     X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bool_value(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bool_value(Rest2, 0, 0, F@_1,
				  TrUserData).

skip_group_bool_value(Bin, FNum, Z2, F@_1,
		      TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bool_value(Rest, 0, Z2, F@_1,
				  TrUserData).

skip_32_bool_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

skip_64_bool_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		   TrUserData) ->
    dfp_read_field_def_bool_value(Rest, Z1, Z2, F@_1,
				  TrUserData).

decode_msg_string_value(Bin, TrUserData) ->
    dfp_read_field_def_string_value(Bin, 0, 0,
				    id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_string_value(<<10, Rest/binary>>, Z1,
				Z2, F@_1, TrUserData) ->
    d_field_string_value_value(Rest, Z1, Z2, F@_1,
			       TrUserData);
dfp_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_string_value(Other, Z1, Z2, F@_1,
				TrUserData) ->
    dg_read_field_def_string_value(Other, Z1, Z2, F@_1,
				   TrUserData).

dg_read_field_def_string_value(<<1:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_string_value(Rest, N + 7,
				   X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_string_value(<<0:1, X:7,
				 Rest/binary>>,
			       N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_string_value_value(Rest, 0, 0, F@_1,
				     TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_string_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_string_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_string_value(Rest, 0, 0, F@_1,
						   TrUserData);
	    3 ->
		skip_group_string_value(Rest, Key bsr 3, 0, F@_1,
					TrUserData);
	    5 -> skip_32_string_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_string_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_string_value_value(<<1:1, X:7, Rest/binary>>, N,
			   Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_string_value_value(Rest, N + 7, X bsl N + Acc,
			       F@_1, TrUserData);
d_field_string_value_value(<<0:1, X:7, Rest/binary>>, N,
			   Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_string_value(RestF, 0, 0, NewFValue,
				    TrUserData).

skip_varint_string_value(<<1:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    skip_varint_string_value(Rest, Z1, Z2, F@_1,
			     TrUserData);
skip_varint_string_value(<<0:1, _:7, Rest/binary>>, Z1,
			 Z2, F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_length_delimited_string_value(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_string_value(Rest, N + 7,
				       X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_string_value(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_string_value(Rest2, 0, 0, F@_1,
				    TrUserData).

skip_group_string_value(Bin, FNum, Z2, F@_1,
			TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_string_value(Rest, 0, Z2, F@_1,
				    TrUserData).

skip_32_string_value(<<_:32, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

skip_64_string_value(<<_:64, Rest/binary>>, Z1, Z2,
		     F@_1, TrUserData) ->
    dfp_read_field_def_string_value(Rest, Z1, Z2, F@_1,
				    TrUserData).

decode_msg_bytes_value(Bin, TrUserData) ->
    dfp_read_field_def_bytes_value(Bin, 0, 0,
				   id(<<>>, TrUserData), TrUserData).

dfp_read_field_def_bytes_value(<<10, Rest/binary>>, Z1,
			       Z2, F@_1, TrUserData) ->
    d_field_bytes_value_value(Rest, Z1, Z2, F@_1,
			      TrUserData);
dfp_read_field_def_bytes_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1};
dfp_read_field_def_bytes_value(Other, Z1, Z2, F@_1,
			       TrUserData) ->
    dg_read_field_def_bytes_value(Other, Z1, Z2, F@_1,
				  TrUserData).

dg_read_field_def_bytes_value(<<1:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData)
    when N < 32 - 7 ->
    dg_read_field_def_bytes_value(Rest, N + 7,
				  X bsl N + Acc, F@_1, TrUserData);
dg_read_field_def_bytes_value(<<0:1, X:7, Rest/binary>>,
			      N, Acc, F@_1, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  d_field_bytes_value_value(Rest, 0, 0, F@_1, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		skip_varint_bytes_value(Rest, 0, 0, F@_1, TrUserData);
	    1 -> skip_64_bytes_value(Rest, 0, 0, F@_1, TrUserData);
	    2 ->
		skip_length_delimited_bytes_value(Rest, 0, 0, F@_1,
						  TrUserData);
	    3 ->
		skip_group_bytes_value(Rest, Key bsr 3, 0, F@_1,
				       TrUserData);
	    5 -> skip_32_bytes_value(Rest, 0, 0, F@_1, TrUserData)
	  end
    end;
dg_read_field_def_bytes_value(<<>>, 0, 0, F@_1, _) ->
    #{value => F@_1}.

d_field_bytes_value_value(<<1:1, X:7, Rest/binary>>, N,
			  Acc, F@_1, TrUserData)
    when N < 57 ->
    d_field_bytes_value_value(Rest, N + 7, X bsl N + Acc,
			      F@_1, TrUserData);
d_field_bytes_value_value(<<0:1, X:7, Rest/binary>>, N,
			  Acc, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    dfp_read_field_def_bytes_value(RestF, 0, 0, NewFValue,
				   TrUserData).

skip_varint_bytes_value(<<1:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    skip_varint_bytes_value(Rest, Z1, Z2, F@_1, TrUserData);
skip_varint_bytes_value(<<0:1, _:7, Rest/binary>>, Z1,
			Z2, F@_1, TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_length_delimited_bytes_value(<<1:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData)
    when N < 57 ->
    skip_length_delimited_bytes_value(Rest, N + 7,
				      X bsl N + Acc, F@_1, TrUserData);
skip_length_delimited_bytes_value(<<0:1, X:7,
				    Rest/binary>>,
				  N, Acc, F@_1, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    dfp_read_field_def_bytes_value(Rest2, 0, 0, F@_1,
				   TrUserData).

skip_group_bytes_value(Bin, FNum, Z2, F@_1,
		       TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    dfp_read_field_def_bytes_value(Rest, 0, Z2, F@_1,
				   TrUserData).

skip_32_bytes_value(<<_:32, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

skip_64_bytes_value(<<_:64, Rest/binary>>, Z1, Z2, F@_1,
		    TrUserData) ->
    dfp_read_field_def_bytes_value(Rest, Z1, Z2, F@_1,
				   TrUserData).

'decode_msg_map<string,string>'(Bin, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Bin, 0, 0,
					    id(<<>>, TrUserData),
					    id(<<>>, TrUserData), TrUserData).

'dfp_read_field_def_map<string,string>'(<<10,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_key'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<18,
					  Rest/binary>>,
					Z1, Z2, F@_1, F@_2, TrUserData) ->
    'd_field_map<string,string>_value'(Rest, Z1, Z2, F@_1,
				       F@_2, TrUserData);
'dfp_read_field_def_map<string,string>'(<<>>, 0, 0,
					F@_1, F@_2, _) ->
    #{key => F@_1, value => F@_2};
'dfp_read_field_def_map<string,string>'(Other, Z1, Z2,
					F@_1, F@_2, TrUserData) ->
    'dg_read_field_def_map<string,string>'(Other, Z1, Z2,
					   F@_1, F@_2, TrUserData).

'dg_read_field_def_map<string,string>'(<<1:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,string>'(Rest, N + 7,
					   X bsl N + Acc, F@_1, F@_2,
					   TrUserData);
'dg_read_field_def_map<string,string>'(<<0:1, X:7,
					 Rest/binary>>,
				       N, Acc, F@_1, F@_2, TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,string>_key'(Rest, 0, 0, F@_1, F@_2,
					   TrUserData);
      18 ->
	  'd_field_map<string,string>_value'(Rest, 0, 0, F@_1,
					     F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
						 TrUserData);
	    1 ->
		'skip_64_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData);
	    2 ->
		'skip_length_delimited_map<string,string>'(Rest, 0, 0,
							   F@_1, F@_2,
							   TrUserData);
	    3 ->
		'skip_group_map<string,string>'(Rest, Key bsr 3, 0,
						F@_1, F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,string>'(Rest, 0, 0, F@_1, F@_2,
					     TrUserData)
	  end
    end;
'dg_read_field_def_map<string,string>'(<<>>, 0, 0, F@_1,
				       F@_2, _) ->
    #{key => F@_1, value => F@_2}.

'd_field_map<string,string>_key'(<<1:1, X:7,
				   Rest/binary>>,
				 N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_key'(Rest, N + 7,
				     X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_key'(<<0:1, X:7,
				   Rest/binary>>,
				 N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    NewFValue, F@_2, TrUserData).

'd_field_map<string,string>_value'(<<1:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,string>_value'(Rest, N + 7,
				       X bsl N + Acc, F@_1, F@_2, TrUserData);
'd_field_map<string,string>_value'(<<0:1, X:7,
				     Rest/binary>>,
				   N, Acc, F@_1, _, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,string>'(RestF, 0, 0,
					    F@_1, NewFValue, TrUserData).

'skip_varint_map<string,string>'(<<1:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,string>'(Rest, Z1, Z2, F@_1,
				     F@_2, TrUserData);
'skip_varint_map<string,string>'(<<0:1, _:7,
				   Rest/binary>>,
				 Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_length_delimited_map<string,string>'(<<1:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,string>'(Rest, N + 7,
					       X bsl N + Acc, F@_1, F@_2,
					       TrUserData);
'skip_length_delimited_map<string,string>'(<<0:1, X:7,
					     Rest/binary>>,
					   N, Acc, F@_1, F@_2, TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,string>'(Rest2, 0, 0,
					    F@_1, F@_2, TrUserData).

'skip_group_map<string,string>'(Bin, FNum, Z2, F@_1,
				F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,string>'(Rest, 0, Z2,
					    F@_1, F@_2, TrUserData).

'skip_32_map<string,string>'(<<_:32, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'skip_64_map<string,string>'(<<_:64, Rest/binary>>, Z1,
			     Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,string>'(Rest, Z1, Z2,
					    F@_1, F@_2, TrUserData).

'decode_msg_map<string,attribute_value>'(Bin,
					 TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value>'(Bin, 0,
						     0, id(<<>>, TrUserData),
						     id('$undef', TrUserData),
						     TrUserData).

'dfp_read_field_def_map<string,attribute_value>'(<<10,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_map<string,attribute_value>_key'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,attribute_value>'(<<18,
						   Rest/binary>>,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'd_field_map<string,attribute_value>_value'(Rest, Z1,
						Z2, F@_1, F@_2, TrUserData);
'dfp_read_field_def_map<string,attribute_value>'(<<>>,
						 0, 0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end;
'dfp_read_field_def_map<string,attribute_value>'(Other,
						 Z1, Z2, F@_1, F@_2,
						 TrUserData) ->
    'dg_read_field_def_map<string,attribute_value>'(Other,
						    Z1, Z2, F@_1, F@_2,
						    TrUserData).

'dg_read_field_def_map<string,attribute_value>'(<<1:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2, TrUserData)
    when N < 32 - 7 ->
    'dg_read_field_def_map<string,attribute_value>'(Rest,
						    N + 7, X bsl N + Acc, F@_1,
						    F@_2, TrUserData);
'dg_read_field_def_map<string,attribute_value>'(<<0:1,
						  X:7, Rest/binary>>,
						N, Acc, F@_1, F@_2,
						TrUserData) ->
    Key = X bsl N + Acc,
    case Key of
      10 ->
	  'd_field_map<string,attribute_value>_key'(Rest, 0, 0,
						    F@_1, F@_2, TrUserData);
      18 ->
	  'd_field_map<string,attribute_value>_value'(Rest, 0, 0,
						      F@_1, F@_2, TrUserData);
      _ ->
	  case Key band 7 of
	    0 ->
		'skip_varint_map<string,attribute_value>'(Rest, 0, 0,
							  F@_1, F@_2,
							  TrUserData);
	    1 ->
		'skip_64_map<string,attribute_value>'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData);
	    2 ->
		'skip_length_delimited_map<string,attribute_value>'(Rest,
								    0, 0, F@_1,
								    F@_2,
								    TrUserData);
	    3 ->
		'skip_group_map<string,attribute_value>'(Rest,
							 Key bsr 3, 0, F@_1,
							 F@_2, TrUserData);
	    5 ->
		'skip_32_map<string,attribute_value>'(Rest, 0, 0, F@_1,
						      F@_2, TrUserData)
	  end
    end;
'dg_read_field_def_map<string,attribute_value>'(<<>>, 0,
						0, F@_1, F@_2, _) ->
    S1 = #{key => F@_1},
    if F@_2 == '$undef' -> S1;
       true -> S1#{value => F@_2}
    end.

'd_field_map<string,attribute_value>_key'(<<1:1, X:7,
					    Rest/binary>>,
					  N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,attribute_value>_key'(Rest, N + 7,
					      X bsl N + Acc, F@_1, F@_2,
					      TrUserData);
'd_field_map<string,attribute_value>_key'(<<0:1, X:7,
					    Rest/binary>>,
					  N, Acc, _, F@_2, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bytes:Len/binary, Rest2/binary>> = Rest,
			   {id(binary:copy(Bytes), TrUserData), Rest2}
			 end,
    'dfp_read_field_def_map<string,attribute_value>'(RestF,
						     0, 0, NewFValue, F@_2,
						     TrUserData).

'd_field_map<string,attribute_value>_value'(<<1:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, F@_2, TrUserData)
    when N < 57 ->
    'd_field_map<string,attribute_value>_value'(Rest, N + 7,
						X bsl N + Acc, F@_1, F@_2,
						TrUserData);
'd_field_map<string,attribute_value>_value'(<<0:1, X:7,
					      Rest/binary>>,
					    N, Acc, F@_1, Prev, TrUserData) ->
    {NewFValue, RestF} = begin
			   Len = X bsl N + Acc,
			   <<Bs:Len/binary, Rest2/binary>> = Rest,
			   {id(decode_msg_attribute_value(Bs, TrUserData),
			       TrUserData),
			    Rest2}
			 end,
    'dfp_read_field_def_map<string,attribute_value>'(RestF,
						     0, 0, F@_1,
						     if Prev == '$undef' ->
							    NewFValue;
							true ->
							    merge_msg_attribute_value(Prev,
										      NewFValue,
										      TrUserData)
						     end,
						     TrUserData).

'skip_varint_map<string,attribute_value>'(<<1:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'skip_varint_map<string,attribute_value>'(Rest, Z1, Z2,
					      F@_1, F@_2, TrUserData);
'skip_varint_map<string,attribute_value>'(<<0:1, _:7,
					    Rest/binary>>,
					  Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value>'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_length_delimited_map<string,attribute_value>'(<<1:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData)
    when N < 57 ->
    'skip_length_delimited_map<string,attribute_value>'(Rest,
							N + 7, X bsl N + Acc,
							F@_1, F@_2, TrUserData);
'skip_length_delimited_map<string,attribute_value>'(<<0:1,
						      X:7, Rest/binary>>,
						    N, Acc, F@_1, F@_2,
						    TrUserData) ->
    Length = X bsl N + Acc,
    <<_:Length/binary, Rest2/binary>> = Rest,
    'dfp_read_field_def_map<string,attribute_value>'(Rest2,
						     0, 0, F@_1, F@_2,
						     TrUserData).

'skip_group_map<string,attribute_value>'(Bin, FNum, Z2,
					 F@_1, F@_2, TrUserData) ->
    {_, Rest} = read_group(Bin, FNum),
    'dfp_read_field_def_map<string,attribute_value>'(Rest,
						     0, Z2, F@_1, F@_2,
						     TrUserData).

'skip_32_map<string,attribute_value>'(<<_:32,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value>'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'skip_64_map<string,attribute_value>'(<<_:64,
					Rest/binary>>,
				      Z1, Z2, F@_1, F@_2, TrUserData) ->
    'dfp_read_field_def_map<string,attribute_value>'(Rest,
						     Z1, Z2, F@_1, F@_2,
						     TrUserData).

'd_enum_span.SpanKind'(0) -> 'SPAN_KIND_UNSPECIFIED';
'd_enum_span.SpanKind'(1) -> 'SERVER';
'd_enum_span.SpanKind'(2) -> 'CLIENT';
'd_enum_span.SpanKind'(V) -> V.

'd_enum_message_event.Type'(0) -> 'TYPE_UNSPECIFIED';
'd_enum_message_event.Type'(1) -> 'SENT';
'd_enum_message_event.Type'(2) -> 'RECEIVED';
'd_enum_message_event.Type'(V) -> V.

'd_enum_link.Type'(0) -> 'TYPE_UNSPECIFIED';
'd_enum_link.Type'(1) -> 'CHILD_LINKED_SPAN';
'd_enum_link.Type'(2) -> 'PARENT_LINKED_SPAN';
'd_enum_link.Type'(V) -> V.

read_group(Bin, FieldNum) ->
    {NumBytes, EndTagLen} = read_gr_b(Bin, 0, 0, 0, 0, FieldNum),
    <<Group:NumBytes/binary, _:EndTagLen/binary, Rest/binary>> = Bin,
    {Group, Rest}.

%% Like skipping over fields, but record the total length,
%% Each field is <(FieldNum bsl 3) bor FieldType> ++ <FieldValue>
%% Record the length because varints may be non-optimally encoded.
%%
%% Groups can be nested, but assume the same FieldNum cannot be nested
%% because group field numbers are shared with the rest of the fields
%% numbers. Thus we can search just for an group-end with the same
%% field number.
%%
%% (The only time the same group field number could occur would
%% be in a nested sub message, but then it would be inside a
%% length-delimited entry, which we skip-read by length.)
read_gr_b(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen, FieldNum)
  when N < (32-7) ->
    read_gr_b(Tl, N+7, X bsl N + Acc, NumBytes, TagLen+1, FieldNum);
read_gr_b(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, TagLen,
          FieldNum) ->
    Key = X bsl N + Acc,
    TagLen1 = TagLen + 1,
    case {Key bsr 3, Key band 7} of
        {FieldNum, 4} -> % 4 = group_end
            {NumBytes, TagLen1};
        {_, 0} -> % 0 = varint
            read_gr_vi(Tl, 0, NumBytes + TagLen1, FieldNum);
        {_, 1} -> % 1 = bits64
            <<_:64, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 8, 0, FieldNum);
        {_, 2} -> % 2 = length_delimited
            read_gr_ld(Tl, 0, 0, NumBytes + TagLen1, FieldNum);
        {_, 3} -> % 3 = group_start
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 4} -> % 4 = group_end
            read_gr_b(Tl, 0, 0, NumBytes + TagLen1, 0, FieldNum);
        {_, 5} -> % 5 = bits32
            <<_:32, Tl2/binary>> = Tl,
            read_gr_b(Tl2, 0, 0, NumBytes + TagLen1 + 4, 0, FieldNum)
    end.

read_gr_vi(<<1:1, _:7, Tl/binary>>, N, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_vi(Tl, N+7, NumBytes+1, FieldNum);
read_gr_vi(<<0:1, _:7, Tl/binary>>, _, NumBytes, FieldNum) ->
    read_gr_b(Tl, 0, 0, NumBytes+1, 0, FieldNum).

read_gr_ld(<<1:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum)
  when N < (64-7) ->
    read_gr_ld(Tl, N+7, X bsl N + Acc, NumBytes+1, FieldNum);
read_gr_ld(<<0:1, X:7, Tl/binary>>, N, Acc, NumBytes, FieldNum) ->
    Len = X bsl N + Acc,
    NumBytes1 = NumBytes + 1,
    <<_:Len/binary, Tl2/binary>> = Tl,
    read_gr_b(Tl2, 0, 0, NumBytes1 + Len, 0, FieldNum).

merge_msgs(Prev, New, MsgName) when is_atom(MsgName) ->
    merge_msgs(Prev, New, MsgName, []).

merge_msgs(Prev, New, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      dump_spans ->
	  merge_msg_dump_spans(Prev, New, TrUserData);
      tracestate ->
	  merge_msg_tracestate(Prev, New, TrUserData);
      entry -> merge_msg_entry(Prev, New, TrUserData);
      attributes ->
	  merge_msg_attributes(Prev, New, TrUserData);
      time_event ->
	  merge_msg_time_event(Prev, New, TrUserData);
      message_event ->
	  merge_msg_message_event(Prev, New, TrUserData);
      annotation ->
	  merge_msg_annotation(Prev, New, TrUserData);
      time_events ->
	  merge_msg_time_events(Prev, New, TrUserData);
      link -> merge_msg_link(Prev, New, TrUserData);
      links -> merge_msg_links(Prev, New, TrUserData);
      span -> merge_msg_span(Prev, New, TrUserData);
      status -> merge_msg_status(Prev, New, TrUserData);
      attribute_value ->
	  merge_msg_attribute_value(Prev, New, TrUserData);
      stack_frame ->
	  merge_msg_stack_frame(Prev, New, TrUserData);
      stack_frames ->
	  merge_msg_stack_frames(Prev, New, TrUserData);
      stack_trace ->
	  merge_msg_stack_trace(Prev, New, TrUserData);
      module -> merge_msg_module(Prev, New, TrUserData);
      truncatable_string ->
	  merge_msg_truncatable_string(Prev, New, TrUserData);
      resource -> merge_msg_resource(Prev, New, TrUserData);
      timestamp -> merge_msg_timestamp(Prev, New, TrUserData);
      double_value ->
	  merge_msg_double_value(Prev, New, TrUserData);
      float_value ->
	  merge_msg_float_value(Prev, New, TrUserData);
      int_64_value ->
	  merge_msg_int_64_value(Prev, New, TrUserData);
      u_int_64_value ->
	  merge_msg_u_int_64_value(Prev, New, TrUserData);
      int_32_value ->
	  merge_msg_int_32_value(Prev, New, TrUserData);
      u_int_32_value ->
	  merge_msg_u_int_32_value(Prev, New, TrUserData);
      bool_value ->
	  merge_msg_bool_value(Prev, New, TrUserData);
      string_value ->
	  merge_msg_string_value(Prev, New, TrUserData);
      bytes_value ->
	  merge_msg_bytes_value(Prev, New, TrUserData)
    end.

-compile({nowarn_unused_function,merge_msg_dump_spans/3}).
merge_msg_dump_spans(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{spans := PFspans}, #{spans := NFspans}} ->
	  S1#{spans => 'erlang_++'(PFspans, NFspans, TrUserData)};
      {_, #{spans := NFspans}} -> S1#{spans => NFspans};
      {#{spans := PFspans}, _} -> S1#{spans => PFspans};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_tracestate/3}).
merge_msg_tracestate(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{entries := PFentries}, #{entries := NFentries}} ->
	  S1#{entries =>
		  'erlang_++'(PFentries, NFentries, TrUserData)};
      {_, #{entries := NFentries}} ->
	  S1#{entries => NFentries};
      {#{entries := PFentries}, _} ->
	  S1#{entries => PFentries};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_entry/3}).
merge_msg_entry(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{key := NFkey}} -> S1#{key => NFkey};
	   {#{key := PFkey}, _} -> S1#{key => PFkey};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_attributes/3}).
merge_msg_attributes(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{attribute_map := PFattribute_map},
	    #{attribute_map := NFattribute_map}} ->
	       S1#{attribute_map =>
		       'tr_merge_attributes.attribute_map'(PFattribute_map,
							   NFattribute_map,
							   TrUserData)};
	   {_, #{attribute_map := NFattribute_map}} ->
	       S1#{attribute_map => NFattribute_map};
	   {#{attribute_map := PFattribute_map}, _} ->
	       S1#{attribute_map => PFattribute_map};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_,
       #{dropped_attributes_count :=
	     NFdropped_attributes_count}} ->
	  S2#{dropped_attributes_count =>
		  NFdropped_attributes_count};
      {#{dropped_attributes_count :=
	     PFdropped_attributes_count},
       _} ->
	  S2#{dropped_attributes_count =>
		  PFdropped_attributes_count};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_time_event/3}).
merge_msg_time_event(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{time := PFtime}, #{time := NFtime}} ->
	       S1#{time =>
		       merge_msg_timestamp(PFtime, NFtime, TrUserData)};
	   {_, #{time := NFtime}} -> S1#{time => NFtime};
	   {#{time := PFtime}, _} -> S1#{time => PFtime};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{value := {annotation, OPFvalue}},
       #{value := {annotation, ONFvalue}}} ->
	  S2#{value =>
		  {annotation,
		   merge_msg_annotation(OPFvalue, ONFvalue, TrUserData)}};
      {#{value := {message_event, OPFvalue}},
       #{value := {message_event, ONFvalue}}} ->
	  S2#{value =>
		  {message_event,
		   merge_msg_message_event(OPFvalue, ONFvalue,
					   TrUserData)}};
      {_, #{value := NFvalue}} -> S2#{value => NFvalue};
      {#{value := PFvalue}, _} -> S2#{value => PFvalue};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_message_event/3}).
merge_msg_message_event(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{id := NFid}} -> S2#{id => NFid};
	   {#{id := PFid}, _} -> S2#{id => PFid};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{uncompressed_size := NFuncompressed_size}} ->
	       S3#{uncompressed_size => NFuncompressed_size};
	   {#{uncompressed_size := PFuncompressed_size}, _} ->
	       S3#{uncompressed_size => PFuncompressed_size};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {_, #{compressed_size := NFcompressed_size}} ->
	  S4#{compressed_size => NFcompressed_size};
      {#{compressed_size := PFcompressed_size}, _} ->
	  S4#{compressed_size => PFcompressed_size};
      _ -> S4
    end.

-compile({nowarn_unused_function,merge_msg_annotation/3}).
merge_msg_annotation(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{description := PFdescription},
	    #{description := NFdescription}} ->
	       S1#{description =>
		       merge_msg_truncatable_string(PFdescription,
						    NFdescription, TrUserData)};
	   {_, #{description := NFdescription}} ->
	       S1#{description => NFdescription};
	   {#{description := PFdescription}, _} ->
	       S1#{description => PFdescription};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{attributes := PFattributes},
       #{attributes := NFattributes}} ->
	  S2#{attributes =>
		  merge_msg_attributes(PFattributes, NFattributes,
				       TrUserData)};
      {_, #{attributes := NFattributes}} ->
	  S2#{attributes => NFattributes};
      {#{attributes := PFattributes}, _} ->
	  S2#{attributes => PFattributes};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_time_events/3}).
merge_msg_time_events(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{time_event := PFtime_event},
	    #{time_event := NFtime_event}} ->
	       S1#{time_event =>
		       'erlang_++'(PFtime_event, NFtime_event, TrUserData)};
	   {_, #{time_event := NFtime_event}} ->
	       S1#{time_event => NFtime_event};
	   {#{time_event := PFtime_event}, _} ->
	       S1#{time_event => PFtime_event};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_,
	    #{dropped_annotations_count :=
		  NFdropped_annotations_count}} ->
	       S2#{dropped_annotations_count =>
		       NFdropped_annotations_count};
	   {#{dropped_annotations_count :=
		  PFdropped_annotations_count},
	    _} ->
	       S2#{dropped_annotations_count =>
		       PFdropped_annotations_count};
	   _ -> S2
	 end,
    case {PMsg, NMsg} of
      {_,
       #{dropped_message_events_count :=
	     NFdropped_message_events_count}} ->
	  S3#{dropped_message_events_count =>
		  NFdropped_message_events_count};
      {#{dropped_message_events_count :=
	     PFdropped_message_events_count},
       _} ->
	  S3#{dropped_message_events_count =>
		  PFdropped_message_events_count};
      _ -> S3
    end.

-compile({nowarn_unused_function,merge_msg_link/3}).
merge_msg_link(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{trace_id := NFtrace_id}} ->
	       S1#{trace_id => NFtrace_id};
	   {#{trace_id := PFtrace_id}, _} ->
	       S1#{trace_id => PFtrace_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{span_id := NFspan_id}} ->
	       S2#{span_id => NFspan_id};
	   {#{span_id := PFspan_id}, _} ->
	       S2#{span_id => PFspan_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S3#{type => NFtype};
	   {#{type := PFtype}, _} -> S3#{type => PFtype};
	   _ -> S3
	 end,
    case {PMsg, NMsg} of
      {#{attributes := PFattributes},
       #{attributes := NFattributes}} ->
	  S4#{attributes =>
		  merge_msg_attributes(PFattributes, NFattributes,
				       TrUserData)};
      {_, #{attributes := NFattributes}} ->
	  S4#{attributes => NFattributes};
      {#{attributes := PFattributes}, _} ->
	  S4#{attributes => PFattributes};
      {_, _} -> S4
    end.

-compile({nowarn_unused_function,merge_msg_links/3}).
merge_msg_links(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{link := PFlink}, #{link := NFlink}} ->
	       S1#{link => 'erlang_++'(PFlink, NFlink, TrUserData)};
	   {_, #{link := NFlink}} -> S1#{link => NFlink};
	   {#{link := PFlink}, _} -> S1#{link => PFlink};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{dropped_links_count := NFdropped_links_count}} ->
	  S2#{dropped_links_count => NFdropped_links_count};
      {#{dropped_links_count := PFdropped_links_count}, _} ->
	  S2#{dropped_links_count => PFdropped_links_count};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_span/3}).
merge_msg_span(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{trace_id := NFtrace_id}} ->
	       S1#{trace_id => NFtrace_id};
	   {#{trace_id := PFtrace_id}, _} ->
	       S1#{trace_id => PFtrace_id};
	   _ -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {_, #{span_id := NFspan_id}} ->
	       S2#{span_id => NFspan_id};
	   {#{span_id := PFspan_id}, _} ->
	       S2#{span_id => PFspan_id};
	   _ -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{tracestate := PFtracestate},
	    #{tracestate := NFtracestate}} ->
	       S3#{tracestate =>
		       merge_msg_tracestate(PFtracestate, NFtracestate,
					    TrUserData)};
	   {_, #{tracestate := NFtracestate}} ->
	       S3#{tracestate => NFtracestate};
	   {#{tracestate := PFtracestate}, _} ->
	       S3#{tracestate => PFtracestate};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{parent_span_id := NFparent_span_id}} ->
	       S4#{parent_span_id => NFparent_span_id};
	   {#{parent_span_id := PFparent_span_id}, _} ->
	       S4#{parent_span_id => PFparent_span_id};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {#{name := PFname}, #{name := NFname}} ->
	       S5#{name =>
		       merge_msg_truncatable_string(PFname, NFname,
						    TrUserData)};
	   {_, #{name := NFname}} -> S5#{name => NFname};
	   {#{name := PFname}, _} -> S5#{name => PFname};
	   {_, _} -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {_, #{kind := NFkind}} -> S6#{kind => NFkind};
	   {#{kind := PFkind}, _} -> S6#{kind => PFkind};
	   _ -> S6
	 end,
    S8 = case {PMsg, NMsg} of
	   {#{start_time := PFstart_time},
	    #{start_time := NFstart_time}} ->
	       S7#{start_time =>
		       merge_msg_timestamp(PFstart_time, NFstart_time,
					   TrUserData)};
	   {_, #{start_time := NFstart_time}} ->
	       S7#{start_time => NFstart_time};
	   {#{start_time := PFstart_time}, _} ->
	       S7#{start_time => PFstart_time};
	   {_, _} -> S7
	 end,
    S9 = case {PMsg, NMsg} of
	   {#{end_time := PFend_time},
	    #{end_time := NFend_time}} ->
	       S8#{end_time =>
		       merge_msg_timestamp(PFend_time, NFend_time,
					   TrUserData)};
	   {_, #{end_time := NFend_time}} ->
	       S8#{end_time => NFend_time};
	   {#{end_time := PFend_time}, _} ->
	       S8#{end_time => PFend_time};
	   {_, _} -> S8
	 end,
    S10 = case {PMsg, NMsg} of
	    {#{attributes := PFattributes},
	     #{attributes := NFattributes}} ->
		S9#{attributes =>
			merge_msg_attributes(PFattributes, NFattributes,
					     TrUserData)};
	    {_, #{attributes := NFattributes}} ->
		S9#{attributes => NFattributes};
	    {#{attributes := PFattributes}, _} ->
		S9#{attributes => PFattributes};
	    {_, _} -> S9
	  end,
    S11 = case {PMsg, NMsg} of
	    {#{stack_trace := PFstack_trace},
	     #{stack_trace := NFstack_trace}} ->
		S10#{stack_trace =>
			 merge_msg_stack_trace(PFstack_trace, NFstack_trace,
					       TrUserData)};
	    {_, #{stack_trace := NFstack_trace}} ->
		S10#{stack_trace => NFstack_trace};
	    {#{stack_trace := PFstack_trace}, _} ->
		S10#{stack_trace => PFstack_trace};
	    {_, _} -> S10
	  end,
    S12 = case {PMsg, NMsg} of
	    {#{time_events := PFtime_events},
	     #{time_events := NFtime_events}} ->
		S11#{time_events =>
			 merge_msg_time_events(PFtime_events, NFtime_events,
					       TrUserData)};
	    {_, #{time_events := NFtime_events}} ->
		S11#{time_events => NFtime_events};
	    {#{time_events := PFtime_events}, _} ->
		S11#{time_events => PFtime_events};
	    {_, _} -> S11
	  end,
    S13 = case {PMsg, NMsg} of
	    {#{links := PFlinks}, #{links := NFlinks}} ->
		S12#{links =>
			 merge_msg_links(PFlinks, NFlinks, TrUserData)};
	    {_, #{links := NFlinks}} -> S12#{links => NFlinks};
	    {#{links := PFlinks}, _} -> S12#{links => PFlinks};
	    {_, _} -> S12
	  end,
    S14 = case {PMsg, NMsg} of
	    {#{status := PFstatus}, #{status := NFstatus}} ->
		S13#{status =>
			 merge_msg_status(PFstatus, NFstatus, TrUserData)};
	    {_, #{status := NFstatus}} -> S13#{status => NFstatus};
	    {#{status := PFstatus}, _} -> S13#{status => PFstatus};
	    {_, _} -> S13
	  end,
    S15 = case {PMsg, NMsg} of
	    {#{resource := PFresource},
	     #{resource := NFresource}} ->
		S14#{resource =>
			 merge_msg_resource(PFresource, NFresource,
					    TrUserData)};
	    {_, #{resource := NFresource}} ->
		S14#{resource => NFresource};
	    {#{resource := PFresource}, _} ->
		S14#{resource => PFresource};
	    {_, _} -> S14
	  end,
    S16 = case {PMsg, NMsg} of
	    {#{same_process_as_parent_span :=
		   PFsame_process_as_parent_span},
	     #{same_process_as_parent_span :=
		   NFsame_process_as_parent_span}} ->
		S15#{same_process_as_parent_span =>
			 merge_msg_bool_value(PFsame_process_as_parent_span,
					      NFsame_process_as_parent_span,
					      TrUserData)};
	    {_,
	     #{same_process_as_parent_span :=
		   NFsame_process_as_parent_span}} ->
		S15#{same_process_as_parent_span =>
			 NFsame_process_as_parent_span};
	    {#{same_process_as_parent_span :=
		   PFsame_process_as_parent_span},
	     _} ->
		S15#{same_process_as_parent_span =>
			 PFsame_process_as_parent_span};
	    {_, _} -> S15
	  end,
    case {PMsg, NMsg} of
      {#{child_span_count := PFchild_span_count},
       #{child_span_count := NFchild_span_count}} ->
	  S16#{child_span_count =>
		   merge_msg_u_int_32_value(PFchild_span_count,
					    NFchild_span_count, TrUserData)};
      {_, #{child_span_count := NFchild_span_count}} ->
	  S16#{child_span_count => NFchild_span_count};
      {#{child_span_count := PFchild_span_count}, _} ->
	  S16#{child_span_count => PFchild_span_count};
      {_, _} -> S16
    end.

-compile({nowarn_unused_function,merge_msg_status/3}).
merge_msg_status(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{code := NFcode}} -> S1#{code => NFcode};
	   {#{code := PFcode}, _} -> S1#{code => PFcode};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{message := NFmessage}} ->
	  S2#{message => NFmessage};
      {#{message := PFmessage}, _} ->
	  S2#{message => PFmessage};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_attribute_value/3}).
merge_msg_attribute_value(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {#{value := {string_value, OPFvalue}},
       #{value := {string_value, ONFvalue}}} ->
	  S1#{value =>
		  {string_value,
		   merge_msg_truncatable_string(OPFvalue, ONFvalue,
						TrUserData)}};
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      {_, _} -> S1
    end.

-compile({nowarn_unused_function,merge_msg_stack_frame/3}).
merge_msg_stack_frame(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{function_name := PFfunction_name},
	    #{function_name := NFfunction_name}} ->
	       S1#{function_name =>
		       merge_msg_truncatable_string(PFfunction_name,
						    NFfunction_name,
						    TrUserData)};
	   {_, #{function_name := NFfunction_name}} ->
	       S1#{function_name => NFfunction_name};
	   {#{function_name := PFfunction_name}, _} ->
	       S1#{function_name => PFfunction_name};
	   {_, _} -> S1
	 end,
    S3 = case {PMsg, NMsg} of
	   {#{original_function_name := PForiginal_function_name},
	    #{original_function_name :=
		  NForiginal_function_name}} ->
	       S2#{original_function_name =>
		       merge_msg_truncatable_string(PForiginal_function_name,
						    NForiginal_function_name,
						    TrUserData)};
	   {_,
	    #{original_function_name :=
		  NForiginal_function_name}} ->
	       S2#{original_function_name => NForiginal_function_name};
	   {#{original_function_name := PForiginal_function_name},
	    _} ->
	       S2#{original_function_name => PForiginal_function_name};
	   {_, _} -> S2
	 end,
    S4 = case {PMsg, NMsg} of
	   {#{file_name := PFfile_name},
	    #{file_name := NFfile_name}} ->
	       S3#{file_name =>
		       merge_msg_truncatable_string(PFfile_name, NFfile_name,
						    TrUserData)};
	   {_, #{file_name := NFfile_name}} ->
	       S3#{file_name => NFfile_name};
	   {#{file_name := PFfile_name}, _} ->
	       S3#{file_name => PFfile_name};
	   {_, _} -> S3
	 end,
    S5 = case {PMsg, NMsg} of
	   {_, #{line_number := NFline_number}} ->
	       S4#{line_number => NFline_number};
	   {#{line_number := PFline_number}, _} ->
	       S4#{line_number => PFline_number};
	   _ -> S4
	 end,
    S6 = case {PMsg, NMsg} of
	   {_, #{column_number := NFcolumn_number}} ->
	       S5#{column_number => NFcolumn_number};
	   {#{column_number := PFcolumn_number}, _} ->
	       S5#{column_number => PFcolumn_number};
	   _ -> S5
	 end,
    S7 = case {PMsg, NMsg} of
	   {#{load_module := PFload_module},
	    #{load_module := NFload_module}} ->
	       S6#{load_module =>
		       merge_msg_module(PFload_module, NFload_module,
					TrUserData)};
	   {_, #{load_module := NFload_module}} ->
	       S6#{load_module => NFload_module};
	   {#{load_module := PFload_module}, _} ->
	       S6#{load_module => PFload_module};
	   {_, _} -> S6
	 end,
    case {PMsg, NMsg} of
      {#{source_version := PFsource_version},
       #{source_version := NFsource_version}} ->
	  S7#{source_version =>
		  merge_msg_truncatable_string(PFsource_version,
					       NFsource_version, TrUserData)};
      {_, #{source_version := NFsource_version}} ->
	  S7#{source_version => NFsource_version};
      {#{source_version := PFsource_version}, _} ->
	  S7#{source_version => PFsource_version};
      {_, _} -> S7
    end.

-compile({nowarn_unused_function,merge_msg_stack_frames/3}).
merge_msg_stack_frames(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{frame := PFframe}, #{frame := NFframe}} ->
	       S1#{frame => 'erlang_++'(PFframe, NFframe, TrUserData)};
	   {_, #{frame := NFframe}} -> S1#{frame => NFframe};
	   {#{frame := PFframe}, _} -> S1#{frame => PFframe};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_,
       #{dropped_frames_count := NFdropped_frames_count}} ->
	  S2#{dropped_frames_count => NFdropped_frames_count};
      {#{dropped_frames_count := PFdropped_frames_count},
       _} ->
	  S2#{dropped_frames_count => PFdropped_frames_count};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_stack_trace/3}).
merge_msg_stack_trace(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{stack_frames := PFstack_frames},
	    #{stack_frames := NFstack_frames}} ->
	       S1#{stack_frames =>
		       merge_msg_stack_frames(PFstack_frames, NFstack_frames,
					      TrUserData)};
	   {_, #{stack_frames := NFstack_frames}} ->
	       S1#{stack_frames => NFstack_frames};
	   {#{stack_frames := PFstack_frames}, _} ->
	       S1#{stack_frames => PFstack_frames};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{stack_trace_hash_id := NFstack_trace_hash_id}} ->
	  S2#{stack_trace_hash_id => NFstack_trace_hash_id};
      {#{stack_trace_hash_id := PFstack_trace_hash_id}, _} ->
	  S2#{stack_trace_hash_id => PFstack_trace_hash_id};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_module/3}).
merge_msg_module(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {#{module := PFmodule}, #{module := NFmodule}} ->
	       S1#{module =>
		       merge_msg_truncatable_string(PFmodule, NFmodule,
						    TrUserData)};
	   {_, #{module := NFmodule}} -> S1#{module => NFmodule};
	   {#{module := PFmodule}, _} -> S1#{module => PFmodule};
	   {_, _} -> S1
	 end,
    case {PMsg, NMsg} of
      {#{build_id := PFbuild_id},
       #{build_id := NFbuild_id}} ->
	  S2#{build_id =>
		  merge_msg_truncatable_string(PFbuild_id, NFbuild_id,
					       TrUserData)};
      {_, #{build_id := NFbuild_id}} ->
	  S2#{build_id => NFbuild_id};
      {#{build_id := PFbuild_id}, _} ->
	  S2#{build_id => PFbuild_id};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_truncatable_string/3}).
merge_msg_truncatable_string(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{value := NFvalue}} -> S1#{value => NFvalue};
	   {#{value := PFvalue}, _} -> S1#{value => PFvalue};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_,
       #{truncated_byte_count := NFtruncated_byte_count}} ->
	  S2#{truncated_byte_count => NFtruncated_byte_count};
      {#{truncated_byte_count := PFtruncated_byte_count},
       _} ->
	  S2#{truncated_byte_count => PFtruncated_byte_count};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_resource/3}).
merge_msg_resource(PMsg, NMsg, TrUserData) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{type := NFtype}} -> S1#{type => NFtype};
	   {#{type := PFtype}, _} -> S1#{type => PFtype};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {#{labels := PFlabels}, #{labels := NFlabels}} ->
	  S2#{labels =>
		  'tr_merge_resource.labels'(PFlabels, NFlabels,
					     TrUserData)};
      {_, #{labels := NFlabels}} -> S2#{labels => NFlabels};
      {#{labels := PFlabels}, _} -> S2#{labels => PFlabels};
      {_, _} -> S2
    end.

-compile({nowarn_unused_function,merge_msg_timestamp/3}).
merge_msg_timestamp(PMsg, NMsg, _) ->
    S1 = #{},
    S2 = case {PMsg, NMsg} of
	   {_, #{seconds := NFseconds}} ->
	       S1#{seconds => NFseconds};
	   {#{seconds := PFseconds}, _} ->
	       S1#{seconds => PFseconds};
	   _ -> S1
	 end,
    case {PMsg, NMsg} of
      {_, #{nanos := NFnanos}} -> S2#{nanos => NFnanos};
      {#{nanos := PFnanos}, _} -> S2#{nanos => PFnanos};
      _ -> S2
    end.

-compile({nowarn_unused_function,merge_msg_double_value/3}).
merge_msg_double_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_float_value/3}).
merge_msg_float_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_int_64_value/3}).
merge_msg_int_64_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_u_int_64_value/3}).
merge_msg_u_int_64_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_int_32_value/3}).
merge_msg_int_32_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_u_int_32_value/3}).
merge_msg_u_int_32_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bool_value/3}).
merge_msg_bool_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_string_value/3}).
merge_msg_string_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.

-compile({nowarn_unused_function,merge_msg_bytes_value/3}).
merge_msg_bytes_value(PMsg, NMsg, _) ->
    S1 = #{},
    case {PMsg, NMsg} of
      {_, #{value := NFvalue}} -> S1#{value => NFvalue};
      {#{value := PFvalue}, _} -> S1#{value => PFvalue};
      _ -> S1
    end.


verify_msg(Msg, MsgName) when is_atom(MsgName) ->
    verify_msg(Msg, MsgName, []).

verify_msg(Msg, MsgName, Opts) ->
    TrUserData = proplists:get_value(user_data, Opts),
    case MsgName of
      dump_spans ->
	  v_msg_dump_spans(Msg, [MsgName], TrUserData);
      tracestate ->
	  v_msg_tracestate(Msg, [MsgName], TrUserData);
      entry -> v_msg_entry(Msg, [MsgName], TrUserData);
      attributes ->
	  v_msg_attributes(Msg, [MsgName], TrUserData);
      time_event ->
	  v_msg_time_event(Msg, [MsgName], TrUserData);
      message_event ->
	  v_msg_message_event(Msg, [MsgName], TrUserData);
      annotation ->
	  v_msg_annotation(Msg, [MsgName], TrUserData);
      time_events ->
	  v_msg_time_events(Msg, [MsgName], TrUserData);
      link -> v_msg_link(Msg, [MsgName], TrUserData);
      links -> v_msg_links(Msg, [MsgName], TrUserData);
      span -> v_msg_span(Msg, [MsgName], TrUserData);
      status -> v_msg_status(Msg, [MsgName], TrUserData);
      attribute_value ->
	  v_msg_attribute_value(Msg, [MsgName], TrUserData);
      stack_frame ->
	  v_msg_stack_frame(Msg, [MsgName], TrUserData);
      stack_frames ->
	  v_msg_stack_frames(Msg, [MsgName], TrUserData);
      stack_trace ->
	  v_msg_stack_trace(Msg, [MsgName], TrUserData);
      module -> v_msg_module(Msg, [MsgName], TrUserData);
      truncatable_string ->
	  v_msg_truncatable_string(Msg, [MsgName], TrUserData);
      resource -> v_msg_resource(Msg, [MsgName], TrUserData);
      timestamp ->
	  v_msg_timestamp(Msg, [MsgName], TrUserData);
      double_value ->
	  v_msg_double_value(Msg, [MsgName], TrUserData);
      float_value ->
	  v_msg_float_value(Msg, [MsgName], TrUserData);
      int_64_value ->
	  v_msg_int_64_value(Msg, [MsgName], TrUserData);
      u_int_64_value ->
	  v_msg_u_int_64_value(Msg, [MsgName], TrUserData);
      int_32_value ->
	  v_msg_int_32_value(Msg, [MsgName], TrUserData);
      u_int_32_value ->
	  v_msg_u_int_32_value(Msg, [MsgName], TrUserData);
      bool_value ->
	  v_msg_bool_value(Msg, [MsgName], TrUserData);
      string_value ->
	  v_msg_string_value(Msg, [MsgName], TrUserData);
      bytes_value ->
	  v_msg_bytes_value(Msg, [MsgName], TrUserData);
      _ -> mk_type_error(not_a_known_message, Msg, [])
    end.


-compile({nowarn_unused_function,v_msg_dump_spans/3}).
-dialyzer({nowarn_function,v_msg_dump_spans/3}).
v_msg_dump_spans(#{} = M, Path, TrUserData) ->
    case M of
      #{spans := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_span(Elem, [spans | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, span}}, F1,
			       [spans | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (spans) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_dump_spans(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   dump_spans},
		  M, Path);
v_msg_dump_spans(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, dump_spans}, X, Path).

-compile({nowarn_unused_function,v_msg_tracestate/3}).
-dialyzer({nowarn_function,v_msg_tracestate/3}).
v_msg_tracestate(#{} = M, Path, TrUserData) ->
    case M of
      #{entries := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_entry(Elem, [entries | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, entry}}, F1,
			       [entries | Path])
	  end;
      _ -> ok
    end,
    lists:foreach(fun (entries) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_tracestate(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   tracestate},
		  M, Path);
v_msg_tracestate(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, tracestate}, X, Path).

-compile({nowarn_unused_function,v_msg_entry/3}).
-dialyzer({nowarn_function,v_msg_entry/3}).
v_msg_entry(#{} = M, Path, TrUserData) ->
    case M of
      #{key := F1} ->
	  v_type_string(F1, [key | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := F2} ->
	  v_type_string(F2, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (key) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_entry(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   entry},
		  M, Path);
v_msg_entry(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, entry}, X, Path).

-compile({nowarn_unused_function,v_msg_attributes/3}).
-dialyzer({nowarn_function,v_msg_attributes/3}).
v_msg_attributes(#{} = M, Path, TrUserData) ->
    case M of
      #{attribute_map := F1} ->
	  'v_map<string,attribute_value>'(F1,
					  [attribute_map | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{dropped_attributes_count := F2} ->
	  v_type_int32(F2, [dropped_attributes_count | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (attribute_map) -> ok;
		      (dropped_attributes_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_attributes(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   attributes},
		  M, Path);
v_msg_attributes(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, attributes}, X, Path).

-compile({nowarn_unused_function,v_msg_time_event/3}).
-dialyzer({nowarn_function,v_msg_time_event/3}).
v_msg_time_event(#{} = M, Path, TrUserData) ->
    case M of
      #{time := F1} ->
	  v_msg_timestamp(F1, [time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{value := {annotation, OF2}} ->
	  v_msg_annotation(OF2, [annotation, value | Path],
			   TrUserData);
      #{value := {message_event, OF2}} ->
	  v_msg_message_event(OF2, [message_event, value | Path],
			      TrUserData);
      #{value := F2} ->
	  mk_type_error(invalid_oneof, F2, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (time) -> ok;
		      (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_time_event(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   time_event},
		  M, Path);
v_msg_time_event(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, time_event}, X, Path).

-compile({nowarn_unused_function,v_msg_message_event/3}).
-dialyzer({nowarn_function,v_msg_message_event/3}).
v_msg_message_event(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} ->
	  'v_enum_message_event.Type'(F1, [type | Path],
				      TrUserData);
      _ -> ok
    end,
    case M of
      #{id := F2} ->
	  v_type_uint64(F2, [id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{uncompressed_size := F3} ->
	  v_type_uint64(F3, [uncompressed_size | Path],
			TrUserData);
      _ -> ok
    end,
    case M of
      #{compressed_size := F4} ->
	  v_type_uint64(F4, [compressed_size | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (id) -> ok;
		      (uncompressed_size) -> ok;
		      (compressed_size) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_message_event(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   message_event},
		  M, Path);
v_msg_message_event(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, message_event}, X, Path).

-compile({nowarn_unused_function,v_msg_annotation/3}).
-dialyzer({nowarn_function,v_msg_annotation/3}).
v_msg_annotation(#{} = M, Path, TrUserData) ->
    case M of
      #{description := F1} ->
	  v_msg_truncatable_string(F1, [description | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{attributes := F2} ->
	  v_msg_attributes(F2, [attributes | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (description) -> ok;
		      (attributes) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_annotation(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   annotation},
		  M, Path);
v_msg_annotation(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, annotation}, X, Path).

-compile({nowarn_unused_function,v_msg_time_events/3}).
-dialyzer({nowarn_function,v_msg_time_events/3}).
v_msg_time_events(#{} = M, Path, TrUserData) ->
    case M of
      #{time_event := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_time_event(Elem, [time_event | Path],
				       TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, time_event}}, F1,
			       [time_event | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{dropped_annotations_count := F2} ->
	  v_type_int32(F2, [dropped_annotations_count | Path],
		       TrUserData);
      _ -> ok
    end,
    case M of
      #{dropped_message_events_count := F3} ->
	  v_type_int32(F3, [dropped_message_events_count | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (time_event) -> ok;
		      (dropped_annotations_count) -> ok;
		      (dropped_message_events_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_time_events(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   time_events},
		  M, Path);
v_msg_time_events(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, time_events}, X, Path).

-compile({nowarn_unused_function,v_msg_link/3}).
-dialyzer({nowarn_function,v_msg_link/3}).
v_msg_link(#{} = M, Path, TrUserData) ->
    case M of
      #{trace_id := F1} ->
	  v_type_bytes(F1, [trace_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{span_id := F2} ->
	  v_type_bytes(F2, [span_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{type := F3} ->
	  'v_enum_link.Type'(F3, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{attributes := F4} ->
	  v_msg_attributes(F4, [attributes | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (trace_id) -> ok;
		      (span_id) -> ok;
		      (type) -> ok;
		      (attributes) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_link(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   link},
		  M, Path);
v_msg_link(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, link}, X, Path).

-compile({nowarn_unused_function,v_msg_links/3}).
-dialyzer({nowarn_function,v_msg_links/3}).
v_msg_links(#{} = M, Path, TrUserData) ->
    case M of
      #{link := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_link(Elem, [link | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, link}}, F1,
			       [link | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{dropped_links_count := F2} ->
	  v_type_int32(F2, [dropped_links_count | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (link) -> ok;
		      (dropped_links_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_links(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   links},
		  M, Path);
v_msg_links(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, links}, X, Path).

-compile({nowarn_unused_function,v_msg_span/3}).
-dialyzer({nowarn_function,v_msg_span/3}).
v_msg_span(#{} = M, Path, TrUserData) ->
    case M of
      #{trace_id := F1} ->
	  v_type_bytes(F1, [trace_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{span_id := F2} ->
	  v_type_bytes(F2, [span_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{tracestate := F3} ->
	  v_msg_tracestate(F3, [tracestate | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{parent_span_id := F4} ->
	  v_type_bytes(F4, [parent_span_id | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{name := F5} ->
	  v_msg_truncatable_string(F5, [name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{kind := F6} ->
	  'v_enum_span.SpanKind'(F6, [kind | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{start_time := F7} ->
	  v_msg_timestamp(F7, [start_time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{end_time := F8} ->
	  v_msg_timestamp(F8, [end_time | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{attributes := F9} ->
	  v_msg_attributes(F9, [attributes | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{stack_trace := F10} ->
	  v_msg_stack_trace(F10, [stack_trace | Path],
			    TrUserData);
      _ -> ok
    end,
    case M of
      #{time_events := F11} ->
	  v_msg_time_events(F11, [time_events | Path],
			    TrUserData);
      _ -> ok
    end,
    case M of
      #{links := F12} ->
	  v_msg_links(F12, [links | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{status := F13} ->
	  v_msg_status(F13, [status | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{resource := F14} ->
	  v_msg_resource(F14, [resource | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{same_process_as_parent_span := F15} ->
	  v_msg_bool_value(F15,
			   [same_process_as_parent_span | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{child_span_count := F16} ->
	  v_msg_u_int_32_value(F16, [child_span_count | Path],
			       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (trace_id) -> ok;
		      (span_id) -> ok;
		      (tracestate) -> ok;
		      (parent_span_id) -> ok;
		      (name) -> ok;
		      (kind) -> ok;
		      (start_time) -> ok;
		      (end_time) -> ok;
		      (attributes) -> ok;
		      (stack_trace) -> ok;
		      (time_events) -> ok;
		      (links) -> ok;
		      (status) -> ok;
		      (resource) -> ok;
		      (same_process_as_parent_span) -> ok;
		      (child_span_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_span(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   span},
		  M, Path);
v_msg_span(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, span}, X, Path).

-compile({nowarn_unused_function,v_msg_status/3}).
-dialyzer({nowarn_function,v_msg_status/3}).
v_msg_status(#{} = M, Path, TrUserData) ->
    case M of
      #{code := F1} ->
	  v_type_int32(F1, [code | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{message := F2} ->
	  v_type_string(F2, [message | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (code) -> ok;
		      (message) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_status(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   status},
		  M, Path);
v_msg_status(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, status}, X, Path).

-compile({nowarn_unused_function,v_msg_attribute_value/3}).
-dialyzer({nowarn_function,v_msg_attribute_value/3}).
v_msg_attribute_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := {string_value, OF1}} ->
	  v_msg_truncatable_string(OF1,
				   [string_value, value | Path], TrUserData);
      #{value := {int_value, OF1}} ->
	  v_type_int64(OF1, [int_value, value | Path],
		       TrUserData);
      #{value := {bool_value, OF1}} ->
	  v_type_bool(OF1, [bool_value, value | Path],
		      TrUserData);
      #{value := {double_value, OF1}} ->
	  v_type_double(OF1, [double_value, value | Path],
			TrUserData);
      #{value := F1} ->
	  mk_type_error(invalid_oneof, F1, [value | Path]);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_attribute_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   attribute_value},
		  M, Path);
v_msg_attribute_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, attribute_value}, X, Path).

-compile({nowarn_unused_function,v_msg_stack_frame/3}).
-dialyzer({nowarn_function,v_msg_stack_frame/3}).
v_msg_stack_frame(#{} = M, Path, TrUserData) ->
    case M of
      #{function_name := F1} ->
	  v_msg_truncatable_string(F1, [function_name | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{original_function_name := F2} ->
	  v_msg_truncatable_string(F2,
				   [original_function_name | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{file_name := F3} ->
	  v_msg_truncatable_string(F3, [file_name | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{line_number := F4} ->
	  v_type_int64(F4, [line_number | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{column_number := F5} ->
	  v_type_int64(F5, [column_number | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{load_module := F6} ->
	  v_msg_module(F6, [load_module | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{source_version := F7} ->
	  v_msg_truncatable_string(F7, [source_version | Path],
				   TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (function_name) -> ok;
		      (original_function_name) -> ok;
		      (file_name) -> ok;
		      (line_number) -> ok;
		      (column_number) -> ok;
		      (load_module) -> ok;
		      (source_version) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_stack_frame(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   stack_frame},
		  M, Path);
v_msg_stack_frame(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stack_frame}, X, Path).

-compile({nowarn_unused_function,v_msg_stack_frames/3}).
-dialyzer({nowarn_function,v_msg_stack_frames/3}).
v_msg_stack_frames(#{} = M, Path, TrUserData) ->
    case M of
      #{frame := F1} ->
	  if is_list(F1) ->
		 _ = [v_msg_stack_frame(Elem, [frame | Path], TrUserData)
		      || Elem <- F1],
		 ok;
	     true ->
		 mk_type_error({invalid_list_of, {msg, stack_frame}}, F1,
			       [frame | Path])
	  end;
      _ -> ok
    end,
    case M of
      #{dropped_frames_count := F2} ->
	  v_type_int32(F2, [dropped_frames_count | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (frame) -> ok;
		      (dropped_frames_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_stack_frames(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   stack_frames},
		  M, Path);
v_msg_stack_frames(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stack_frames}, X, Path).

-compile({nowarn_unused_function,v_msg_stack_trace/3}).
-dialyzer({nowarn_function,v_msg_stack_trace/3}).
v_msg_stack_trace(#{} = M, Path, TrUserData) ->
    case M of
      #{stack_frames := F1} ->
	  v_msg_stack_frames(F1, [stack_frames | Path],
			     TrUserData);
      _ -> ok
    end,
    case M of
      #{stack_trace_hash_id := F2} ->
	  v_type_uint64(F2, [stack_trace_hash_id | Path],
			TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (stack_frames) -> ok;
		      (stack_trace_hash_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_stack_trace(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   stack_trace},
		  M, Path);
v_msg_stack_trace(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, stack_trace}, X, Path).

-compile({nowarn_unused_function,v_msg_module/3}).
-dialyzer({nowarn_function,v_msg_module/3}).
v_msg_module(#{} = M, Path, TrUserData) ->
    case M of
      #{module := F1} ->
	  v_msg_truncatable_string(F1, [module | Path],
				   TrUserData);
      _ -> ok
    end,
    case M of
      #{build_id := F2} ->
	  v_msg_truncatable_string(F2, [build_id | Path],
				   TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (module) -> ok;
		      (build_id) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_module(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   module},
		  M, Path);
v_msg_module(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, module}, X, Path).

-compile({nowarn_unused_function,v_msg_truncatable_string/3}).
-dialyzer({nowarn_function,v_msg_truncatable_string/3}).
v_msg_truncatable_string(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_string(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{truncated_byte_count := F2} ->
	  v_type_int32(F2, [truncated_byte_count | Path],
		       TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (truncated_byte_count) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_truncatable_string(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   truncatable_string},
		  M, Path);
v_msg_truncatable_string(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, truncatable_string}, X,
		  Path).

-compile({nowarn_unused_function,v_msg_resource/3}).
-dialyzer({nowarn_function,v_msg_resource/3}).
v_msg_resource(#{} = M, Path, TrUserData) ->
    case M of
      #{type := F1} ->
	  v_type_string(F1, [type | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{labels := F2} ->
	  'v_map<string,string>'(F2, [labels | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (type) -> ok;
		      (labels) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_resource(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   resource},
		  M, Path);
v_msg_resource(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, resource}, X, Path).

-compile({nowarn_unused_function,v_msg_timestamp/3}).
-dialyzer({nowarn_function,v_msg_timestamp/3}).
v_msg_timestamp(#{} = M, Path, TrUserData) ->
    case M of
      #{seconds := F1} ->
	  v_type_int64(F1, [seconds | Path], TrUserData);
      _ -> ok
    end,
    case M of
      #{nanos := F2} ->
	  v_type_int32(F2, [nanos | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (seconds) -> ok;
		      (nanos) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_timestamp(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   timestamp},
		  M, Path);
v_msg_timestamp(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, timestamp}, X, Path).

-compile({nowarn_unused_function,v_msg_double_value/3}).
-dialyzer({nowarn_function,v_msg_double_value/3}).
v_msg_double_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_double(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_double_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   double_value},
		  M, Path);
v_msg_double_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, double_value}, X, Path).

-compile({nowarn_unused_function,v_msg_float_value/3}).
-dialyzer({nowarn_function,v_msg_float_value/3}).
v_msg_float_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_float(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_float_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   float_value},
		  M, Path);
v_msg_float_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, float_value}, X, Path).

-compile({nowarn_unused_function,v_msg_int_64_value/3}).
-dialyzer({nowarn_function,v_msg_int_64_value/3}).
v_msg_int_64_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_int64(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_int_64_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   int_64_value},
		  M, Path);
v_msg_int_64_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_64_value}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_64_value/3}).
-dialyzer({nowarn_function,v_msg_u_int_64_value/3}).
v_msg_u_int_64_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_uint64(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_u_int_64_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   u_int_64_value},
		  M, Path);
v_msg_u_int_64_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_64_value}, X, Path).

-compile({nowarn_unused_function,v_msg_int_32_value/3}).
-dialyzer({nowarn_function,v_msg_int_32_value/3}).
v_msg_int_32_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_int32(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_int_32_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   int_32_value},
		  M, Path);
v_msg_int_32_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, int_32_value}, X, Path).

-compile({nowarn_unused_function,v_msg_u_int_32_value/3}).
-dialyzer({nowarn_function,v_msg_u_int_32_value/3}).
v_msg_u_int_32_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_uint32(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_u_int_32_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   u_int_32_value},
		  M, Path);
v_msg_u_int_32_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, u_int_32_value}, X, Path).

-compile({nowarn_unused_function,v_msg_bool_value/3}).
-dialyzer({nowarn_function,v_msg_bool_value/3}).
v_msg_bool_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bool(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bool_value(M, Path, _TrUserData) when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bool_value},
		  M, Path);
v_msg_bool_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bool_value}, X, Path).

-compile({nowarn_unused_function,v_msg_string_value/3}).
-dialyzer({nowarn_function,v_msg_string_value/3}).
v_msg_string_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_string(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_string_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   string_value},
		  M, Path);
v_msg_string_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, string_value}, X, Path).

-compile({nowarn_unused_function,v_msg_bytes_value/3}).
-dialyzer({nowarn_function,v_msg_bytes_value/3}).
v_msg_bytes_value(#{} = M, Path, TrUserData) ->
    case M of
      #{value := F1} ->
	  v_type_bytes(F1, [value | Path], TrUserData);
      _ -> ok
    end,
    lists:foreach(fun (value) -> ok;
		      (OtherKey) ->
			  mk_type_error({extraneous_key, OtherKey}, M, Path)
		  end,
		  maps:keys(M)),
    ok;
v_msg_bytes_value(M, Path, _TrUserData)
    when is_map(M) ->
    mk_type_error({missing_fields, [] -- maps:keys(M),
		   bytes_value},
		  M, Path);
v_msg_bytes_value(X, Path, _TrUserData) ->
    mk_type_error({expected_msg, bytes_value}, X, Path).

-compile({nowarn_unused_function,'v_enum_span.SpanKind'/3}).
-dialyzer({nowarn_function,'v_enum_span.SpanKind'/3}).
'v_enum_span.SpanKind'('SPAN_KIND_UNSPECIFIED', _Path,
		       _TrUserData) ->
    ok;
'v_enum_span.SpanKind'('SERVER', _Path, _TrUserData) ->
    ok;
'v_enum_span.SpanKind'('CLIENT', _Path, _TrUserData) ->
    ok;
'v_enum_span.SpanKind'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_span.SpanKind'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'span.SpanKind'}, X, Path).

-compile({nowarn_unused_function,'v_enum_message_event.Type'/3}).
-dialyzer({nowarn_function,'v_enum_message_event.Type'/3}).
'v_enum_message_event.Type'('TYPE_UNSPECIFIED', _Path,
			    _TrUserData) ->
    ok;
'v_enum_message_event.Type'('SENT', _Path,
			    _TrUserData) ->
    ok;
'v_enum_message_event.Type'('RECEIVED', _Path,
			    _TrUserData) ->
    ok;
'v_enum_message_event.Type'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_message_event.Type'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'message_event.Type'}, X,
		  Path).

-compile({nowarn_unused_function,'v_enum_link.Type'/3}).
-dialyzer({nowarn_function,'v_enum_link.Type'/3}).
'v_enum_link.Type'('TYPE_UNSPECIFIED', _Path,
		   _TrUserData) ->
    ok;
'v_enum_link.Type'('CHILD_LINKED_SPAN', _Path,
		   _TrUserData) ->
    ok;
'v_enum_link.Type'('PARENT_LINKED_SPAN', _Path,
		   _TrUserData) ->
    ok;
'v_enum_link.Type'(V, Path, TrUserData)
    when is_integer(V) ->
    v_type_sint32(V, Path, TrUserData);
'v_enum_link.Type'(X, Path, _TrUserData) ->
    mk_type_error({invalid_enum, 'link.Type'}, X, Path).

-compile({nowarn_unused_function,v_type_sint32/3}).
-dialyzer({nowarn_function,v_type_sint32/3}).
v_type_sint32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_sint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, sint32, signed, 32},
		  N, Path);
v_type_sint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, sint32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int32/3}).
-dialyzer({nowarn_function,v_type_int32/3}).
v_type_int32(N, _Path, _TrUserData)
    when -2147483648 =< N, N =< 2147483647 ->
    ok;
v_type_int32(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int32, signed, 32},
		  N, Path);
v_type_int32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int32, signed, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_int64/3}).
-dialyzer({nowarn_function,v_type_int64/3}).
v_type_int64(N, _Path, _TrUserData)
    when -9223372036854775808 =< N,
	 N =< 9223372036854775807 ->
    ok;
v_type_int64(N, Path, _TrUserData) when is_integer(N) ->
    mk_type_error({value_out_of_range, int64, signed, 64},
		  N, Path);
v_type_int64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, int64, signed, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint32/3}).
-dialyzer({nowarn_function,v_type_uint32/3}).
v_type_uint32(N, _Path, _TrUserData)
    when 0 =< N, N =< 4294967295 ->
    ok;
v_type_uint32(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint32, unsigned,
		   32},
		  N, Path);
v_type_uint32(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint32, unsigned, 32}, X,
		  Path).

-compile({nowarn_unused_function,v_type_uint64/3}).
-dialyzer({nowarn_function,v_type_uint64/3}).
v_type_uint64(N, _Path, _TrUserData)
    when 0 =< N, N =< 18446744073709551615 ->
    ok;
v_type_uint64(N, Path, _TrUserData)
    when is_integer(N) ->
    mk_type_error({value_out_of_range, uint64, unsigned,
		   64},
		  N, Path);
v_type_uint64(X, Path, _TrUserData) ->
    mk_type_error({bad_integer, uint64, unsigned, 64}, X,
		  Path).

-compile({nowarn_unused_function,v_type_bool/3}).
-dialyzer({nowarn_function,v_type_bool/3}).
v_type_bool(false, _Path, _TrUserData) -> ok;
v_type_bool(true, _Path, _TrUserData) -> ok;
v_type_bool(0, _Path, _TrUserData) -> ok;
v_type_bool(1, _Path, _TrUserData) -> ok;
v_type_bool(X, Path, _TrUserData) ->
    mk_type_error(bad_boolean_value, X, Path).

-compile({nowarn_unused_function,v_type_float/3}).
-dialyzer({nowarn_function,v_type_float/3}).
v_type_float(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_float(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_float(infinity, _Path, _TrUserData) -> ok;
v_type_float('-infinity', _Path, _TrUserData) -> ok;
v_type_float(nan, _Path, _TrUserData) -> ok;
v_type_float(X, Path, _TrUserData) ->
    mk_type_error(bad_float_value, X, Path).

-compile({nowarn_unused_function,v_type_double/3}).
-dialyzer({nowarn_function,v_type_double/3}).
v_type_double(N, _Path, _TrUserData) when is_float(N) ->
    ok;
v_type_double(N, _Path, _TrUserData)
    when is_integer(N) ->
    ok;
v_type_double(infinity, _Path, _TrUserData) -> ok;
v_type_double('-infinity', _Path, _TrUserData) -> ok;
v_type_double(nan, _Path, _TrUserData) -> ok;
v_type_double(X, Path, _TrUserData) ->
    mk_type_error(bad_double_value, X, Path).

-compile({nowarn_unused_function,v_type_string/3}).
-dialyzer({nowarn_function,v_type_string/3}).
v_type_string(S, Path, _TrUserData)
    when is_list(S); is_binary(S) ->
    try unicode:characters_to_binary(S) of
      B when is_binary(B) -> ok;
      {error, _, _} ->
	  mk_type_error(bad_unicode_string, S, Path)
    catch
      error:badarg ->
	  mk_type_error(bad_unicode_string, S, Path)
    end;
v_type_string(X, Path, _TrUserData) ->
    mk_type_error(bad_unicode_string, X, Path).

-compile({nowarn_unused_function,v_type_bytes/3}).
-dialyzer({nowarn_function,v_type_bytes/3}).
v_type_bytes(B, _Path, _TrUserData) when is_binary(B) ->
    ok;
v_type_bytes(B, _Path, _TrUserData) when is_list(B) ->
    ok;
v_type_bytes(X, Path, _TrUserData) ->
    mk_type_error(bad_binary_value, X, Path).

-compile({nowarn_unused_function,'v_map<string,string>'/3}).
-dialyzer({nowarn_function,'v_map<string,string>'/3}).
'v_map<string,string>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_type_string(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,string>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,'v_map<string,attribute_value>'/3}).
-dialyzer({nowarn_function,'v_map<string,attribute_value>'/3}).
'v_map<string,attribute_value>'(M, Path, TrUserData)
    when is_map(M) ->
    [begin
       v_type_string(Key, [key | Path], TrUserData),
       v_msg_attribute_value(Value, [value | Path], TrUserData)
     end
     || {Key, Value} <- maps:to_list(M)],
    ok;
'v_map<string,attribute_value>'(X, Path, _TrUserData) ->
    mk_type_error(invalid_map, X, Path).

-compile({nowarn_unused_function,mk_type_error/3}).
-spec mk_type_error(_, _, list()) -> no_return().
mk_type_error(Error, ValueSeen, Path) ->
    Path2 = prettify_path(Path),
    erlang:error({gpb_type_error,
		  {Error, [{value, ValueSeen}, {path, Path2}]}}).


-compile({nowarn_unused_function,prettify_path/1}).
-dialyzer({nowarn_function,prettify_path/1}).
prettify_path([]) -> top_level;
prettify_path(PathR) ->
    list_to_atom(lists:append(lists:join(".",
					 lists:map(fun atom_to_list/1,
						   lists:reverse(PathR))))).


-compile({nowarn_unused_function,id/2}).
-compile({inline,id/2}).
id(X, _TrUserData) -> X.

-compile({nowarn_unused_function,v_ok/3}).
-compile({inline,v_ok/3}).
v_ok(_Value, _Path, _TrUserData) -> ok.

-compile({nowarn_unused_function,m_overwrite/3}).
-compile({inline,m_overwrite/3}).
m_overwrite(_Prev, New, _TrUserData) -> New.

-compile({nowarn_unused_function,cons/3}).
-compile({inline,cons/3}).
cons(Elem, Acc, _TrUserData) -> [Elem | Acc].

-compile({nowarn_unused_function,lists_reverse/2}).
-compile({inline,lists_reverse/2}).
'lists_reverse'(L, _TrUserData) -> lists:reverse(L).
-compile({nowarn_unused_function,'erlang_++'/3}).
-compile({inline,'erlang_++'/3}).
'erlang_++'(A, B, _TrUserData) -> A ++ B.
-compile({inline,'tr_decode_init_default_resource.labels'/2}).
'tr_decode_init_default_resource.labels'(_, _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_resource.labels'/3}).
'tr_merge_resource.labels'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_resource.labels'/2}).
'tr_decode_repeated_finalize_resource.labels'(L,
					      TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_resource.labels'/2}).
'tr_encode_resource.labels'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_resource.labels'/3}).
'tr_decode_repeated_add_elem_resource.labels'(Elem, L,
					      _) ->
    mt_add_item_m(Elem, L).

-compile({inline,'tr_encode_attributes.attribute_map[x]'/2}).
'tr_encode_attributes.attribute_map[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,'tr_decode_init_default_attributes.attribute_map'/2}).
'tr_decode_init_default_attributes.attribute_map'(_,
						  _) ->
    mt_empty_map_m().

-compile({inline,'tr_merge_attributes.attribute_map'/3}).
'tr_merge_attributes.attribute_map'(X1, X2, _) ->
    mt_merge_maps_m(X1, X2).

-compile({inline,'tr_decode_repeated_finalize_attributes.attribute_map'/2}).
'tr_decode_repeated_finalize_attributes.attribute_map'(L,
						       TrUserData) ->
    id(L, TrUserData).

-compile({inline,'tr_encode_attributes.attribute_map'/2}).
'tr_encode_attributes.attribute_map'(X, _) ->
    mt_map_to_list_m(X).

-compile({inline,'tr_decode_repeated_add_elem_attributes.attribute_map'/3}).
'tr_decode_repeated_add_elem_attributes.attribute_map'(Elem,
						       L, _) ->
    mt_add_item_m_verify_value(Elem, L).

-compile({inline,'tr_encode_resource.labels[x]'/2}).
'tr_encode_resource.labels[x]'(X, _) ->
    mt_maptuple_to_pseudomsg_m(X).

-compile({inline,mt_maptuple_to_pseudomsg_m/1}).
mt_maptuple_to_pseudomsg_m({K, V}) ->
    #{key => K, value => V}.


-compile({inline,mt_map_to_list_m/1}).
mt_map_to_list_m(M) -> maps:to_list(M).


-compile({inline,mt_empty_map_m/0}).
mt_empty_map_m() -> #{}.


-compile({inline,mt_add_item_m/2}).
mt_add_item_m(#{key := K, value := V}, M) -> M#{K => V}.

-compile({inline,mt_add_item_m_verify_value/2}).
mt_add_item_m_verify_value(#{key := K, value := V},
			   M) ->
    if V =:= '$undef' -> error({gpb_error, missing_value});
       true -> M#{K => V}
    end.


-compile({inline,mt_merge_maps_m/2}).
mt_merge_maps_m(M1, M2) -> maps:merge(M1, M2).



get_msg_defs() ->
    [{{enum, 'span.SpanKind'},
      [{'SPAN_KIND_UNSPECIFIED', 0}, {'SERVER', 1},
       {'CLIENT', 2}]},
     {{enum, 'message_event.Type'},
      [{'TYPE_UNSPECIFIED', 0}, {'SENT', 1},
       {'RECEIVED', 2}]},
     {{enum, 'link.Type'},
      [{'TYPE_UNSPECIFIED', 0}, {'CHILD_LINKED_SPAN', 1},
       {'PARENT_LINKED_SPAN', 2}]},
     {{msg, dump_spans},
      [#{name => spans, fnum => 1, rnum => 2,
	 type => {msg, span}, occurrence => repeated,
	 opts => []}]},
     {{msg, tracestate},
      [#{name => entries, fnum => 1, rnum => 2,
	 type => {msg, entry}, occurrence => repeated,
	 opts => []}]},
     {{msg, entry},
      [#{name => key, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => value, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, attributes},
      [#{name => attribute_map, fnum => 1, rnum => 2,
	 type => {map, string, {msg, attribute_value}},
	 occurrence => repeated, opts => []},
       #{name => dropped_attributes_count, fnum => 2,
	 rnum => 3, type => int32, occurrence => optional,
	 opts => []}]},
     {{msg, time_event},
      [#{name => time, fnum => 1, rnum => 2,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => value, rnum => 3,
	 fields =>
	     [#{name => annotation, fnum => 2, rnum => 3,
		type => {msg, annotation}, occurrence => optional,
		opts => []},
	      #{name => message_event, fnum => 3, rnum => 3,
		type => {msg, message_event}, occurrence => optional,
		opts => []}]}]},
     {{msg, message_event},
      [#{name => type, fnum => 1, rnum => 2,
	 type => {enum, 'message_event.Type'},
	 occurrence => optional, opts => []},
       #{name => id, fnum => 2, rnum => 3, type => uint64,
	 occurrence => optional, opts => []},
       #{name => uncompressed_size, fnum => 3, rnum => 4,
	 type => uint64, occurrence => optional, opts => []},
       #{name => compressed_size, fnum => 4, rnum => 5,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, annotation},
      [#{name => description, fnum => 1, rnum => 2,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []},
       #{name => attributes, fnum => 2, rnum => 3,
	 type => {msg, attributes}, occurrence => optional,
	 opts => []}]},
     {{msg, time_events},
      [#{name => time_event, fnum => 1, rnum => 2,
	 type => {msg, time_event}, occurrence => repeated,
	 opts => []},
       #{name => dropped_annotations_count, fnum => 2,
	 rnum => 3, type => int32, occurrence => optional,
	 opts => []},
       #{name => dropped_message_events_count, fnum => 3,
	 rnum => 4, type => int32, occurrence => optional,
	 opts => []}]},
     {{msg, link},
      [#{name => trace_id, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => span_id, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => type, fnum => 3, rnum => 4,
	 type => {enum, 'link.Type'}, occurrence => optional,
	 opts => []},
       #{name => attributes, fnum => 4, rnum => 5,
	 type => {msg, attributes}, occurrence => optional,
	 opts => []}]},
     {{msg, links},
      [#{name => link, fnum => 1, rnum => 2,
	 type => {msg, link}, occurrence => repeated,
	 opts => []},
       #{name => dropped_links_count, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, span},
      [#{name => trace_id, fnum => 1, rnum => 2,
	 type => bytes, occurrence => optional, opts => []},
       #{name => span_id, fnum => 2, rnum => 3, type => bytes,
	 occurrence => optional, opts => []},
       #{name => tracestate, fnum => 15, rnum => 4,
	 type => {msg, tracestate}, occurrence => optional,
	 opts => []},
       #{name => parent_span_id, fnum => 3, rnum => 5,
	 type => bytes, occurrence => optional, opts => []},
       #{name => name, fnum => 4, rnum => 6,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []},
       #{name => kind, fnum => 14, rnum => 7,
	 type => {enum, 'span.SpanKind'}, occurrence => optional,
	 opts => []},
       #{name => start_time, fnum => 5, rnum => 8,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => end_time, fnum => 6, rnum => 9,
	 type => {msg, timestamp}, occurrence => optional,
	 opts => []},
       #{name => attributes, fnum => 7, rnum => 10,
	 type => {msg, attributes}, occurrence => optional,
	 opts => []},
       #{name => stack_trace, fnum => 8, rnum => 11,
	 type => {msg, stack_trace}, occurrence => optional,
	 opts => []},
       #{name => time_events, fnum => 9, rnum => 12,
	 type => {msg, time_events}, occurrence => optional,
	 opts => []},
       #{name => links, fnum => 10, rnum => 13,
	 type => {msg, links}, occurrence => optional,
	 opts => []},
       #{name => status, fnum => 11, rnum => 14,
	 type => {msg, status}, occurrence => optional,
	 opts => []},
       #{name => resource, fnum => 16, rnum => 15,
	 type => {msg, resource}, occurrence => optional,
	 opts => []},
       #{name => same_process_as_parent_span, fnum => 12,
	 rnum => 16, type => {msg, bool_value},
	 occurrence => optional, opts => []},
       #{name => child_span_count, fnum => 13, rnum => 17,
	 type => {msg, u_int_32_value}, occurrence => optional,
	 opts => []}]},
     {{msg, status},
      [#{name => code, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []},
       #{name => message, fnum => 2, rnum => 3, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, attribute_value},
      [#{name => value, rnum => 2,
	 fields =>
	     [#{name => string_value, fnum => 1, rnum => 2,
		type => {msg, truncatable_string},
		occurrence => optional, opts => []},
	      #{name => int_value, fnum => 2, rnum => 2,
		type => int64, occurrence => optional, opts => []},
	      #{name => bool_value, fnum => 3, rnum => 2,
		type => bool, occurrence => optional, opts => []},
	      #{name => double_value, fnum => 4, rnum => 2,
		type => double, occurrence => optional, opts => []}]}]},
     {{msg, stack_frame},
      [#{name => function_name, fnum => 1, rnum => 2,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []},
       #{name => original_function_name, fnum => 2, rnum => 3,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []},
       #{name => file_name, fnum => 3, rnum => 4,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []},
       #{name => line_number, fnum => 4, rnum => 5,
	 type => int64, occurrence => optional, opts => []},
       #{name => column_number, fnum => 5, rnum => 6,
	 type => int64, occurrence => optional, opts => []},
       #{name => load_module, fnum => 6, rnum => 7,
	 type => {msg, module}, occurrence => optional,
	 opts => []},
       #{name => source_version, fnum => 7, rnum => 8,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []}]},
     {{msg, stack_frames},
      [#{name => frame, fnum => 1, rnum => 2,
	 type => {msg, stack_frame}, occurrence => repeated,
	 opts => []},
       #{name => dropped_frames_count, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, stack_trace},
      [#{name => stack_frames, fnum => 1, rnum => 2,
	 type => {msg, stack_frames}, occurrence => optional,
	 opts => []},
       #{name => stack_trace_hash_id, fnum => 2, rnum => 3,
	 type => uint64, occurrence => optional, opts => []}]},
     {{msg, module},
      [#{name => module, fnum => 1, rnum => 2,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []},
       #{name => build_id, fnum => 2, rnum => 3,
	 type => {msg, truncatable_string},
	 occurrence => optional, opts => []}]},
     {{msg, truncatable_string},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => truncated_byte_count, fnum => 2, rnum => 3,
	 type => int32, occurrence => optional, opts => []}]},
     {{msg, resource},
      [#{name => type, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []},
       #{name => labels, fnum => 2, rnum => 3,
	 type => {map, string, string}, occurrence => repeated,
	 opts => []}]},
     {{msg, timestamp},
      [#{name => seconds, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []},
       #{name => nanos, fnum => 2, rnum => 3, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, double_value},
      [#{name => value, fnum => 1, rnum => 2, type => double,
	 occurrence => optional, opts => []}]},
     {{msg, float_value},
      [#{name => value, fnum => 1, rnum => 2, type => float,
	 occurrence => optional, opts => []}]},
     {{msg, int_64_value},
      [#{name => value, fnum => 1, rnum => 2, type => int64,
	 occurrence => optional, opts => []}]},
     {{msg, u_int_64_value},
      [#{name => value, fnum => 1, rnum => 2, type => uint64,
	 occurrence => optional, opts => []}]},
     {{msg, int_32_value},
      [#{name => value, fnum => 1, rnum => 2, type => int32,
	 occurrence => optional, opts => []}]},
     {{msg, u_int_32_value},
      [#{name => value, fnum => 1, rnum => 2, type => uint32,
	 occurrence => optional, opts => []}]},
     {{msg, bool_value},
      [#{name => value, fnum => 1, rnum => 2, type => bool,
	 occurrence => optional, opts => []}]},
     {{msg, string_value},
      [#{name => value, fnum => 1, rnum => 2, type => string,
	 occurrence => optional, opts => []}]},
     {{msg, bytes_value},
      [#{name => value, fnum => 1, rnum => 2, type => bytes,
	 occurrence => optional, opts => []}]}].


get_msg_names() ->
    [dump_spans, tracestate, entry, attributes, time_event,
     message_event, annotation, time_events, link, links,
     span, status, attribute_value, stack_frame,
     stack_frames, stack_trace, module, truncatable_string,
     resource, timestamp, double_value, float_value,
     int_64_value, u_int_64_value, int_32_value,
     u_int_32_value, bool_value, string_value, bytes_value].


get_group_names() -> [].


get_msg_or_group_names() ->
    [dump_spans, tracestate, entry, attributes, time_event,
     message_event, annotation, time_events, link, links,
     span, status, attribute_value, stack_frame,
     stack_frames, stack_trace, module, truncatable_string,
     resource, timestamp, double_value, float_value,
     int_64_value, u_int_64_value, int_32_value,
     u_int_32_value, bool_value, string_value, bytes_value].


get_enum_names() ->
    ['span.SpanKind', 'message_event.Type', 'link.Type'].


fetch_msg_def(MsgName) ->
    case find_msg_def(MsgName) of
      Fs when is_list(Fs) -> Fs;
      error -> erlang:error({no_such_msg, MsgName})
    end.


fetch_enum_def(EnumName) ->
    case find_enum_def(EnumName) of
      Es when is_list(Es) -> Es;
      error -> erlang:error({no_such_enum, EnumName})
    end.


find_msg_def(dump_spans) ->
    [#{name => spans, fnum => 1, rnum => 2,
       type => {msg, span}, occurrence => repeated,
       opts => []}];
find_msg_def(tracestate) ->
    [#{name => entries, fnum => 1, rnum => 2,
       type => {msg, entry}, occurrence => repeated,
       opts => []}];
find_msg_def(entry) ->
    [#{name => key, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => value, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(attributes) ->
    [#{name => attribute_map, fnum => 1, rnum => 2,
       type => {map, string, {msg, attribute_value}},
       occurrence => repeated, opts => []},
     #{name => dropped_attributes_count, fnum => 2,
       rnum => 3, type => int32, occurrence => optional,
       opts => []}];
find_msg_def(time_event) ->
    [#{name => time, fnum => 1, rnum => 2,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => value, rnum => 3,
       fields =>
	   [#{name => annotation, fnum => 2, rnum => 3,
	      type => {msg, annotation}, occurrence => optional,
	      opts => []},
	    #{name => message_event, fnum => 3, rnum => 3,
	      type => {msg, message_event}, occurrence => optional,
	      opts => []}]}];
find_msg_def(message_event) ->
    [#{name => type, fnum => 1, rnum => 2,
       type => {enum, 'message_event.Type'},
       occurrence => optional, opts => []},
     #{name => id, fnum => 2, rnum => 3, type => uint64,
       occurrence => optional, opts => []},
     #{name => uncompressed_size, fnum => 3, rnum => 4,
       type => uint64, occurrence => optional, opts => []},
     #{name => compressed_size, fnum => 4, rnum => 5,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def(annotation) ->
    [#{name => description, fnum => 1, rnum => 2,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []},
     #{name => attributes, fnum => 2, rnum => 3,
       type => {msg, attributes}, occurrence => optional,
       opts => []}];
find_msg_def(time_events) ->
    [#{name => time_event, fnum => 1, rnum => 2,
       type => {msg, time_event}, occurrence => repeated,
       opts => []},
     #{name => dropped_annotations_count, fnum => 2,
       rnum => 3, type => int32, occurrence => optional,
       opts => []},
     #{name => dropped_message_events_count, fnum => 3,
       rnum => 4, type => int32, occurrence => optional,
       opts => []}];
find_msg_def(link) ->
    [#{name => trace_id, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => span_id, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => type, fnum => 3, rnum => 4,
       type => {enum, 'link.Type'}, occurrence => optional,
       opts => []},
     #{name => attributes, fnum => 4, rnum => 5,
       type => {msg, attributes}, occurrence => optional,
       opts => []}];
find_msg_def(links) ->
    [#{name => link, fnum => 1, rnum => 2,
       type => {msg, link}, occurrence => repeated,
       opts => []},
     #{name => dropped_links_count, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def(span) ->
    [#{name => trace_id, fnum => 1, rnum => 2,
       type => bytes, occurrence => optional, opts => []},
     #{name => span_id, fnum => 2, rnum => 3, type => bytes,
       occurrence => optional, opts => []},
     #{name => tracestate, fnum => 15, rnum => 4,
       type => {msg, tracestate}, occurrence => optional,
       opts => []},
     #{name => parent_span_id, fnum => 3, rnum => 5,
       type => bytes, occurrence => optional, opts => []},
     #{name => name, fnum => 4, rnum => 6,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []},
     #{name => kind, fnum => 14, rnum => 7,
       type => {enum, 'span.SpanKind'}, occurrence => optional,
       opts => []},
     #{name => start_time, fnum => 5, rnum => 8,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => end_time, fnum => 6, rnum => 9,
       type => {msg, timestamp}, occurrence => optional,
       opts => []},
     #{name => attributes, fnum => 7, rnum => 10,
       type => {msg, attributes}, occurrence => optional,
       opts => []},
     #{name => stack_trace, fnum => 8, rnum => 11,
       type => {msg, stack_trace}, occurrence => optional,
       opts => []},
     #{name => time_events, fnum => 9, rnum => 12,
       type => {msg, time_events}, occurrence => optional,
       opts => []},
     #{name => links, fnum => 10, rnum => 13,
       type => {msg, links}, occurrence => optional,
       opts => []},
     #{name => status, fnum => 11, rnum => 14,
       type => {msg, status}, occurrence => optional,
       opts => []},
     #{name => resource, fnum => 16, rnum => 15,
       type => {msg, resource}, occurrence => optional,
       opts => []},
     #{name => same_process_as_parent_span, fnum => 12,
       rnum => 16, type => {msg, bool_value},
       occurrence => optional, opts => []},
     #{name => child_span_count, fnum => 13, rnum => 17,
       type => {msg, u_int_32_value}, occurrence => optional,
       opts => []}];
find_msg_def(status) ->
    [#{name => code, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []},
     #{name => message, fnum => 2, rnum => 3, type => string,
       occurrence => optional, opts => []}];
find_msg_def(attribute_value) ->
    [#{name => value, rnum => 2,
       fields =>
	   [#{name => string_value, fnum => 1, rnum => 2,
	      type => {msg, truncatable_string},
	      occurrence => optional, opts => []},
	    #{name => int_value, fnum => 2, rnum => 2,
	      type => int64, occurrence => optional, opts => []},
	    #{name => bool_value, fnum => 3, rnum => 2,
	      type => bool, occurrence => optional, opts => []},
	    #{name => double_value, fnum => 4, rnum => 2,
	      type => double, occurrence => optional, opts => []}]}];
find_msg_def(stack_frame) ->
    [#{name => function_name, fnum => 1, rnum => 2,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []},
     #{name => original_function_name, fnum => 2, rnum => 3,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []},
     #{name => file_name, fnum => 3, rnum => 4,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []},
     #{name => line_number, fnum => 4, rnum => 5,
       type => int64, occurrence => optional, opts => []},
     #{name => column_number, fnum => 5, rnum => 6,
       type => int64, occurrence => optional, opts => []},
     #{name => load_module, fnum => 6, rnum => 7,
       type => {msg, module}, occurrence => optional,
       opts => []},
     #{name => source_version, fnum => 7, rnum => 8,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []}];
find_msg_def(stack_frames) ->
    [#{name => frame, fnum => 1, rnum => 2,
       type => {msg, stack_frame}, occurrence => repeated,
       opts => []},
     #{name => dropped_frames_count, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def(stack_trace) ->
    [#{name => stack_frames, fnum => 1, rnum => 2,
       type => {msg, stack_frames}, occurrence => optional,
       opts => []},
     #{name => stack_trace_hash_id, fnum => 2, rnum => 3,
       type => uint64, occurrence => optional, opts => []}];
find_msg_def(module) ->
    [#{name => module, fnum => 1, rnum => 2,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []},
     #{name => build_id, fnum => 2, rnum => 3,
       type => {msg, truncatable_string},
       occurrence => optional, opts => []}];
find_msg_def(truncatable_string) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => truncated_byte_count, fnum => 2, rnum => 3,
       type => int32, occurrence => optional, opts => []}];
find_msg_def(resource) ->
    [#{name => type, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []},
     #{name => labels, fnum => 2, rnum => 3,
       type => {map, string, string}, occurrence => repeated,
       opts => []}];
find_msg_def(timestamp) ->
    [#{name => seconds, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []},
     #{name => nanos, fnum => 2, rnum => 3, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(double_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => double,
       occurrence => optional, opts => []}];
find_msg_def(float_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => float,
       occurrence => optional, opts => []}];
find_msg_def(int_64_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => int64,
       occurrence => optional, opts => []}];
find_msg_def(u_int_64_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => uint64,
       occurrence => optional, opts => []}];
find_msg_def(int_32_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => int32,
       occurrence => optional, opts => []}];
find_msg_def(u_int_32_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => uint32,
       occurrence => optional, opts => []}];
find_msg_def(bool_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => bool,
       occurrence => optional, opts => []}];
find_msg_def(string_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => string,
       occurrence => optional, opts => []}];
find_msg_def(bytes_value) ->
    [#{name => value, fnum => 1, rnum => 2, type => bytes,
       occurrence => optional, opts => []}];
find_msg_def(_) -> error.


find_enum_def('span.SpanKind') ->
    [{'SPAN_KIND_UNSPECIFIED', 0}, {'SERVER', 1},
     {'CLIENT', 2}];
find_enum_def('message_event.Type') ->
    [{'TYPE_UNSPECIFIED', 0}, {'SENT', 1}, {'RECEIVED', 2}];
find_enum_def('link.Type') ->
    [{'TYPE_UNSPECIFIED', 0}, {'CHILD_LINKED_SPAN', 1},
     {'PARENT_LINKED_SPAN', 2}];
find_enum_def(_) -> error.


enum_symbol_by_value('span.SpanKind', Value) ->
    'enum_symbol_by_value_span.SpanKind'(Value);
enum_symbol_by_value('message_event.Type', Value) ->
    'enum_symbol_by_value_message_event.Type'(Value);
enum_symbol_by_value('link.Type', Value) ->
    'enum_symbol_by_value_link.Type'(Value).


enum_value_by_symbol('span.SpanKind', Sym) ->
    'enum_value_by_symbol_span.SpanKind'(Sym);
enum_value_by_symbol('message_event.Type', Sym) ->
    'enum_value_by_symbol_message_event.Type'(Sym);
enum_value_by_symbol('link.Type', Sym) ->
    'enum_value_by_symbol_link.Type'(Sym).


'enum_symbol_by_value_span.SpanKind'(0) ->
    'SPAN_KIND_UNSPECIFIED';
'enum_symbol_by_value_span.SpanKind'(1) -> 'SERVER';
'enum_symbol_by_value_span.SpanKind'(2) -> 'CLIENT'.


'enum_value_by_symbol_span.SpanKind'('SPAN_KIND_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_span.SpanKind'('SERVER') -> 1;
'enum_value_by_symbol_span.SpanKind'('CLIENT') -> 2.

'enum_symbol_by_value_message_event.Type'(0) ->
    'TYPE_UNSPECIFIED';
'enum_symbol_by_value_message_event.Type'(1) -> 'SENT';
'enum_symbol_by_value_message_event.Type'(2) ->
    'RECEIVED'.


'enum_value_by_symbol_message_event.Type'('TYPE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_message_event.Type'('SENT') -> 1;
'enum_value_by_symbol_message_event.Type'('RECEIVED') ->
    2.

'enum_symbol_by_value_link.Type'(0) ->
    'TYPE_UNSPECIFIED';
'enum_symbol_by_value_link.Type'(1) ->
    'CHILD_LINKED_SPAN';
'enum_symbol_by_value_link.Type'(2) ->
    'PARENT_LINKED_SPAN'.


'enum_value_by_symbol_link.Type'('TYPE_UNSPECIFIED') ->
    0;
'enum_value_by_symbol_link.Type'('CHILD_LINKED_SPAN') ->
    1;
'enum_value_by_symbol_link.Type'('PARENT_LINKED_SPAN') ->
    2.


get_service_names() -> [].


get_service_def(_) -> error.


get_rpc_names(_) -> error.


find_rpc_def(_, _) -> error.



-spec fetch_rpc_def(_, _) -> no_return().
fetch_rpc_def(ServiceName, RpcName) ->
    erlang:error({no_such_rpc, ServiceName, RpcName}).


%% Convert a a fully qualified (ie with package name) service name
%% as a binary to a service name as an atom.
-spec fqbin_to_service_name(_) -> no_return().
fqbin_to_service_name(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a service name as an atom to a fully qualified
%% (ie with package name) name as a binary.
-spec service_name_to_fqbin(_) -> no_return().
service_name_to_fqbin(X) ->
    error({gpb_error, {badservice, X}}).


%% Convert a a fully qualified (ie with package name) service name
%% and an rpc name, both as binaries to a service name and an rpc
%% name, as atoms.
-spec fqbins_to_service_and_rpc_name(_, _) -> no_return().
fqbins_to_service_and_rpc_name(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


%% Convert a service name and an rpc name, both as atoms,
%% to a fully qualified (ie with package name) service name and
%% an rpc name as binaries.
-spec service_and_rpc_name_to_fqbins(_, _) -> no_return().
service_and_rpc_name_to_fqbins(S, R) ->
    error({gpb_error, {badservice_or_rpc, {S, R}}}).


fqbin_to_msg_name(<<"opencensus.proto.dump.v1.DumpSpans">>) -> dump_spans;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.Tracestate">>) -> tracestate;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.Tracestate.Entry">>) -> entry;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.Attributes">>) -> attributes;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.TimeEvent">>) -> time_event;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent">>) -> message_event;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.TimeEvent.Annotation">>) -> annotation;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.TimeEvents">>) -> time_events;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.Link">>) -> link;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span.Links">>) -> links;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Span">>) -> span;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Status">>) -> status;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.AttributeValue">>) -> attribute_value;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.StackTrace.StackFrame">>) -> stack_frame;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.StackTrace.StackFrames">>) -> stack_frames;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.StackTrace">>) -> stack_trace;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.Module">>) -> module;
fqbin_to_msg_name(<<"opencensus.proto.trace.v1.TruncatableString">>) -> truncatable_string;
fqbin_to_msg_name(<<"opencensus.proto.resource.v1.Resource">>) -> resource;
fqbin_to_msg_name(<<"google.protobuf.Timestamp">>) -> timestamp;
fqbin_to_msg_name(<<"google.protobuf.DoubleValue">>) -> double_value;
fqbin_to_msg_name(<<"google.protobuf.FloatValue">>) -> float_value;
fqbin_to_msg_name(<<"google.protobuf.Int64Value">>) -> int_64_value;
fqbin_to_msg_name(<<"google.protobuf.UInt64Value">>) -> u_int_64_value;
fqbin_to_msg_name(<<"google.protobuf.Int32Value">>) -> int_32_value;
fqbin_to_msg_name(<<"google.protobuf.UInt32Value">>) -> u_int_32_value;
fqbin_to_msg_name(<<"google.protobuf.BoolValue">>) -> bool_value;
fqbin_to_msg_name(<<"google.protobuf.StringValue">>) -> string_value;
fqbin_to_msg_name(<<"google.protobuf.BytesValue">>) -> bytes_value;
fqbin_to_msg_name(E) -> error({gpb_error, {badmsg, E}}).


msg_name_to_fqbin(dump_spans) -> <<"opencensus.proto.dump.v1.DumpSpans">>;
msg_name_to_fqbin(tracestate) -> <<"opencensus.proto.trace.v1.Span.Tracestate">>;
msg_name_to_fqbin(entry) -> <<"opencensus.proto.trace.v1.Span.Tracestate.Entry">>;
msg_name_to_fqbin(attributes) -> <<"opencensus.proto.trace.v1.Span.Attributes">>;
msg_name_to_fqbin(time_event) -> <<"opencensus.proto.trace.v1.Span.TimeEvent">>;
msg_name_to_fqbin(message_event) -> <<"opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent">>;
msg_name_to_fqbin(annotation) -> <<"opencensus.proto.trace.v1.Span.TimeEvent.Annotation">>;
msg_name_to_fqbin(time_events) -> <<"opencensus.proto.trace.v1.Span.TimeEvents">>;
msg_name_to_fqbin(link) -> <<"opencensus.proto.trace.v1.Span.Link">>;
msg_name_to_fqbin(links) -> <<"opencensus.proto.trace.v1.Span.Links">>;
msg_name_to_fqbin(span) -> <<"opencensus.proto.trace.v1.Span">>;
msg_name_to_fqbin(status) -> <<"opencensus.proto.trace.v1.Status">>;
msg_name_to_fqbin(attribute_value) -> <<"opencensus.proto.trace.v1.AttributeValue">>;
msg_name_to_fqbin(stack_frame) -> <<"opencensus.proto.trace.v1.StackTrace.StackFrame">>;
msg_name_to_fqbin(stack_frames) -> <<"opencensus.proto.trace.v1.StackTrace.StackFrames">>;
msg_name_to_fqbin(stack_trace) -> <<"opencensus.proto.trace.v1.StackTrace">>;
msg_name_to_fqbin(module) -> <<"opencensus.proto.trace.v1.Module">>;
msg_name_to_fqbin(truncatable_string) -> <<"opencensus.proto.trace.v1.TruncatableString">>;
msg_name_to_fqbin(resource) -> <<"opencensus.proto.resource.v1.Resource">>;
msg_name_to_fqbin(timestamp) -> <<"google.protobuf.Timestamp">>;
msg_name_to_fqbin(double_value) -> <<"google.protobuf.DoubleValue">>;
msg_name_to_fqbin(float_value) -> <<"google.protobuf.FloatValue">>;
msg_name_to_fqbin(int_64_value) -> <<"google.protobuf.Int64Value">>;
msg_name_to_fqbin(u_int_64_value) -> <<"google.protobuf.UInt64Value">>;
msg_name_to_fqbin(int_32_value) -> <<"google.protobuf.Int32Value">>;
msg_name_to_fqbin(u_int_32_value) -> <<"google.protobuf.UInt32Value">>;
msg_name_to_fqbin(bool_value) -> <<"google.protobuf.BoolValue">>;
msg_name_to_fqbin(string_value) -> <<"google.protobuf.StringValue">>;
msg_name_to_fqbin(bytes_value) -> <<"google.protobuf.BytesValue">>;
msg_name_to_fqbin(E) -> error({gpb_error, {badmsg, E}}).


fqbin_to_enum_name(<<"opencensus.proto.trace.v1.Span.SpanKind">>) -> 'span.SpanKind';
fqbin_to_enum_name(<<"opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type">>) -> 'message_event.Type';
fqbin_to_enum_name(<<"opencensus.proto.trace.v1.Span.Link.Type">>) -> 'link.Type';
fqbin_to_enum_name(E) ->
    error({gpb_error, {badenum, E}}).


enum_name_to_fqbin('span.SpanKind') -> <<"opencensus.proto.trace.v1.Span.SpanKind">>;
enum_name_to_fqbin('message_event.Type') -> <<"opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type">>;
enum_name_to_fqbin('link.Type') -> <<"opencensus.proto.trace.v1.Span.Link.Type">>;
enum_name_to_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_package_name() -> 'opencensus.proto.dump.v1'.


%% Whether or not the message names
%% are prepended with package name or not.
uses_packages() -> true.


source_basename() -> "dump.proto".


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned with extension,
%% see get_all_proto_names/0 for a version that returns
%% the basenames sans extension
get_all_source_basenames() ->
    ["dump.proto", "trace.proto", "resource.proto",
     "timestamp.proto", "wrappers.proto"].


%% Retrieve all proto file names, also imported ones.
%% The order is top-down. The first element is always the main
%% source file. The files are returned sans .proto extension,
%% to make it easier to use them with the various get_xyz_containment
%% functions.
get_all_proto_names() ->
    ["dump", "trace", "resource", "timestamp", "wrappers"].


get_msg_containment("dump") -> [dump_spans];
get_msg_containment("trace") ->
    [attribute_value, module, span, attributes, link, links,
     time_event, annotation, message_event, time_events,
     tracestate, entry, stack_trace, stack_frame,
     stack_frames, status, truncatable_string];
get_msg_containment("resource") -> [resource];
get_msg_containment("timestamp") -> [timestamp];
get_msg_containment("wrappers") ->
    [bool_value, bytes_value, double_value, float_value,
     int_32_value, int_64_value, string_value,
     u_int_32_value, u_int_64_value];
get_msg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_pkg_containment("dump") ->
    'opencensus.proto.dump.v1';
get_pkg_containment("trace") ->
    'opencensus.proto.trace.v1';
get_pkg_containment("resource") ->
    'opencensus.proto.resource.v1';
get_pkg_containment("timestamp") -> 'google.protobuf';
get_pkg_containment("wrappers") -> 'google.protobuf';
get_pkg_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_service_containment("dump") -> [];
get_service_containment("trace") -> [];
get_service_containment("resource") -> [];
get_service_containment("timestamp") -> [];
get_service_containment("wrappers") -> [];
get_service_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_rpc_containment("dump") -> [];
get_rpc_containment("trace") -> [];
get_rpc_containment("resource") -> [];
get_rpc_containment("timestamp") -> [];
get_rpc_containment("wrappers") -> [];
get_rpc_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_enum_containment("dump") -> [];
get_enum_containment("trace") ->
    ['link.Type', 'span.SpanKind', 'message_event.Type'];
get_enum_containment("resource") -> [];
get_enum_containment("timestamp") -> [];
get_enum_containment("wrappers") -> [];
get_enum_containment(P) ->
    error({gpb_error, {badproto, P}}).


get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Timestamp">>) -> "timestamp";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Status">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.StackTrace.StackFrames">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.TimeEvents">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.Links">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.Attributes">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.dump.v1.DumpSpans">>) -> "dump";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.TimeEvent">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.UInt64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.UInt32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.StringValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Int64Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.Int32Value">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.FloatValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.DoubleValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.BytesValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"google.protobuf.BoolValue">>) -> "wrappers";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.resource.v1.Resource">>) -> "resource";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.StackTrace.StackFrame">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.StackTrace">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.Tracestate">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Module">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.AttributeValue">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.TruncatableString">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.Tracestate.Entry">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.Link">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.TimeEvent.Annotation">>) -> "trace";
get_proto_by_msg_name_as_fqbin(<<"opencensus.proto.trace.v1.Span">>) -> "trace";
get_proto_by_msg_name_as_fqbin(E) ->
    error({gpb_error, {badmsg, E}}).


-spec get_proto_by_service_name_as_fqbin(_) -> no_return().
get_proto_by_service_name_as_fqbin(E) ->
    error({gpb_error, {badservice, E}}).


get_proto_by_enum_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.SpanKind">>) -> "trace";
get_proto_by_enum_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.TimeEvent.MessageEvent.Type">>) -> "trace";
get_proto_by_enum_name_as_fqbin(<<"opencensus.proto.trace.v1.Span.Link.Type">>) -> "trace";
get_proto_by_enum_name_as_fqbin(E) ->
    error({gpb_error, {badenum, E}}).


get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.resource.v1">>) ->
    ["resource"];
get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.trace.v1">>) -> ["trace"];
get_protos_by_pkg_name_as_fqbin(<<"opencensus.proto.dump.v1">>) -> ["dump"];
get_protos_by_pkg_name_as_fqbin(<<"google.protobuf">>) ->
    ["timestamp", "wrappers"];
get_protos_by_pkg_name_as_fqbin(E) ->
    error({gpb_error, {badpkg, E}}).



gpb_version_as_string() ->
    "4.7.3".

gpb_version_as_list() ->
    [4,7,3].
